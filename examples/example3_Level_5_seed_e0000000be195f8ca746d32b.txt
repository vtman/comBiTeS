Original seed
11010111100010011010111100010011010111100010011010111100010011010111

11010111100010011010111100010011
01011110001001101011110001001101
0111

Length (original seed): 68

Weight: 38

Total number of rows: 3

Number of rows: 3

Indices of rows (new: original):
0: 2
1: 0
2: 1

01110000000000000000000000000000
11010111100010011010111100010011
01011110001001101011110001001101

Number of variables (gaps/ones): 31

Positions of gaps:
1: 0
2: 4
3: 5
4: 6
5: 7
6: 8
7: 9
8: 10
9: 11
10: 12
11: 13
12: 14
13: 15
14: 16
15: 17
16: 18
17: 19
18: 20
19: 21
20: 22
21: 23
22: 24
23: 25
24: 26
25: 27
26: 28
27: 29
28: 30
29: 31
30: 34
31: 36

Positions of ones:
1: 38
2: 39
3: 40
4: 44
5: 47
6: 48
7: 50
8: 52
9: 53
10: 54
11: 55
12: 59
13: 62
14: 63
15: 65
16: 67
17: 68
18: 69
19: 70
20: 74
21: 77
22: 78
23: 80
24: 82
25: 83
26: 84
27: 85
28: 89
29: 92
30: 93
31: 95

Original matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30	One                            	Gap                            
-----------------------------------------------------------------------------------------------------------------------------------------------------
   0 |   0   1  31   1 |   13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000100000000000000000	1000000000000000000000000000000
   1 |   0   1  30   1 |   12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	1000000000000000000000000000000
   2 |   0   1  27   2 |   11  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000010100000000000000000	1100000000000000000000000000000
   3 |   0   1  26   2 |    _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0110000000000000000000000000000
   4 |   0   1  25   2 |    _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0011000000000000000000000000000
   5 |   0   1  24   2 |    _   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0001100000000000000000000000000
   6 |   0   1  23   4 |   10  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111100000000000000000	1100110000000000000000000000000
   7 |   0   1  22   4 |    9   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000001011100000000000000000	1010011000000000000000000000000
   8 |   0   1  21   4 |    8   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000010011100000000000000000	1001001100000000000000000000000
   9 |   0   1  20   4 |    7   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000100011100000000000000000	1000100110000000000000000000000
  10 |   0   1  19   4 |    _  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111100000000000000000	0100010011000000000000000000000
  11 |   0   1  18   6 |    6   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001001111100000000000000000	1110001001100000000000000000000
  12 |   0   1  17   6 |    _   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111100000000000000000	0111000100110000000000000000000
  13 |   0   1  16   8 |    5   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000010111111100000000000000000	1111100010011000000000000000000
  14 |   0   1  15   8 |    4   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000100111111100000000000000000	1011110001001100000000000000000
  15 |   0   1  14   8 |    _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111100000000000000000	0101111000100110000000000000000
  16 |   0   1  13   8 |    _   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111100000000000000000	0010111100010011000000000000000
  17 |   0   1  12  10 |    3   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0001011111111100000000000000000	1101011110001001100000000000000
  18 |   0   1  11  10 |    _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0110101111000100110000000000000
  19 |   0   1  10  10 |    _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0011010111100010011000000000000
  20 |   0   1   9  10 |    _   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0001101011110001001100000000000
  21 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _	0011111111111100000000000000000	1100110101111000100110000000000
  22 |   0   1   7  12 |    1   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _	0101111111111100000000000000000	1010011010111100010011000000000
  23 |   0   1   6  12 |    0   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _	1001111111111100000000000000000	1001001101011110001001100000000
  24 |   0   1   5  11 |    _   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _	0001111111111100000000000000000	0000100110101111000100110000000
  25 |   0   1   4  12 |    _   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _	0011111111111100000000000000000	0100010011010111100010011000000
  26 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _	0111111111111100000000000000000	0110001001101011110001001100000
  27 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _	1111111111111100000000000000000	0111000100110101111000100110000
  28 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _	1111111111111100000000000000000	0011100010011010111100010011000
  29 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _	1111111111111100000000000000000	0001110001001101011110001001100
  30 |   0   1  -1  13 |    _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12   _   _	1111111111111000000000000000000	0000111000100110101111000100100
  31 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _	1111111111110000000000000000000	0000011100010011010111100010000
  32 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _	1111111111110000000000000000000	0000001110001001101011110001000
  33 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _	1111111111110000000000000000000	0000000111000100110101111000100
  34 |   0   1  -5  11 |    _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _   _   _	1111111111100000000000000000000	0000000011100010011010111100000
  35 |   0   1  -6  11 |    _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _   _	1111111111100000000000000000000	0000000001110001001101011110000
  36 |   0   1  -7  11 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _	1111111111100000000000000000000	0000000000111000100110101111000
  37 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _	1111111111100000000000000000000	0000000000011100010011010111100
  38 |   0   1  -9  10 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9   _   _	1111111111000000000000000000000	0000000000001110001001101011100
  39 |   0   1 -10   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   _   _	1111111110000000000000000000000	0000000000000111000100110101100
  40 |   0   1 -11   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   _   _	1111111100000000000000000000000	0000000000000011100010011010100
  41 |   0   1 -12   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   _   _	1111111000000000000000000000000	0000000000000001110001001101000
  42 |   0   1 -13   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   _	1111111000000000000000000000000	0000000000000000111000100110100
  43 |   0   1 -14   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _   _	1111110000000000000000000000000	0000000000000000011100010011000
  44 |   0   1 -15   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _	1111110000000000000000000000000	0000000000000000001110001001100
  45 |   0   1 -16   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   _   _	1111100000000000000000000000000	0000000000000000000111000100100
  46 |   0   1 -17   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   _	1111000000000000000000000000000	0000000000000000000011100010000
  47 |   0   1 -18   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _	1111000000000000000000000000000	0000000000000000000001110001000
  48 |   0   1 -19   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _	1111000000000000000000000000000	0000000000000000000000111000100
  49 |   0   1 -20   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _   _	1110000000000000000000000000000	0000000000000000000000011100000
  50 |   0   1 -21   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _	1110000000000000000000000000000	0000000000000000000000001110000
  51 |   0   1 -22   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _	1110000000000000000000000000000	0000000000000000000000000111000
  52 |   0   1 -23   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _	1110000000000000000000000000000	0000000000000000000000000011100
  53 |   0   1 -24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _	1100000000000000000000000000000	0000000000000000000000000001100
  54 |   0   1 -25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _	1000000000000000000000000000000	0000000000000000000000000000100
  55 |   0   2  31   1 |   30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	1000000000000000000000000000000
  56 |   0   2  29   1 |   29   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000010	1000000000000000000000000000000
  57 |   0   2  28   1 |   28   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000100	1000000000000000000000000000000
  58 |   0   2  27   1 |    _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	0100000000000000000000000000000
  59 |   0   2  26   1 |    _   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	0010000000000000000000000000000
  60 |   0   2  25   3 |   27  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001011	1101000000000000000000000000000
  61 |   0   2  24   3 |    _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0110100000000000000000000000000
  62 |   0   2  23   3 |    _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0011010000000000000000000000000
  63 |   0   2  22   3 |    _   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0001101000000000000000000000000
  64 |   0   2  21   5 |   26  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000011111	1100110100000000000000000000000
  65 |   0   2  20   5 |   25   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000101111	1010011010000000000000000000000
  66 |   0   2  19   5 |   24   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001001111	1001001101000000000000000000000
  67 |   0   2  18   5 |   23   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000010001111	1000100110100000000000000000000
  68 |   0   2  17   5 |    _  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000011111	0100010011010000000000000000000
  69 |   0   2  16   7 |   22  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000100111111	1110001001101000000000000000000
  70 |   0   2  15   7 |    _  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001111111	0111000100110100000000000000000
  71 |   0   2  14   9 |   21  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001011111111	1111100010011010000000000000000
  72 |   0   2  13   9 |   20   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000010011111111	1011110001001101000000000000000
  73 |   0   2  12   9 |    _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000111111111	0101111000100110100000000000000
  74 |   0   2  11   9 |    _   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000111111111	0010111100010011010000000000000
  75 |   0   2  10  11 |   19  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000101111111111	1101011110001001101000000000000
  76 |   0   2   9  11 |    _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0110101111000100110100000000000
  77 |   0   2   8  11 |    _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0011010111100010011010000000000
  78 |   0   2   7  11 |    _   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0001101011110001001101000000000
  79 |   0   2   6  13 |   18  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _	0000000000000000001111111111111	1100110101111000100110100000000
  80 |   0   2   5  13 |   17   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _	0000000000000000010111111111111	1010011010111100010011010000000
  81 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _	0000000000000000100111111111111	1001001101011110001001101000000
  82 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _	0000000000000001000111111111111	1000100110101111000100110100000
  83 |   0   2   2  13 |    _  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _	0000000000000000001111111111111	0100010011010111100010011010000
  84 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _	0000000000000010011111111111111	1110001001101011110001001101000
  85 |   0   2   0  15 |    _  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _	0000000000000000111111111111111	0111000100110101111000100110100
  86 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _	0000000000000001111111111111110	0111100010011010111100010011000
  87 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _	0000000000000001111111111111110	0011110001001101011110001001100
  88 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _	0000000000000011111111111111100	0101111000100110101111000100100
  89 |   0   2  -4  14 |    _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _   _	0000000000000011111111111111000	0010111100010011010111100010000
  90 |   0   2  -5  14 |    _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _	0000000000000011111111111111000	0001011110001001101011110001000
  91 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _	0000000000000011111111111111000	0000101111000100110101111000100
  92 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _	0000000000000011111111111110000	0000010111100010011010111100000
  93 |   0   2  -8  13 |    _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _	0000000000000011111111111110000	0000001011110001001101011110000
  94 |   0   2  -9  13 |    _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _	0000000000000011111111111110000	0000000101111000100110101111000
  95 |   0   2 -10  13 |    _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _	0000000000000011111111111110000	0000000010111100010011010111100
  96 |   0   2 -11  12 |    _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25   _   _	0000000000000011111111111100000	0000000001011110001001101011100
  97 |   0   2 -12  11 |    _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24   _   _	0000000000000011111111111000000	0000000000101111000100110101100
  98 |   0   2 -13  10 |    _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23   _   _	0000000000000011111111110000000	0000000000010111100010011010100
  99 |   0   2 -14   9 |    _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _   _   _	0000000000000011111111100000000	0000000000001011110001001101000
 100 |   0   2 -15   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _   _	0000000000000011111111100000000	0000000000000101111000100110100
 101 |   0   2 -16   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _   _   _	0000000000000011111111000000000	0000000000000010111100010011000
 102 |   0   2 -17   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _   _	0000000000000011111111000000000	0000000000000001011110001001100
 103 |   0   2 -18   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20   _   _	0000000000000011111110000000000	0000000000000000101111000100100
 104 |   0   2 -19   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _   _   _	0000000000000011111100000000000	0000000000000000010111100010000
 105 |   0   2 -20   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _   _	0000000000000011111100000000000	0000000000000000001011110001000
 106 |   0   2 -21   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _	0000000000000011111100000000000	0000000000000000000101111000100
 107 |   0   2 -22   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _   _   _	0000000000000011111000000000000	0000000000000000000010111100000
 108 |   0   2 -23   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _   _	0000000000000011111000000000000	0000000000000000000001011110000
 109 |   0   2 -24   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _	0000000000000011111000000000000	0000000000000000000000101111000
 110 |   0   2 -25   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _	0000000000000011111000000000000	0000000000000000000000010111100
 111 |   0   2 -26   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17   _   _	0000000000000011110000000000000	0000000000000000000000001011100
 112 |   0   2 -27   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16   _   _	0000000000000011100000000000000	0000000000000000000000000101100
 113 |   0   2 -28   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15   _   _	0000000000000011000000000000000	0000000000000000000000000010100
 114 |   0   2 -29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _   _	0000000000000010000000000000000	0000000000000000000000000001000
 115 |   0   2 -30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _	0000000000000010000000000000000	0000000000000000000000000000100
 116 |   1   1  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _	0000000000000100000000000000000	0000000000000000000000000000010
 117 |   1   1  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	0000000000001000000000000000000	0000000000000000000000000000010
 118 |   1   1  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13	0000000000000100000000000000000	0000000000000000000000000000001
 119 |   1   1  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12	0000000000001000000000000000000	0000000000000000000000000000001
 120 |   1   1  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _	0000000000010000000000000000000	0000000000000000000000000000010
 121 |   1   1  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11	0000000000010000000000000000000	0000000000000000000000000000001
 122 |   1   1  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	0000000000100000000000000000000	0000000000000000000000000000010
 123 |   1   1  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _	0000000001000000000000000000000	0000000000000000000000000000010
 124 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  10	0000000010100000000000000000000	0000000000000000000000000000011
 125 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9	0000000101000000000000000000000	0000000000000000000000000000011
 126 |   1   1  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	0000000010000000000000000000000	0000000000000000000000000000001
 127 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7	0000001100000000000000000000000	0000000000000000000000000000011
 128 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6	0000011000000000000000000000000	0000000000000000000000000000011
 129 |   1   1  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _	0000100000000000000000000000000	0000000000000000000000000000010
 130 |   1   1  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5	0000010000000000000000000000000	0000000000000000000000000000001
 131 |   1   1  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4	0000100000000000000000000000000	0000000000000000000000000000001
 132 |   1   1  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _	0001000000000000000000000000000	0000000000000000000000000000010
 133 |   1   1   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3	0001000000000000000000000000000	0000000000000000000000000000001
 134 |   1   1   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	0010000000000000000000000000000	0000000000000000000000000000010
 135 |   1   1   5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	0100000000000000000000000000000	0000000000000000000000000000010
 136 |   1   1   4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2	1010000000000000000000000000000	0000000000000000000000000000011
 137 |   1   1   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	0100000000000000000000000000000	0000000000000000000000000000001
 138 |   1   1   2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	1000000000000000000000000000000	0000000000000000000000000000001
 139 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30   _	0000000000000000000000000000001	0000000000000000000000000000010
 140 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30	0000000000000000000000000000011	0000000000000000000000000000011
 141 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _	0000000000000000000000000000100	0000000000000000000000000000010
 142 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29	0000000000000000000000000000010	0000000000000000000000000000001
 143 |   1   2  24   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28	0000000000000000000000000000100	0000000000000000000000000000001
 144 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27   _	0000000000000000000000000001000	0000000000000000000000000000010
 145 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27	0000000000000000000000000001000	0000000000000000000000000000001
 146 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  26   _	0000000000000000000000000010000	0000000000000000000000000000010
 147 |   1   2  18   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25   _	0000000000000000000000000100000	0000000000000000000000000000010
 148 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26	0000000000000000000000001010000	0000000000000000000000000000011
 149 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  25	0000000000000000000000010100000	0000000000000000000000000000011
 150 |   1   2  15   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24	0000000000000000000000001000000	0000000000000000000000000000001
 151 |   1   2  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23	0000000000000000000000110000000	0000000000000000000000000000011
 152 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22	0000000000000000000001100000000	0000000000000000000000000000011
 153 |   1   2  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20   _	0000000000000000000010000000000	0000000000000000000000000000010
 154 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21	0000000000000000000001000000000	0000000000000000000000000000001
 155 |   1   2   9   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20	0000000000000000000010000000000	0000000000000000000000000000001
 156 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19   _	0000000000000000000100000000000	0000000000000000000000000000010
 157 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19	0000000000000000000100000000000	0000000000000000000000000000001
 158 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  18   _	0000000000000000001000000000000	0000000000000000000000000000010
 159 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _	0000000000000000010000000000000	0000000000000000000000000000010
 160 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18	0000000000000000101000000000000	0000000000000000000000000000011
 161 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17	0000000000000001010000000000000	0000000000000000000000000000011
 162 |   1   2   0   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	0000000000000000100000000000000	0000000000000000000000000000001
 163 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	0000000000000011000000000000000	0000000000000000000000000000011
 164 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	0000000000000010000000000000000	0000000000000000000000000000001
-----------------------------------------------------------------------------------------------------------------------------------------------------
Sorted matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30	One                            	Gap                            
-----------------------------------------------------------------------------------------------------------------------------------------------------
   0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _	0000000000000010011111111111111	1110001001101011110001001101000
   1 |   0   2   0  15 |    _  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _	0000000000000000111111111111111	0111000100110101111000100110100
   2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _	0000000000000001111111111111110	0111100010011010111100010011000
   3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _	0000000000000001111111111111110	0011110001001101011110001001100
   4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _	0000000000000011111111111111100	0101111000100110101111000100100
   5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _	1111111111111100000000000000000	0111000100110101111000100110000
   6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _	1111111111111100000000000000000	0011100010011010111100010011000
   7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _	1111111111111100000000000000000	0001110001001101011110001001100
   8 |   0   2  -4  14 |    _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _   _	0000000000000011111111111111000	0010111100010011010111100010000
   9 |   0   2  -5  14 |    _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _	0000000000000011111111111111000	0001011110001001101011110001000
  10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _	0000000000000011111111111111000	0000101111000100110101111000100
  11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _	0111111111111100000000000000000	0110001001101011110001001100000
  12 |   0   1  -1  13 |    _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12   _   _	1111111111111000000000000000000	0000111000100110101111000100100
  13 |   0   2   6  13 |   18  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _	0000000000000000001111111111111	1100110101111000100110100000000
  14 |   0   2   5  13 |   17   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _	0000000000000000010111111111111	1010011010111100010011010000000
  15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _	0000000000000000100111111111111	1001001101011110001001101000000
  16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _	0000000000000001000111111111111	1000100110101111000100110100000
  17 |   0   2   2  13 |    _  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _	0000000000000000001111111111111	0100010011010111100010011010000
  18 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _	0000000000000011111111111110000	0000010111100010011010111100000
  19 |   0   2  -8  13 |    _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _	0000000000000011111111111110000	0000001011110001001101011110000
  20 |   0   2  -9  13 |    _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _	0000000000000011111111111110000	0000000101111000100110101111000
  21 |   0   2 -10  13 |    _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _	0000000000000011111111111110000	0000000010111100010011010111100
  22 |   0   1   7  12 |    1   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _	0101111111111100000000000000000	1010011010111100010011000000000
  23 |   0   1   6  12 |    0   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _	1001111111111100000000000000000	1001001101011110001001100000000
  24 |   0   1   4  12 |    _   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _	0011111111111100000000000000000	0100010011010111100010011000000
  25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _	1111111111110000000000000000000	0000011100010011010111100010000
  26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _	1111111111110000000000000000000	0000001110001001101011110001000
  27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _	1111111111110000000000000000000	0000000111000100110101111000100
  28 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _	0011111111111100000000000000000	1100110101111000100110000000000
  29 |   0   2 -11  12 |    _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25   _   _	0000000000000011111111111100000	0000000001011110001001101011100
  30 |   0   1   5  11 |    _   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _	0001111111111100000000000000000	0000100110101111000100110000000
  31 |   0   1  -5  11 |    _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _   _   _	1111111111100000000000000000000	0000000011100010011010111100000
  32 |   0   1  -6  11 |    _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _   _	1111111111100000000000000000000	0000000001110001001101011110000
  33 |   0   1  -7  11 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _	1111111111100000000000000000000	0000000000111000100110101111000
  34 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _	1111111111100000000000000000000	0000000000011100010011010111100
  35 |   0   2  10  11 |   19  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000101111111111	1101011110001001101000000000000
  36 |   0   2   9  11 |    _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0110101111000100110100000000000
  37 |   0   2   8  11 |    _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0011010111100010011010000000000
  38 |   0   2   7  11 |    _   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _	0000000000000000000011111111111	0001101011110001001101000000000
  39 |   0   2 -12  11 |    _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24   _   _	0000000000000011111111111000000	0000000000101111000100110101100
  40 |   0   1  -9  10 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9   _   _	1111111111000000000000000000000	0000000000001110001001101011100
  41 |   0   1  12  10 |    3   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0001011111111100000000000000000	1101011110001001100000000000000
  42 |   0   1  11  10 |    _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0110101111000100110000000000000
  43 |   0   1  10  10 |    _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0011010111100010011000000000000
  44 |   0   1   9  10 |    _   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _	0000111111111100000000000000000	0001101011110001001100000000000
  45 |   0   2 -13  10 |    _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23   _   _	0000000000000011111111110000000	0000000000010111100010011010100
  46 |   0   2  14   9 |   21  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001011111111	1111100010011010000000000000000
  47 |   0   2  13   9 |   20   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000010011111111	1011110001001101000000000000000
  48 |   0   2  12   9 |    _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000111111111	0101111000100110100000000000000
  49 |   0   2  11   9 |    _   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000111111111	0010111100010011010000000000000
  50 |   0   1 -10   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   _   _	1111111110000000000000000000000	0000000000000111000100110101100
  51 |   0   2 -14   9 |    _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _   _   _	0000000000000011111111100000000	0000000000001011110001001101000
  52 |   0   2 -15   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _   _	0000000000000011111111100000000	0000000000000101111000100110100
  53 |   0   1 -11   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   _   _	1111111100000000000000000000000	0000000000000011100010011010100
  54 |   0   1  16   8 |    5   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000010111111100000000000000000	1111100010011000000000000000000
  55 |   0   1  15   8 |    4   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000100111111100000000000000000	1011110001001100000000000000000
  56 |   0   1  14   8 |    _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111100000000000000000	0101111000100110000000000000000
  57 |   0   1  13   8 |    _   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111100000000000000000	0010111100010011000000000000000
  58 |   0   2 -16   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _   _   _	0000000000000011111111000000000	0000000000000010111100010011000
  59 |   0   2 -17   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _   _	0000000000000011111111000000000	0000000000000001011110001001100
  60 |   0   2  16   7 |   22  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000100111111	1110001001101000000000000000000
  61 |   0   2  15   7 |    _  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001111111	0111000100110100000000000000000
  62 |   0   1 -12   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   _   _	1111111000000000000000000000000	0000000000000001110001001101000
  63 |   0   1 -13   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   _	1111111000000000000000000000000	0000000000000000111000100110100
  64 |   0   2 -18   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20   _   _	0000000000000011111110000000000	0000000000000000101111000100100
  65 |   0   1  18   6 |    6   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001001111100000000000000000	1110001001100000000000000000000
  66 |   0   1  17   6 |    _   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111100000000000000000	0111000100110000000000000000000
  67 |   0   1 -14   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _   _	1111110000000000000000000000000	0000000000000000011100010011000
  68 |   0   1 -15   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _	1111110000000000000000000000000	0000000000000000001110001001100
  69 |   0   2 -19   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _   _   _	0000000000000011111100000000000	0000000000000000010111100010000
  70 |   0   2 -20   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _   _	0000000000000011111100000000000	0000000000000000001011110001000
  71 |   0   2 -21   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _	0000000000000011111100000000000	0000000000000000000101111000100
  72 |   0   2  20   5 |   25   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000101111	1010011010000000000000000000000
  73 |   0   2  19   5 |   24   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001001111	1001001101000000000000000000000
  74 |   0   2  18   5 |   23   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000010001111	1000100110100000000000000000000
  75 |   0   2  17   5 |    _  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000011111	0100010011010000000000000000000
  76 |   0   1 -16   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   _   _	1111100000000000000000000000000	0000000000000000000111000100100
  77 |   0   2  21   5 |   26  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000011111	1100110100000000000000000000000
  78 |   0   2 -22   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _   _   _	0000000000000011111000000000000	0000000000000000000010111100000
  79 |   0   2 -23   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _   _	0000000000000011111000000000000	0000000000000000000001011110000
  80 |   0   2 -24   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _	0000000000000011111000000000000	0000000000000000000000101111000
  81 |   0   2 -25   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _	0000000000000011111000000000000	0000000000000000000000010111100
  82 |   0   1  21   4 |    8   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000010011100000000000000000	1001001100000000000000000000000
  83 |   0   1  20   4 |    7   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000100011100000000000000000	1000100110000000000000000000000
  84 |   0   1  19   4 |    _  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111100000000000000000	0100010011000000000000000000000
  85 |   0   1 -18   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _	1111000000000000000000000000000	0000000000000000000001110001000
  86 |   0   1  23   4 |   10  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111100000000000000000	1100110000000000000000000000000
  87 |   0   1  22   4 |    9   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000001011100000000000000000	1010011000000000000000000000000
  88 |   0   1 -19   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _	1111000000000000000000000000000	0000000000000000000000111000100
  89 |   0   1 -17   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   _	1111000000000000000000000000000	0000000000000000000011100010000
  90 |   0   2 -26   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16  17   _   _	0000000000000011110000000000000	0000000000000000000000001011100
  91 |   0   2  22   3 |    _   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0001101000000000000000000000000
  92 |   0   1 -20   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _   _	1110000000000000000000000000000	0000000000000000000000011100000
  93 |   0   1 -21   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _	1110000000000000000000000000000	0000000000000000000000001110000
  94 |   0   1 -22   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _	1110000000000000000000000000000	0000000000000000000000000111000
  95 |   0   1 -23   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _	1110000000000000000000000000000	0000000000000000000000000011100
  96 |   0   2  25   3 |   27  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001011	1101000000000000000000000000000
  97 |   0   2  24   3 |    _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0110100000000000000000000000000
  98 |   0   2  23   3 |    _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000111	0011010000000000000000000000000
  99 |   0   2 -27   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15  16   _   _	0000000000000011100000000000000	0000000000000000000000000101100
 100 |   0   1  27   2 |   11  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000010100000000000000000	1100000000000000000000000000000
 101 |   0   1  25   2 |    _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0011000000000000000000000000000
 102 |   0   1  26   2 |    _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0110000000000000000000000000000
 103 |   0   1 -24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _	1100000000000000000000000000000	0000000000000000000000000001100
 104 |   0   1  24   2 |    _   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001100000000000000000	0001100000000000000000000000000
 105 |   0   2 -28   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _  15   _   _	0000000000000011000000000000000	0000000000000000000000000010100
 106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  10	0000000010100000000000000000000	0000000000000000000000000000011
 107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9	0000000101000000000000000000000	0000000000000000000000000000011
 108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7	0000001100000000000000000000000	0000000000000000000000000000011
 109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6	0000011000000000000000000000000	0000000000000000000000000000011
 110 |   1   1   4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2	1010000000000000000000000000000	0000000000000000000000000000011
 111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30	0000000000000000000000000000011	0000000000000000000000000000011
 112 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26	0000000000000000000000001010000	0000000000000000000000000000011
 113 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  25	0000000000000000000000010100000	0000000000000000000000000000011
 114 |   1   2  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23	0000000000000000000000110000000	0000000000000000000000000000011
 115 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22	0000000000000000000001100000000	0000000000000000000000000000011
 116 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18	0000000000000000101000000000000	0000000000000000000000000000011
 117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17	0000000000000001010000000000000	0000000000000000000000000000011
 118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	0000000000000011000000000000000	0000000000000000000000000000011
 119 |   1   1  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12	0000000000001000000000000000000	0000000000000000000000000000001
 120 |   1   1  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _	0000000000010000000000000000000	0000000000000000000000000000010
 121 |   1   1  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11	0000000000010000000000000000000	0000000000000000000000000000001
 122 |   1   1  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	0000000000100000000000000000000	0000000000000000000000000000010
 123 |   1   1  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _	0000000001000000000000000000000	0000000000000000000000000000010
 124 |   0   2  28   1 |   28   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000100	1000000000000000000000000000000
 125 |   0   2  27   1 |    _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	0100000000000000000000000000000
 126 |   1   1  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	0000000010000000000000000000000	0000000000000000000000000000001
 127 |   0   1 -25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _	1000000000000000000000000000000	0000000000000000000000000000100
 128 |   0   2  31   1 |   30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	1000000000000000000000000000000
 129 |   1   1  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _	0000100000000000000000000000000	0000000000000000000000000000010
 130 |   1   1  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5	0000010000000000000000000000000	0000000000000000000000000000001
 131 |   1   1  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4	0000100000000000000000000000000	0000000000000000000000000000001
 132 |   1   1  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _	0001000000000000000000000000000	0000000000000000000000000000010
 133 |   1   1   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3	0001000000000000000000000000000	0000000000000000000000000000001
 134 |   1   1   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	0010000000000000000000000000000	0000000000000000000000000000010
 135 |   1   1   5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	0100000000000000000000000000000	0000000000000000000000000000010
 136 |   0   2  29   1 |   29   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000010	1000000000000000000000000000000
 137 |   1   1   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	0100000000000000000000000000000	0000000000000000000000000000001
 138 |   1   1   2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	1000000000000000000000000000000	0000000000000000000000000000001
 139 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30   _	0000000000000000000000000000001	0000000000000000000000000000010
 140 |   0   2  26   1 |    _   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	0010000000000000000000000000000
 141 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _	0000000000000000000000000000100	0000000000000000000000000000010
 142 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29	0000000000000000000000000000010	0000000000000000000000000000001
 143 |   1   2  24   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28	0000000000000000000000000000100	0000000000000000000000000000001
 144 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27   _	0000000000000000000000000001000	0000000000000000000000000000010
 145 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27	0000000000000000000000000001000	0000000000000000000000000000001
 146 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  26   _	0000000000000000000000000010000	0000000000000000000000000000010
 147 |   1   2  18   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25   _	0000000000000000000000000100000	0000000000000000000000000000010
 148 |   0   1  30   1 |   12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	1000000000000000000000000000000
 149 |   0   1  31   1 |   13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000100000000000000000	1000000000000000000000000000000
 150 |   1   2  15   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24	0000000000000000000000001000000	0000000000000000000000000000001
 151 |   0   2 -29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _   _	0000000000000010000000000000000	0000000000000000000000000001000
 152 |   0   2 -30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _	0000000000000010000000000000000	0000000000000000000000000000100
 153 |   1   2  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20   _	0000000000000000000010000000000	0000000000000000000000000000010
 154 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21	0000000000000000000001000000000	0000000000000000000000000000001
 155 |   1   2   9   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20	0000000000000000000010000000000	0000000000000000000000000000001
 156 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19   _	0000000000000000000100000000000	0000000000000000000000000000010
 157 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19	0000000000000000000100000000000	0000000000000000000000000000001
 158 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  18   _	0000000000000000001000000000000	0000000000000000000000000000010
 159 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _	0000000000000000010000000000000	0000000000000000000000000000010
 160 |   1   1  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _	0000000000000100000000000000000	0000000000000000000000000000010
 161 |   1   1  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	0000000000001000000000000000000	0000000000000000000000000000010
 162 |   1   2   0   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	0000000000000000100000000000000	0000000000000000000000000000001
 163 |   1   1  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13	0000000000000100000000000000000	0000000000000000000000000000001
 164 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	0000000000000010000000000000000	0000000000000000000000000000001
-----------------------------------------------------------------------------------------------------------------------------------------------------

===========================================================================

Solution: 1

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 3 |   18 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _  19   _   _   _  21   _   _   _   _   _  25   _   _   _   _  27   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _  20   _   _  22   _   _   _   _   _   _   _   _   _   _   _  28   _   _   _   _
   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
   _   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24   _  26   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEEE000E00EE0E0EEEE000E00EE
0C0FFCC000C00DC0D0FFCF000C00DG0G

Seed (after)

CAAACCEEECFFECDEEDECEEEECFFEFDEE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000C000C00000C0000C000000
Input row #  2                                0000000000000D00D00000000000D000
Input row #  1                               000000EEE000E00EE0E0EEEE000E00EE
Input row #  2                                      000FF0000000000000FF0F0000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104462)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10012000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0018)), 7));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 2

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |   22 |   0   1   7  12 |    1   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _   _  21   _   _   _   _  24   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _
   _  15  16  17  18   _   _   _   _   _   _  20   _   _  22   _  23   _  25  26   _   _   _  27   _   _  28   _   _   _   _
   _   _   _   _   _   4   _   _   _   _   _   _   9   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   5   _   _   _   _   8   _  10   _   _   _  11   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000F00EF0G0GFEF000F00EE
0C0DDDD000C00DC0D0DCDD000D00DC0C

Seed (after)

CAAADDDDECFFFCDEFDCDFDDEEFDFCDCF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C000C0000C000000000C0C
Input row #  2                                000DDDD000000D00D0D0DD000D00D000
Input row #  1                        000000000000000E000000E0000000EE
Input row #  1                                   000000FFF000F000F0000F0F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0084402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12352078)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0408000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08a111c0)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 3

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 3 |   28 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _   _  21   _  22   _  23  24   _  26   _   _   _  27   _   _   _  29   _  30   _   _   _
   _  15  16  17  18   _   _   _   _   _   _  20   _   _   _   _   _   _  25   _   _   _   _   _   _   _  28   _   _   _   _
   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   _   _   _   _   _   8   9  10   _   _   _  11   _   _
   _   _   _   _   _   5   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEEE000E00EF0G0GEEE000E00FF
0C0DDDD000C00DC0C0CCDC000C00DC0C

Seed (after)

CAAADDDDFCEEECDCECCECDFFCEEECDCE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C000C0C0CC0C000C000C0C
Input row #  2                                000DDDD000000D000000D0000000D000
Input row #  1                                   000000EEE000E00E00000EEE000E0000
Input row #  1                       0000000000000000F0000000000000FF

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa22d4402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10102078)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08e091c0)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0010000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 4

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 3 |   28 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _
 4 |  110 |   1   1   4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _  20  21   _  22   _  23  24   _  26   _   _   _   _   _   _   _  29   _  30   _   _   _
   _  15  16  17  18   _   _   _   _   _   _   _   _   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _   _   _
   _   _   _   _   _   _   _   _   1   _   _   _   _   3   _   _   4   _   _   _   _   7   8   _  10   _   _   _  11   _   _
   _   _   _   _   _   5   _   6   _   _   _   9   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BGEG000E00EF0F0EEFE000E00FF
0C0DDDD000C00CC0C0CCDC000D00DC0C

Seed (after)

CAAADDDDFCFECCFCECCECDFFEEDECDCE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C00CC0C0CC0C0000000C0C
Input row #  2                                000DDDD0000000000000D0000D00D000
Input row #  1                                   0000000E0000E00E0000EE0E000E0000
Input row #  1                       0000000000000000F0F000F0000000FF

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                           000000G0G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa02d6402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12100078)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08b09080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0450000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000140)), 4));
}


===========================================================================

Solution: 5

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 3 |   28 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _
 4 |  110 |   1   1   4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _   _  21   _  22   _  23  24   _  26   _   _   _  27   _   _   _  29   _  30   _   _   _
   _  15  16  17  18   _   _   _   _   _   _  20   _   _   _   _   _   _  25   _   _   _   _   _   _   _  28   _   _   _   _
   _   _   _   _   _   _   _   _   1   _   _   _   _   3   _   _   4   _   _   _   _   _   8   9  10   _   _   _  11   _   _
   _   _   _   _   _   5   _   6   _   7   _   _   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   2
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BGEG000E00EF0F0FEEE000E00FF
0C0DDDD000C00DC0C0CCDC000C00DC0C

Seed (after)

CAAADDDDFCFEFCDCECCECDFFCEEECDCE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C000C0C0CC0C000C000C0C
Input row #  2                                000DDDD000000D000000D0000000D000
Input row #  1                                   0000000E0000E00E00000EEE000E0000
Input row #  1                       0000000000000000F0F0F000000000FF

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                           000000G0G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa22d4402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10102078)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08e09080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0150000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000140)), 4));
}


===========================================================================

Solution: 6

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 2 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _  20   _   _   _   _  23   _   _   _   _   _   _  27   _   _  28   _   _  30   _   _   _
   _   _  15  16  17  18   _   _   _   _   _   _   _  21   _  22   _   _  24  25  26   _   _   _   _   _   _   _  29   _   _
   _   0   _   _   _   _   _   _   _   _   4   5   _   _   _   _   8   9   _   _   _   _  11   _   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   1   2   _   _   _   3   _   _   _   _   _   _   _   _   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEFF000F00EE0G0GEEF000E00EE
0C0DDDD000C00CD0D0CDDD000C00CD0C

Seed (after)

CAAAEDDDDCFFCEEFDCDEEDDDCEFCEECD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C00C0000C000000C00C00C
Input row #  2                                 000DDDD0000000D0D00DDD0000000D00
Input row #  1                             000000E00000000EE0000EE0000E00EE
Input row #  1                                  0000000FF000F0000000000F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92042402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20394078)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8618040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00801180)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 7

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 2 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  112 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _  20   _   _   _   _  23   _   _   _   _   _   _  27   _   _  28   _   _  30   _   _   _
   _   _  15  16  17  18   _   _   _   _   _   _   _  21   _  22   _   _   _  25   _   _   _   _   _   _   _   _  29   _   _
   _   0   _   _   _   _   _   _   _   _   4   5   _   _   _   _   8   9   _   _   _   _  11   _   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   1   2   _   _   _   3   _   _   _   _   _   6   _   7   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEFF000F00EE0F0FEEF000E00EE
0C0DDDD000C00CD0D0CGDG000C00CD0C

Seed (after)

CAAAEDDDDCFFCEEFDCDEEFDFCEFCEECD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C00C0000C000000C00C00C
Input row #  2                                 000DDDD0000000D0D000D00000000D00
Input row #  1                             000000E00000000EE0000EE0000E00EE
Input row #  1                                  0000000FF000F00000F0F00F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2              0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92042402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20114078)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8618040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00941180)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 17));
}


===========================================================================

Solution: 8

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 2 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  115 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _  19   _   _  20   _   _   _   _  23   _   _   _   _   _   _  27   _   _  28   _   _  30   _   _   _
   _   _  15  16  17  18   _   _   _   _   _   _   _   _   _   _   _   _  24  25  26   _   _   _   _   _   _   _  29   _   _
   _   0   _   _   _   _   _   _   _   _   4   5   _   6   _   7   8   9   _   _   _   _  11   _   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   1   2   _   _   _   3   _   _   _   _   _   _   _   _   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEFF000F00EE0E0EEEF000E00EE
0C0DDDD000C00CG0G0CDDD000C00CD0C

Seed (after)

CAAAEDDDDCFFCEEFECEEEDDDCEFCEECD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000000C00C0000C000000C00C00C
Input row #  2                                 000DDDD000000000000DDD0000000D00
Input row #  1                             000000E00000000EE0E0EEE0000E00EE
Input row #  1                                  0000000FF000F0000000000F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                   00000000000000G0G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92042402)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20380078)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8758040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00801180)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00014000)), 12));
}


===========================================================================

Solution: 9

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 2 |   30 |   0   1   5  11 |    _   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _
 3 |   34 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17   _   _   _   _  19   _   _  20  21   _   _   _   _   _  25   _   _   _   _  27   _   _  28  29   _  30   _   _   _
   _   _  15  16   _  18   _   _   _   _   _   _   _   _   _  22   _  23  24   _  26   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   3   _   _   4   5   _   _   _   _   _   9   _   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _   _   _   _   _   _   _   _   _   8   _  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000E00EE0G0GFEF000E00EE
0C0DDCD000C00CC0D0DDCD000C00CC0C

Seed (after)

CAAACDDEDCEECCFFFEDCDDEDCEECCFCF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C0000C00CC00000C0000C00CC0C
Input row #  2                                 000DD0D000000000D0DD0D0000000000
Input row #  1                          000000000000E00EE00000E0000E00EE
Input row #  1                                       000000FFF000000000000F0F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2106422)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002d0058)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8419000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a001c0)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 10

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 2 |   30 |   0   1   5  11 |    _   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _
 3 |   34 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _
 4 |  115 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17   _   _   _   _  19   _   _  20   _   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _  30   _   _   _
   _   _  15  16   _  18   _   _   _   _   _   _   _   _   _   _   _  23  24   _  26   _   _   _   _   _   _   _  29   _   _
   _   _   _   _   3   _   _   4   5   _   6   _   _   _   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   _   _   _   _   _   _   _   _   7   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000E00EE0E0FFEE000E00EE
0C0DDCD000C00CG0G0DDCD000C00CD0C

Seed (after)

CAAACDDEDCEECEFFFEECDDEDCEECFFCD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C0000C00C000000C0000C00C00C
Input row #  2                                 000DD0D00000000000DD0D0000000D00
Input row #  1                          000000000000E00EE0E000EE000E00EE
Input row #  1                                       000000FFF00000000000FF0000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                   00000000000000G0G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92102422)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x202c0058)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8c59000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003001c0)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00014000)), 12));
}


===========================================================================

Solution: 11

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 2 |   24 |   0   1   4  12 |    _   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _
 3 |   25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _   _   _   _   _   _   _  22   _   _   _  25  26   _   _   _  27   _   _   _  29   _  30   _   _   _
   _   _   _  15  16   _   _   _   _   _  19   _   _  20  21   _   _   _  23  24   _   _   _   _   _   _   _   _  28   _   _
   _   _   _   _   _   _   _   _   4   5   _   _   _   _   _   9   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   _   _   _   _   _   8   _  10   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000F00EE0G0GFEF000F00EE
0C0DDCC000D00DD0C0DDCC000C00DC0C

Seed (after)

CAAACCDDFFFEEDFCDDECCDDFCFEECFCD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000000000C000CC000C000C0C
Input row #  2                                  000DD00000D00DD000DD00000000D000
Input row #  1                           000000000000000EE00000E0000000EE
Input row #  1                                 000000FFF000F00000000F0F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2310062)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x100c6418)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0418000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08a011c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 12

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 2 |   24 |   0   1   4  12 |    _   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _
 3 |   25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _
 4 |  109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _   _   _   _  20   _   _  22   _   _   _  25  26   _   _   _  27   _   _   _  29   _  30   _   _   _
   _   _   _  15  16   _   _   _   _   _  19   _   _   _  21   _   _   _  23  24   _   _   _   _   _   _   _   _  28   _   _
   _   _   _   _   _   _   _   _   4   _   _   _   _   7   _   9   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   _   _   _   _   _   8   _  10   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000F00EG0G0EFEF000F00EE
0C0DDCC000D00CD0C0DDCC000C00DC0C

Seed (after)

CAAACCDDFFFECDFCEDECCDDFCFEECFCD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000000C00C000CC000C000C0C
Input row #  2                                  000DD00000D000D000DD00000000D000
Input row #  1                           000000000000000E0000E0E0000000EE
Input row #  1                                 000000FFF000F00000000F0F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                 0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2312062)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x100c4418)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0508000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08a011c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 14));
}


===========================================================================

Solution: 13

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 2 |   24 |   0   1   4  12 |    _   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _
 3 |   25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _
 4 |  112 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _   _   _   _   _   _   _  22   _   _   _  25   _   _   _   _  27   _   _   _  29   _  30   _   _   _
   _   _   _  15  16   _   _   _   _   _  19   _   _  20  21   _   _   _  23   _   _   _   _   _   _   _   _   _  28   _   _
   _   _   _   _   _   _   _   _   4   5   _   _   _   _   _   9   _   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   0   1   2   _   _   _   3   _   _   _   _   _   6   _   7   8   _  10   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFFF000F00EE0F0FFEF000F00EE
0C0DDCC000D00DD0C0DGCG000C00DC0C

Seed (after)

CAAACCDDFFFEEDFCDDECFDFFCFEECFCD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000000000C000C0000C000C0C
Input row #  2                                  000DD00000D00DD000D000000000D000
Input row #  1                           000000000000000EE00000E0000000EE
Input row #  1                                 000000FFF000F00000F0FF0F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2              0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2110062)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10046418)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0418000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08b411c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 17));
}


===========================================================================

Solution: 14

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 3 |   10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _
 4 |  107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _   _   _   _  20  21   _   _   _  23   _  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
   _   _   _   _   _   _   _   _   3   _   _   4   5   _   _   _   _   _   _   _   _   _   _  11   _   _  12   _   _   _   _
   _   _   _   0   1   2   _   _   _   _   _   _   _   _   _   6   _   _   8   _  10   _   _   _   _   _   _   _  13   _   _
   _   _   _   _   _   _  15  16   _   _   _   _   _  19   _   _   _   _   _  22   _   _  24   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BEEE000D00DD0E0GEGE000D00DE
0C0FFCC000F00CC0F0CFCC000C00CC0C

Seed (after)

CAAACCEEEFFDCCDDFCECCEFECFDCCDCE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000000CC000C0CC000C00CC0C
Input row #  1                              000000000000D00DD0000000000D00D0
Input row #  1                               000000EEE000000000E00E0E0000000E
Input row #  2                                     000FF00000F00000F00F000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1             00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2346062)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48019000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a401c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00090418)), 6));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 18));
}


===========================================================================

Solution: 15

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   28 |   0   1   8  12 |    2   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _   _
 3 |   39 |   0   2 -12  11 |    _   _   _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24   _   _
 4 |  115 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17   _   _   _   _  19   _   _   _   _   _   _   _  23   _  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   _   _   _   _   _   _   9  10   _   _   _  11   _   _  12   _   _   _   _
   _   _   _   _   _   5   _   6   _   7   8   _   _   _   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _  15  16   _  18   _   _   _   _   _   _  20   _   _   _   _   _  24   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DE0E0EEDD000D00DE
0C0FFCF000C00FG0G0CFCC000C00CC0C

Seed (after)

CAAACDDDECEDEEDFFCFCCDDECFDCCDCF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C0000C0000000C0CC000C00CC0C
Input row #  1                              000000DDD000D00D000000DD000D00D0
Input row #  1                       0000000000000000E0E0EE000000000E
Input row #  2                                           000FF0F000000F00000F000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                   00000000000000G0G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2340422)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c091c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80350000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082058)), 12));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00014000)), 12));
}


===========================================================================

Solution: 16

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _
 3 |   17 |   0   2   2  13 |    _  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _
 4 |  109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _   _   _   _   _  21   _   _   _  23   _   _   _   _   _   _  27   _   _   _  29   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   3   _   _   4   _   _   _   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
   _   _   _   _   _   _  15  16   _   _   _   _   _  19   _   _   _   _   _   _   _   _  24   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _  20   _   _  22   _   _   _  25  26   _   _   _   _   _   _  28   _   _  30   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DG0G0DDDD000D00DD
0C0EECC000E00FC0F0CEFF000C00FC0F

Seed (after)

CAAACCDDDEEFDCFDECFFDDDDCEFDCFDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC0000000C000C000000C000C00
Input row #  1                               000000DDD000D00D0000DDDD000D00DD
Input row #  2                                     000EE00000E00000000E000000000000
Input row #  2                             0000000000000F00F000FF000000F00F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                 0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044062)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f091c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080418)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90312000)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 14));
}


===========================================================================

Solution: 17

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   21 |   0   2 -10  13 |    _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _
 4 |  107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  17  18   _   _   _  19   _   _   _   _   _   _   _  23   _  25  26   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   _   8   _  10   _   _   _  11   _   _  12  13   _   _
  15   _   _   _   _   _   _  20   _   _  22   _   _   _   _   _   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
   _   _   _   _   _   _   _   _  14   _   _  16   _   _   _   _   _   _   _   _   _  21   _   _   _   _  24   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0D0GDGD000D00DD
0F0EFCC000C00EF0E0CFCC000E00EE0E

Seed (after)

EAAACCDDDCEFDEFDDCDCCDEDFEEDEFDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              00000CC000C0000000C0CC0000000000
Input row #  1                               000000DDD000D00DD0D00D0D000D00DD
Input row #  2                            000E000000000E00E00000000E00EE0E
Input row #  2                                         0F00F000000000F0000F000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1             00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00340460)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8a591c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2012008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084012)), 10));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 18));
}


===========================================================================

Solution: 18

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   17 |   0   2   2  13 |    _  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _
 3 |   18 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _  19   _   _   _  21   _   _   _   _   _   _   _   _   _   _  27   _   _   _  29   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _   _   _   8   9  10   _   _   _  11   _   _  12  13   _   _
   _   _   _   _   _   _   _   _   _   _   _  22   _   _  24  25  26   _   _   _   _   _   _  28   _   _  30   _   _   _   _
   _   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _  20   _   _   _   _  23   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0G0GDDD000D00DD
0C0FFCC000C00FC0E0FEEE000C00EC0E

Seed (after)

CAAACCDDDCFFDCEDDEEEFDDDCFEDCEDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000C000C0000000000C000C00
Input row #  1                               000000DDD000D00DD0000DDD000D00DD
Input row #  2                             0000000000000000E00EEE000000E00E
Input row #  2                                      000FF00000000F0000F0000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004462)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8e191c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90390000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042018)), 7));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 19

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   18 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _
 3 |   25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _  19   _   _  20  21   _  22   _   _   _  25   _   _   _   _  27   _   _  28   _   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   _   _   _   _   5   _   6   _   7   8   9  10   _   _   _   _   _   _  12  13   _   _
   _   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24   _  26   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   3   _   _   4   _   _   _   _   _   _   _   _   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000F00FD0D0DDDD000F00DD
0C0EECC000C00CC0C0EECE000C00CG0G

Seed (after)

CAAACCDDDCEECCFCDFDCDDDDCEECEFDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000C00CC0C000C0000C00C000
Input row #  1                               000000DDD0000000D0D0DDDD000000DD
Input row #  2                                      000EE0000000000000EE0E0000000000
Input row #  1                                 000000000000F00F00000000000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12116462)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0f501c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0018)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08009000)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 20

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  15 |   14  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   18 |   0   2  -7  13 |    _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _   _
 3 |   25 |   0   1  -2  12 |    _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  17  18   _   _   _  19   _   _  20  21   _   _   _  23   _  25   _   _   _   _  27   _   _  28   _   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   _   _   _   4   5   _   6   _   7   8   9   _   _   _   _   _   _   _  12  13   _   _
   _   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _   _   _   _  22   _   _  24   _  26   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   3   _   _   _   _   _   _   _   _   _   _  10   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000F00DD0D0DDDF000F00DD
0C0EECC000C00CC0E0CECE000C00CG0G

Seed (after)

CAAACCDDDCEECCFDDCDCDDDECFECEFDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC000C00CC000C0C0000C00C000
Input row #  1                               000000DDD000000DD0D0DDD0000000DD
Input row #  2                                      000EE00000000000E00E0E0000000000
Input row #  1                                 000000000000F0000000000F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12146462)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc07581c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00290018)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08801000)), 2));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 21

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  15 |    _  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _
 1 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 2 |   22 |   0   1   7  12 |    1   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _
 3 |   32 |   0   1  -6  11 |    _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  16   _   _   _   _   _  19   _   _  20   _   _   _   _  23  24   _   _   _   _   _  27   _   _   _   _   _  30   _   _
   _   _   _  17  18   _   _   _   _   _   _   _  21   _  22   _   _   _  25  26   _   _   _   _   _   _  28  29   _   _   _
   1   _   3   _   _   4   5   _   6   _   _   _   _  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   0   _   2   _   _   _   _   _   _   _   _   _   _   _   7   8   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFEF000E00EE0E0FFFE000E00EE
0G0GCDD000C00CD0D0CCDD000C00DD0C

Seed (after)

EAAACEDDEECEFCFDEDCCEDDEECFFFDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               0000C00000C00C0000CC00000C00000C
Input row #  2                                00000DD0000000D0D000DD000000DD00
Input row #  1                        0000000E0000E00EE0E0000E000E00EE
Input row #  1                                     000000F0F00000000000FFF000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x820c2410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30314060)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8859080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700140)), 6));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 22

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  15 |    _  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   19 |   0   2  -8  13 |    _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  16  17   _   _   _   _  19   _   _  20   _   _   _   _   _  24   _   _   _   _   _  27   _   _  28   _   _   _   _   _
   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
  15   _   _   _   _   _   _   _  21   _   _   _   _   _  25   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _  14   _   _   _   _  18   _   _   _   _   _   _   _   _   _  22   _  23   _   _  26   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0D0DDDD000D00DD
0F0ECCF000C00CE0F0FCEF000C00CG0G

Seed (after)

EAAACCDDDFCEDCFDDEDCDDDDFCFDCFDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               0000CC0000C00C00000C00000C00C000
Input row #  1                               000000DDD000D00DD0D0DDDD000D00DD
Input row #  2                            000E0000000000E00000E00000000000
Input row #  2                                       0F0000F000000000F0F00F0000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12082430)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591c0)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00104008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00250042)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 23

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 1 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 2 |   13 |   0   2   6  13 |   18  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _
 3 |   34 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _  16  17   _   _   _   _  19   _   _   _   _   _   _   _  23  24  25  26   _   _   _  27   _   _  28   _   _   _   _
   _   1   _   _   _   _   3   _   _   4   5   _   6   _   7   8   _   _   _   _   _  11   _   _  12  13   _   _   _   _   _
  18   _   _   _  20  21   _  22   _   _   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   _   2   _   _   _   _   _   _   _   _   _   _   _   _   _   9  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFDF000D00DD0D0DDFF000D00DD
0G0GCCE000C00EE0E0CCCC000C00CE0E

Seed (after)

EAAADCCEEDECDDFDFDDCCCCEDECDDCFF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                0000CC0000C0000000CCCC000C00C000
Input row #  1                            0000000D0000D00DD0D0DD00000D00DD
Input row #  2                         000000E000000EE0E000000000000E0E
Input row #  1                                       000000F0F0000000000000FF00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x123c0430)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8359080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0016040)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00140)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 24

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2  -1  15 |    _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _   _
 1 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 2 |   13 |   0   2   6  13 |   18  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _
 3 |   34 |   0   1  -8  11 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _  16  17   _   _   _   _  19   _   _   _   _   _   _   _   _  24  25  26   _   _   _  27   _   _  28  29   _   _   _
   _   1   _   _   _   _   3   _   _   _   5   _   6   _   7   8   9   _   _   _   _  11   _   _  12  13   _   _   _   _   _
  18   _   _   _  20  21   _  22   _  23   _   _   _   _   _   _   _   _   _   _   _   _  30   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   _   2   _   _   _   _   _   _   4   _   _   _   _   _   _   _  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFDF000D00FD0D0DDDF000D00DD
0G0GCCE000C00EE0E0ECCC000C00CC0E

Seed (after)

EAAADCCEEDECEDFDFDDDCCCFDECDDCCF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                0000CC0000C00000000CCC000C00CC00
Input row #  1                            0000000D0000D000D0D0DDD0000D00DD
Input row #  2                         000000E000000EE0E0E000000000000E
Input row #  1                                       000000F0F000000F0000000F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x32380430)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8751080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80056040)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00808140)), 8));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 25

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 1 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 2 |   21 |   0   2 -10  13 |    _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _
 3 |   23 |   0   1   6  12 |    0   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _  16  17  18   _   _   _   _   _   _   _  21   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _   _
   _   1   2   _   _   _   3   _   _   4   _   _   6   _   _   8   9   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _  14   _  15   _   _   _   _   _   _  19   _   _  20   _   _  22   _  23  24   _  26   _   _
   0   _   _   _   _   _   _   5   _   _   _   7   _   _  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFDD000D00DF0D0FDDF000F00FF
0E0ECCC000E00EC0E0EECE000C00CG0G

Seed (after)

FAAADDCCCDFEDEFDCFDDEFCEFFECEECE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                 0000CCC0000000C00000C0000C00C000
Input row #  1                            0000000DD000D00D00D00DD000000000
Input row #  2                                         0E0E000000E00E00E0EE0E0000000000
Input row #  1                         000000F000000000F000F00F000F00FF

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12104070)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00649180)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002d240a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8910040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 26

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2  -2  15 |    _   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _   _
 1 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 2 |   21 |   0   2 -10  13 |    _   _   _   _   _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _
 3 |   23 |   0   1   6  12 |    0   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _  17  18   _   _   _  19   _   _   _  21   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _   _
   _   1   2   _   _   _   _   _   _   _   _   _   6   _   7   8   9  10   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _  14   _  15  16   _   _   _   _   _   _   _   _  20   _   _  22   _  23  24   _  26   _   _
   0   _   _   3   _   _   4   5   _   _   _   _   _   _   _   _   _   _  11   _   _  12  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BFDD000F00FF0D0DDDD000F00FF
0E0EECC000C00EC0E0EECE000C00CG0G

Seed (after)

FAAADDFCCFFECEEDCDDDDFCEFFECEECE
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                 00000CC000C000C00000C0000C00C000
Input row #  1                            0000000DD000000000D0DDDD00000000
Input row #  2                                         0E0EE00000000E00E0EE0E0000000000
Input row #  1                         000000F00000F00FF0000000000F00FF

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12104460)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f40180)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002d201a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8019040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 27

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 2 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  17  18   _   _   _   _   _   _  20   _   _   _   _  23   _  25  26   _   _   _  27   _   _  28   _   _
   _   0   1   _   _   _   _   _   _   _   4   5   _   _   _   7   8   9   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   3   _   _   _   _   _   6   _   _   _   _  10   _   _   _  11   _   _  12  13   _   _   _
  16   _   _  19   _   _   _  21   _  22   _   _  24   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDE000E00DD0E0DDDE000E00EE
0G0GFCC000F00CF0F0CFCC000C00CF0F

Seed (after)

FAAADDFECCFEFDDFCEDDDCECCFEFCEEC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  00000CC000000C0000C0CC000C00C000
Input row #  1                             000000DD0000000DD000DDD000000000
Input row #  1                              00000000E000E00000E0000E000E00EE
Input row #  2                           0000F00000F000F0F00F000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12342060)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007180c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8841100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0094410)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 28

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 2 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  17  18   _   _   _   _   _   _  20   _   _   _   _   _  24  25  26   _   _   _  27   _   _  28   _   _
   _   0   1   _   _   _   _   _   _   _   4   _   _   _   _   7   8   9  10   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   3   _   _   _   5   _   6   _   _   _   _   _   _   _   _  11   _   _  12  13   _   _   _
  16   _   _  19   _   _   _  21   _  22   _  23   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDE000E00DE0E0DDDD000E00EE
0G0GFCC000F00CF0F0FCCC000C00CF0F

Seed (after)

FAAADDFECCFEFDFECEDDDDCCCFEFCEEC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  00000CC000000C00000CCC000C00C000
Input row #  1                             000000DD0000000D0000DDDD00000000
Input row #  1                              00000000E000E000E0E00000000E00EE
Input row #  2                           0000F00000F000F0F0F0000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12382060)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f080c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8051100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0054410)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 29

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |    9 |   0   2  -5  14 |    _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _   _   _  18   _   _   _  19   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _   _   _   8   9  10   _   _   _  11   _   _  12  13   _   _   _
   _   _   _   _   _  15   _  17   _   _   _   _   _   _   _  20  21   _   _   _  23  24   _   _   _   _   _   _   _   _   _
  16   _   _   _   _   _   _   _   _  22   _   _   _  25  26   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0G0GDDD000D00DD
0C0EFEC000C00EE0F0EEFF000C00CF0F

Seed (after)

FAAACDDDECEDFCDDFFEEDDDEEFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0000C000C00000000000000C00C000
Input row #  1                              000000DDD000D00DD0000DDD000D00DD
Input row #  2                                    000E0E0000000EE000EE000000000000
Input row #  2                           0000F00000000000F000FF0000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12000442)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8e191c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c6028)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0310010)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 30

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |    9 |   0   2  -5  14 |    _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _   _   _  18   _   _   _  19   _   _   _  21   _   _   _   _   _   _  26   _   _   _  27   _   _  28   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   _   _   _   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
   _   _   _   _   _  15   _  17   _   _   _   _   _   _   _  20   _   _   _   _  23   _   _   _   _   _   _   _   _   _   _
  16   _   _   _   _   _   _   _   _  22   _   _  24  25   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DG0G0DDDD000D00DD
0C0EFEC000C00EC0F0EFFC000C00CF0F

Seed (after)

FAAACDDDECEDFCDFFCEDDDDECFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0000C000C000C000000C000C00C000
Input row #  1                              000000DDD000D00D0000DDDD000D00DD
Input row #  2                                    000E0E0000000E0000E0000000000000
Input row #  2                           0000F00000000000F00FF00000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                 0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12204442)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f091c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042028)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0190010)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 14));
}


===========================================================================

Solution: 31

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _
 3 |   47 |   0   2  13   9 |   20   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  10
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _   _  17   _   _   _   _  19   _   _   _   _   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   _   9   _   _   _   _  11   _   _  12  13   _   _   _
   _   _   _   _   _   _  15  16   _  18   _   _   _   _   _   _   _  21   _  22   _  23  24   _  26   _   _   _   _   _   _
  20   _   _   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  10
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0D0DGDG000D00DD
0C0EECE000C00FE0E0EECE000C00CF0F

Seed (after)

FAAACDDDCEEDECDDFDFDEDECEEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C000C0000C000000000C0000C00C000
Input row #  1                              000000DDD000D00DD0D0D0D0000D00DD
Input row #  2                                     000EE0E0000000E0E0EE0E0000000000
Input row #  2                  0000000000000F000000000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1            000000000000000000000G0G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12100422)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc85591c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002d4058)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0002000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a00000)), 19));
}


===========================================================================

Solution: 32

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _
 3 |   47 |   0   2  13   9 |   20   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _   _  17   _   _   _   _  19   _   _   _  21   _  22   _   _   _  25   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   5   _   _   _   _   8   9  10   _   _   _  11   _   _  12  13   _   _   _
   _   _   _   _   _   _  15  16   _  18   _   _   _   _   _   _   _   _   _   _   _  23  24   _  26   _   _   _   _   _   _
  20   _   _   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0G0GDDD000D00DD
0C0EECE000C00FC0C0EECE000C00CF0F

Seed (after)

FAAACDDDCEEDECDDFCFCDDDCEEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C000C0000C000C0C000C0000C00C000
Input row #  1                              000000DDD000D00DD0000DDD000D00DD
Input row #  2                                     000EE0E00000000000EE0E0000000000
Input row #  2                  0000000000000F000000000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12114422)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8e191c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0058)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0002000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 33

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   10 |   0   2  -6  14 |    _   _   _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _
 3 |   47 |   0   2  13   9 |   20   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  115 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _   _  17   _   _   _   _  19   _   _   _   _   _   _   _   _   _  25   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
   _   _   _   _   _   _  15  16   _  18   _   _   _   _   _   _   _   _   _   _   _  23  24   _  26   _   _   _   _   _   _
  20   _   _   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21  22
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDD000D00DD0D0DDDD000D00DD
0C0EECE000C00FG0G0EECE000C00CF0F

Seed (after)

FAAACDDDCEEDECDDFDFDDDDCEEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C000C0000C000000000C0000C00C000
Input row #  1                              000000DDD000D00DD0D0DDDD000D00DD
Input row #  2                                     000EE0E00000000000EE0E0000000000
Input row #  2                  0000000000000F000000000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                   00000000000000G0G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12100422)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0058)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0002000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00014000)), 12));
}


===========================================================================

Solution: 34

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  17  18   _   _   _   _   _   _  20   _   _  22   _   _  24  25  26   _   _   _  27   _   _  28   _   _
   _   _   0   _   2   _   _   _   3   _   _   _   _   _   _   _   _   _   9   _   _   _   _  11   _   _  12  13   _   _   _
   _   1   _   _   _   _   _   _   _   4   5   _   6   _   7   8   _  10   _   _   _   _   _   _   _   _   _   _   _   _   _
  16   _   _  19   _   _   _  21   _   _   _  23   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDED000D00EE0E0EEDE000D00DD
0G0GFCC000F00CF0C0FCCC000C00CF0F

Seed (after)

FAAAEDFDCCFDEEFECEECEDCCCFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  00000CC000000C00C00CCC000C00C000
Input row #  1                              000000D0D000D000000000D0000D00DD
Input row #  1                            0000000E0000000EE0E0EE0E00000000
Input row #  2                           0000F00000F000F000F0000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12392060)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8401140)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b58080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0044410)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 35

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   11 |   0   1   3  13 |    _   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _   _
 3 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 4 |  118 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  17  18   _   _   _   _   _   _  20   _   _   _   _  23  24  25  26   _   _   _  27   _   _  28   _   _
   _   _   0   _   2   _   _   _   3   _   _   4   _   _   _   _   _   _   _   _   _   _   _  11   _   _  12  13   _   _   _
   _   1   _   _   _   _   _   _   _   _   5   _   6   _   7   8   9  10   _   _   _   _   _   _   _   _   _   _   _   _   _
  16   _   _  19   _   _   _  21   _  22   _   _   _   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDED000D00DE0E0EEEE000D00DD
0G0GFCC000F00CF0F0CCCC000C00CF0F

Seed (after)

FAAAEDFDCCFDFEDECEEEECCCCFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  00000CC000000C0000CCCC000C00C000
Input row #  1                              000000D0D000D00D00000000000D00DD
Input row #  1                            0000000E00000000E0E0EEEE00000000
Input row #  2                           0000F00000F000F0F000000000000F0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2                                0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x123c2060)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8009140)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f50080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0014410)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 36

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _  17  18   _   _   _  19   _   _  20  21   _   _   _   _   _  25  26   _   _   _  27   _   _  28   _   _
   _   _   0   _   2   _   _   _   3   _   _   _   _   _   _   _   _   8   _  10   _   _   _  11   _   _  12  13   _   _   _
  16   _   _   _   _   _   _   _   _  22   _  23  24   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   4   5   _   6   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDFD000D00FF0F0GDGD000D00DD
0C0CECC000C00CC0E0EECC000C00CE0E

Seed (after)

EAAACDCDCCFDECEECCFFDFDCCEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C0CC000C00CC00000CC000C00C000
Input row #  1                              000000D0D000D00000000D0D000D00DD
Input row #  2                           0000E00000000000E0EE000000000E0E
Input row #  1                                  0000000F0000000FF0F0000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1             00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x1230646a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8a01140)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa00d0010)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00058080)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 18));
}


===========================================================================

Solution: 37

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _  17  18   _   _   _  19   _   _  20  21   _   _   _   _   _  25  26   _   _   _  27   _   _  28   _   _
   _   _   0   _   2   _   _   _   3   _   _   _   _   _   _   _   _   8   9  10   _   _   _  11   _   _  12  13   _   _   _
  16   _   _   _   _   _   _   _   _  22   _  23  24   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   4   5   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDFD000D00FF0G0GDDD000D00DD
0C0CECC000C00CC0E0EECC000C00CE0E

Seed (after)

EAAACDCDCCFDECEECCFFDDDCCEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C0CC000C00CC00000CC000C00C000
Input row #  1                              000000D0D000D00000000DDD000D00DD
Input row #  2                           0000E00000000000E0EE000000000E0E
Input row #  1                                  0000000F0000000FF000000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x1230646a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8e01140)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa00d0010)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018080)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 38

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   15 |   0   2   4  13 |   16   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _   _
 3 |   26 |   0   1  -3  12 |    _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _   _
 4 |  109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _  17  18   _   _   _  19   _   _  20  21   _   _   _   _   _  25  26   _   _   _  27   _   _  28   _   _
   _   _   0   _   2   _   _   _   3   _   _   _   _   _   _   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
  16   _   _   _   _   _   _   _   _  22   _  23  24   _   _   _   _   _   _   _   _   _  29   _  30   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   4   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDFD000D00FG0G0DDDD000D00DD
0C0CECC000C00CC0E0EECC000C00CE0E

Seed (after)

EAAACDCDCCFDECEECCFDDDDCCEDECDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C0CC000C00CC00000CC000C00C000
Input row #  1                              000000D0D000D0000000DDDD000D00DD
Input row #  2                           0000E00000000000E0EE000000000E0E
Input row #  1                                  0000000F0000000F0000000000000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                 0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x1230646a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f01140)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa00d0010)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008080)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 14));
}


===========================================================================

Solution: 39

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _  16  17  18   _   _   _  19   _   _   _  21   _  22   _   _   _  25   _   _   _   _   _   _   _   _   _   _
   _   _   0   1   _   _   _   _   3   _   _   4   _   _   _   _   _   8   9   _   _   _   _   _   _   _  12  13   _   _   _
  15   _   _   _   _   _   _  20   _   _   _   _  23  24   _  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _   _   _   _   _   _   7   _   _  10   _   _   _  11   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDF000D00DG0G0FDDF000F00DD
0C0ECCC000C00EC0C0EECE000E00EE0E

Seed (after)

EAAACDDCCCEDFCDEECECDDECFEEFEDDF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C00CCC000C000C0C000C00000000000
Input row #  1                              000000DD0000D00D00000DD0000000DD
Input row #  2                            000E000000000E0000EE0E000E00EE0E
Input row #  1                                   00000000F00000000000F00F000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1                 0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00114472)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc06090c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb22c2008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08900100)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 14));
}


===========================================================================

Solution: 40

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _  16  17  18   _   _   _  19   _   _   _  21   _  22   _  23   _  25   _   _   _   _  27   _   _   _   _   _
   _   _   0   1   _   _   _   _   3   _   _   4   5   _   _   _   _   8   _   _   _   _   _   _   _   _  12  13   _   _   _
  15   _   _   _   _   _   _  20   _   _   _   _   _  24   _  26   _   _   _   _   _   _  28   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _   _   _   _   6   _   7   _   9  10   _   _   _  11   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDF000D00DD0F0FDFF000F00DD
0C0ECCC000C00EC0C0CECE000C00EG0G

Seed (after)

EAAACDDCCCEDFCDDECECDCFCFEFFCDDF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C00CCC000C000C0C0C0C0000C000000
Input row #  1                              000000DD0000D00DD0000D00000000DD
Input row #  2                            000E000000000E00000E0E000000E000
Input row #  1                                   00000000F000000000F0F0FF000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02154472)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc02190c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10282008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08d40100)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 41

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _  16  17  18   _   _   _  19   _   _   _  21   _  22   _   _   _  25   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   _   _   _   _   3   _   _   4   _   _   _   _   _   _   9   _   _   _   _  11   _   _  12  13   _   _   _
  15   _   _   _   _   _   _  20   _   _   _   _  23  24   _  26   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _   _   5   _   6   _   7   8   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDF000D00DF0F0FFDF000D00DD
0C0ECCC000C00EC0C0EECE000C00CG0G

Seed (after)

EAAACDDCCCEDFCDEECECFDFCFFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C00CCC000C000C0C000C0000C00C000
Input row #  1                              000000DD0000D00D000000D0000D00DD
Input row #  2                            000E000000000E0000EE0E0000000000
Input row #  1                                   00000000F0000000F0F0FF0F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12114472)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc84090c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c2008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b50100)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 42

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _  16  17  18   _   _   _  19   _   _   _   _   _  22   _  23  24  25   _   _   _   _  27   _   _   _   _   _
   _   _   0   1   _   _   _   _   _   _   _   4   5   _   6   _   _   8   _   _   _   _   _   _   _   _  12  13   _   _   _
  15   _   _   _   _   _   _  20  21   _   _   _   _   _   _  26   _   _   _   _   _   _  28   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   3   _   _   _   _   _   _   _   7   _   9  10   _   _   _  11   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDF000F00DD0D0FDFF000F00DD
0C0ECCC000C00EE0C0CCCE000C00EG0G

Seed (after)

EAAACDDCCCEEFCDDFDECDCCCFEFFCDDF
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C00CCC000C00000C0CCC0000C000000
Input row #  1                              000000DD0000000DD0D00D00000000DD
Input row #  2                            000E000000000EE000000E000000E000
Input row #  1                                   00000000F000F0000000F0FF000F0000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x021d0472)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc02580c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10206008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08d01100)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 43

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28   _   _
 1 |    6 |   0   1   1  14 |    _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _
 2 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 3 |   27 |   0   1  -4  12 |    _   _   _   _   _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _
 4 |  111 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _   _  16  17  18   _   _   _  19   _   _   _   _   _  22   _   _  24  25   _   _   _   _  27   _   _  28   _   _
   _   _   0   1   _   _   _   _   _   _   _   4   _   _   6   _   _   _   9   _   _   _   _  11   _   _  12  13   _   _   _
  15   _   _   _   _   _   _  20  21   _   _   _  23   _   _  26   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   3   _   _   _   5   _   _   _   7   8   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BDDF000F00DF0D0FFDF000D00DD
0C0ECCC000C00EE0C0ECCE000C00CG0G

Seed (after)

EAAACDDCCCEEFCDEFDECFDCCFFDFCDDC
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C00CCC000C00000C00CC0000C00C000
Input row #  1                              000000DD0000000D00D000D0000D00DD
Input row #  2                            000E000000000EE000E00E0000000000
Input row #  1                                   00000000F000F000F000FF0F00000000

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  2    00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12190472)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc84480c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00246008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b11100)), 4));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
}


===========================================================================

Solution: 44

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |    8 |   0   2  -4  14 |    _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _   _
 3 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   0   _   2   _   _   _   _   _   _   4   _   _   _   _   _   8   _  10   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   3   _   _   _   5   _   _   _   _   _   9   _   _   _   _  11   _   _  12  13   _   _
   _   _  14   _   _  16  17  18   _   _   _  19   _   _  20   _   _  22   _   _  24  25   _   _   _   _  27   _   _   _   _
  15   _   _   _   _   _   _   _  21   _   _   _  23   _   _  26   _   _   _   _   _   _  28  29   _  30   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BCDC000D00CD0G0GCDC000D00DD
0E0FEEE000E00EF0E0FEEF000E00FF0F

Seed (after)

FAAACECDEEEFDCEFDEFCECDEEFFDFEDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  1                             000000C0C000000C00000C0C00000000
Input row #  1                               0000000D0000D000D00000D0000D00DD
Input row #  2                                   0E00EEE000E00E00E00EE0000E000000
Input row #  2                            000F0000000000F000F00F000000FF0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08140)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8411080)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02192472)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0244008)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}


===========================================================================

Solution: 45

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    5 |   0   1   2  14 |    _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _   _   _
 1 |    7 |   0   1   0  14 |    _   _   _   0   1   2   _   _   _   3   _   _   4   5   _   6   _   7   8   9  10   _   _   _  11   _   _  12  13   _   _
 2 |    8 |   0   2  -4  14 |    _   _  14   _  15  16  17  18   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _   _   _
 3 |   16 |   0   2   3  13 |   15   _   _   _  19   _   _  20  21   _  22   _  23  24  25  26   _   _   _  27   _   _  28  29   _  30   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   0   _   2   _   _   _   _   _   _   _   _   _   _   _   _   8   9  10   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   3   _   _   4   5   _   _   _   _   _   _   _   _   _   _  11   _   _  12  13   _   _
   _   _  14   _   _  16  17  18   _   _   _  19   _   _  20   _   _   _   _  23  24  25   _   _   _   _  27   _   _   _   _
  15   _   _   _   _   _   _   _  21   _  22   _   _   _   _  26   _   _   _   _   _   _  28  29   _  30   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
BB0B0BCDC000D00DD0G0GCCC000D00DD
0E0FEEE000E00EF0F0EEEF000E00FF0F

Seed (after)

FAAACECDEEEFDFEDDEFCCCEEEFFDFEDD
BBGBGB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  1                             000000C0C000000000000CCC00000000
Input row #  1                               0000000D0000D00DD0000000000D00DD
Input row #  2                                   0E00EEE000E00E0000EEE0000E000000
Input row #  2                            000F0000000000F0F0000F000000FF0F

Output row #1
Input row #  1                               BB0B0B00000000000000000000000000
Input row #  1               000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e00140)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8019080)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x021c2472)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0214008)), 3));
	vmOut[1] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002b));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 16));
}

