Original seed
11010111100010011010111100010011010111100010011010111100010011010111

11010111100010011010111100010011
01011110001001101011110001001101
0111

Length (original seed): 68

Weight: 38

Total number of rows: 3

Number of rows: 3

Indices of rows (new: original):
0: 2
1: 1
2: 0

01110000000000000000000000000000
01011110001001101011110001001101
11010111100010011010111100010011

Number of variables (gaps/ones): 31

Positions of gaps:
1: 0
2: 4
3: 5
4: 6
5: 7
6: 8
7: 9
8: 10
9: 11
10: 12
11: 13
12: 14
13: 15
14: 16
15: 17
16: 18
17: 19
18: 20
19: 21
20: 22
21: 23
22: 24
23: 25
24: 26
25: 27
26: 28
27: 29
28: 30
29: 31
30: 32
31: 34

Positions of ones:
1: 38
2: 42
3: 45
4: 46
5: 48
6: 50
7: 51
8: 52
9: 53
10: 57
11: 60
12: 61
13: 63
14: 64
15: 65
16: 67
17: 69
18: 70
19: 71
20: 72
21: 76
22: 79
23: 80
24: 82
25: 84
26: 85
27: 86
28: 87
29: 91
30: 94
31: 95

Original matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30	One                            	Gap                            
-----------------------------------------------------------------------------------------------------------------------------------------------------
   0 |   0   1  31   1 |   12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	1000000000000000000000000000000
   1 |   0   1  29   1 |   11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000010000000000000000000	1000000000000000000000000000000
   2 |   0   1  28   1 |   10   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000100000000000000000000	1000000000000000000000000000000
   3 |   0   1  27   1 |    _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	0100000000000000000000000000000
   4 |   0   1  26   1 |    _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	0010000000000000000000000000000
   5 |   0   1  25   3 |    9  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000001011000000000000000000	1101000000000000000000000000000
   6 |   0   1  24   3 |    _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0110100000000000000000000000000
   7 |   0   1  23   3 |    _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0011010000000000000000000000000
   8 |   0   1  22   3 |    _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0001101000000000000000000000000
   9 |   0   1  21   5 |    8   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111000000000000000000	1100110100000000000000000000000
  10 |   0   1  20   5 |    7   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000101111000000000000000000	1010011010000000000000000000000
  11 |   0   1  19   5 |    6   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001001111000000000000000000	1001001101000000000000000000000
  12 |   0   1  18   5 |    5   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000010001111000000000000000000	1000100110100000000000000000000
  13 |   0   1  17   5 |    _   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111000000000000000000	0100010011010000000000000000000
  14 |   0   1  16   7 |    4   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000100111111000000000000000000	1110001001101000000000000000000
  15 |   0   1  15   7 |    _   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111000000000000000000	0111000100110100000000000000000
  16 |   0   1  14   9 |    3   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0001011111111000000000000000000	1111100010011010000000000000000
  17 |   0   1  13   9 |    2   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0010011111111000000000000000000	1011110001001101000000000000000
  18 |   0   1  12   9 |    _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111000000000000000000	0101111000100110100000000000000
  19 |   0   1  11   9 |    _   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111000000000000000000	0010111100010011010000000000000
  20 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _	0101111111111000000000000000000	1101011110001001101000000000000
  21 |   0   1   9  11 |    _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0110101111000100110100000000000
  22 |   0   1   8  11 |    _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0011010111100010011010000000000
  23 |   0   1   7  11 |    _   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0001101011110001001101000000000
  24 |   0   1   6  13 |    0   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _	1111111111111000000000000000000	1100110101111000100110100000000
  25 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _	0111111111111000000000000000000	0010011010111100010011010000000
  26 |   0   1   4  12 |    _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _	0111111111111000000000000000000	0001001101011110001001101000000
  27 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _	0111111111111000000000000000000	0000100110101111000100110100000
  28 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _	1111111111111000000000000000000	0100010011010111100010011010000
  29 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _	1111111111111000000000000000000	0010001001101011110001001101000
  30 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _	1111111111111000000000000000000	0001000100110101111000100110100
  31 |   0   1  -1  12 |    _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _   _	1111111111110000000000000000000	0000100010011010111100010011000
  32 |   0   1  -2  12 |    _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _	1111111111110000000000000000000	0000010001001101011110001001100
  33 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _	1111111111100000000000000000000	0000001000100110101111000100100
  34 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _	1111111111000000000000000000000	0000000100010011010111100010000
  35 |   0   1  -5  10 |    _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _	1111111111000000000000000000000	0000000010001001101011110001000
  36 |   0   1  -6  10 |    _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _	1111111111000000000000000000000	0000000001000100110101111000100
  37 |   0   1  -7   9 |    _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _   _	1111111110000000000000000000000	0000000000100010011010111100000
  38 |   0   1  -8   9 |    _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _	1111111110000000000000000000000	0000000000010001001101011110000
  39 |   0   1  -9   9 |    _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _	1111111110000000000000000000000	0000000000001000100110101111000
  40 |   0   1 -10   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _	1111111110000000000000000000000	0000000000000100010011010111100
  41 |   0   1 -11   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   _   _	1111111100000000000000000000000	0000000000000010001001101011100
  42 |   0   1 -12   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   _   _	1111111000000000000000000000000	0000000000000001000100110101100
  43 |   0   1 -13   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   _   _	1111110000000000000000000000000	0000000000000000100010011010100
  44 |   0   1 -14   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _   _	1111100000000000000000000000000	0000000000000000010001001101000
  45 |   0   1 -15   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _	1111100000000000000000000000000	0000000000000000001000100110100
  46 |   0   1 -16   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _   _	1111000000000000000000000000000	0000000000000000000100010011000
  47 |   0   1 -17   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _	1111000000000000000000000000000	0000000000000000000010001001100
  48 |   0   1 -18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _	1110000000000000000000000000000	0000000000000000000001000100100
  49 |   0   1 -19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   _   _	1100000000000000000000000000000	0000000000000000000000100010000
  50 |   0   1 -20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   _	1100000000000000000000000000000	0000000000000000000000010001000
  51 |   0   1 -21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _	1100000000000000000000000000000	0000000000000000000000001000100
  52 |   0   1 -22   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _   _	1000000000000000000000000000000	0000000000000000000000000100000
  53 |   0   1 -23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _	1000000000000000000000000000000	0000000000000000000000000010000
  54 |   0   1 -24   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	1000000000000000000000000000000	0000000000000000000000000001000
  55 |   0   1 -25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _	1000000000000000000000000000000	0000000000000000000000000000100
  56 |   0   2  31   1 |   30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	1000000000000000000000000000000
  57 |   0   2  30   1 |   29   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000010	1000000000000000000000000000000
  58 |   0   2  27   2 |   28  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000101	1100000000000000000000000000000
  59 |   0   2  26   2 |    _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0110000000000000000000000000000
  60 |   0   2  25   2 |    _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0011000000000000000000000000000
  61 |   0   2  24   2 |    _   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0001100000000000000000000000000
  62 |   0   2  23   4 |   27  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001111	1100110000000000000000000000000
  63 |   0   2  22   4 |   26   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000010111	1010011000000000000000000000000
  64 |   0   2  21   4 |   25   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000100111	1001001100000000000000000000000
  65 |   0   2  20   4 |   24   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001000111	1000100110000000000000000000000
  66 |   0   2  19   4 |    _  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001111	0100010011000000000000000000000
  67 |   0   2  18   6 |   23  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000010011111	1110001001100000000000000000000
  68 |   0   2  17   6 |    _  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000111111	0111000100110000000000000000000
  69 |   0   2  16   8 |   22  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000101111111	1111100010011000000000000000000
  70 |   0   2  15   8 |   21   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001001111111	1011110001001100000000000000000
  71 |   0   2  14   8 |    _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000011111111	0101111000100110000000000000000
  72 |   0   2  13   8 |    _   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000011111111	0010111100010011000000000000000
  73 |   0   2  12  10 |   20  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000010111111111	1101011110001001100000000000000
  74 |   0   2  11  10 |    _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0110101111000100110000000000000
  75 |   0   2  10  10 |    _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0011010111100010011000000000000
  76 |   0   2   9  10 |    _   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0001101011110001001100000000000
  77 |   0   2   8  12 |   19  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _	0000000000000000000111111111111	1100110101111000100110000000000
  78 |   0   2   7  12 |   18   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _	0000000000000000001011111111111	1010011010111100010011000000000
  79 |   0   2   6  12 |   17   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _	0000000000000000010011111111111	1001001101011110001001100000000
  80 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _	0000000000000000100011111111111	1000100110101111000100110000000
  81 |   0   2   4  12 |    _  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _	0000000000000000000111111111111	0100010011010111100010011000000
  82 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _	0000000000000001001111111111111	1110001001101011110001001100000
  83 |   0   2   2  14 |    _  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _	0000000000000000011111111111111	0111000100110101111000100110000
  84 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _	0000000000000010111111111111111	1111100010011010111100010011000
  85 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _	0000000000000100111111111111111	1011110001001101011110001001100
  86 |   0   2  -1  15 |    _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29   _   _	0000000000000001111111111111110	0101111000100110101111000100100
  87 |   0   2  -2  14 |    _   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _   _	0000000000000001111111111111100	0010111100010011010111100010000
  88 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _	0000000000000011111111111111100	0101011110001001101011110001000
  89 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _	0000000000000111111111111111100	0110101111000100110101111000100
  90 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _	0000000000000111111111111111000	0011010111100010011010111100000
  91 |   0   2  -6  15 |    _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _	0000000000000111111111111111000	0001101011110001001101011110000
  92 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _	0000000000000111111111111111000	0000110101111000100110101111000
  93 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _	0000000000000111111111111111000	0000011010111100010011010111100
  94 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _	0000000000000111111111111110000	0000001101011110001001101011100
  95 |   0   2 -10  13 |    _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25   _   _	0000000000000111111111111100000	0000000110101111000100110101100
  96 |   0   2 -11  12 |    _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24   _   _	0000000000000111111111111000000	0000000011010111100010011010100
  97 |   0   2 -12  11 |    _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _   _   _	0000000000000111111111110000000	0000000001101011110001001101000
  98 |   0   2 -13  11 |    _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _   _	0000000000000111111111110000000	0000000000110101111000100110100
  99 |   0   2 -14  10 |    _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _   _   _	0000000000000111111111100000000	0000000000011010111100010011000
 100 |   0   2 -15  10 |    _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _   _	0000000000000111111111100000000	0000000000001101011110001001100
 101 |   0   2 -16   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21   _   _	0000000000000111111111000000000	0000000000000110101111000100100
 102 |   0   2 -17   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _   _   _	0000000000000111111110000000000	0000000000000011010111100010000
 103 |   0   2 -18   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _   _	0000000000000111111110000000000	0000000000000001101011110001000
 104 |   0   2 -19   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _	0000000000000111111110000000000	0000000000000000110101111000100
 105 |   0   2 -20   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _   _   _	0000000000000111111100000000000	0000000000000000011010111100000
 106 |   0   2 -21   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _   _	0000000000000111111100000000000	0000000000000000001101011110000
 107 |   0   2 -22   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _	0000000000000111111100000000000	0000000000000000000110101111000
 108 |   0   2 -23   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _	0000000000000111111100000000000	0000000000000000000011010111100
 109 |   0   2 -24   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18   _   _	0000000000000111111000000000000	0000000000000000000001101011100
 110 |   0   2 -25   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17   _   _	0000000000000111110000000000000	0000000000000000000000110101100
 111 |   0   2 -26   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16   _   _	0000000000000111100000000000000	0000000000000000000000011010100
 112 |   0   2 -27   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _   _   _	0000000000000111000000000000000	0000000000000000000000001101000
 113 |   0   2 -28   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _   _	0000000000000111000000000000000	0000000000000000000000000110100
 114 |   0   2 -29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _   _   _	0000000000000110000000000000000	0000000000000000000000000011000
 115 |   0   2 -30   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _   _	0000000000000110000000000000000	0000000000000000000000000001100
 116 |   0   2 -31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _   _	0000000000000100000000000000000	0000000000000000000000000000100
 117 |   1   1  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	0000000000001000000000000000000	0000000000000000000000000000010
 118 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12	0000000000011000000000000000000	0000000000000000000000000000011
 119 |   1   1  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	0000000000100000000000000000000	0000000000000000000000000000010
 120 |   1   1  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11	0000000000010000000000000000000	0000000000000000000000000000001
 121 |   1   1  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10	0000000000100000000000000000000	0000000000000000000000000000001
 122 |   1   1  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _	0000000001000000000000000000000	0000000000000000000000000000010
 123 |   1   1  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9	0000000001000000000000000000000	0000000000000000000000000000001
 124 |   1   1  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _	0000000010000000000000000000000	0000000000000000000000000000010
 125 |   1   1  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _	0000000100000000000000000000000	0000000000000000000000000000010
 126 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8	0000001010000000000000000000000	0000000000000000000000000000011
 127 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7	0000010100000000000000000000000	0000000000000000000000000000011
 128 |   1   1  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6	0000001000000000000000000000000	0000000000000000000000000000001
 129 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5	0000110000000000000000000000000	0000000000000000000000000000011
 130 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4	0001100000000000000000000000000	0000000000000000000000000000011
 131 |   1   1  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	0010000000000000000000000000000	0000000000000000000000000000010
 132 |   1   1  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3	0001000000000000000000000000000	0000000000000000000000000000001
 133 |   1   1  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2	0010000000000000000000000000000	0000000000000000000000000000001
 134 |   1   1  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	0100000000000000000000000000000	0000000000000000000000000000010
 135 |   1   1   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	0100000000000000000000000000000	0000000000000000000000000000001
 136 |   1   1   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _	1000000000000000000000000000000	0000000000000000000000000000010
 137 |   1   1   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	1000000000000000000000000000000	0000000000000000000000000000001
 138 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30   _	0000000000000000000000000000001	0000000000000000000000000000010
 139 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29   _	0000000000000000000000000000010	0000000000000000000000000000010
 140 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30	0000000000000000000000000000001	0000000000000000000000000000001
 141 |   1   2  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29	0000000000000000000000000000010	0000000000000000000000000000001
 142 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _	0000000000000000000000000000100	0000000000000000000000000000010
 143 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28	0000000000000000000000000000100	0000000000000000000000000000001
 144 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27   _	0000000000000000000000000001000	0000000000000000000000000000010
 145 |   1   2  22   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  26   _	0000000000000000000000000010000	0000000000000000000000000000010
 146 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25  27	0000000000000000000000000101000	0000000000000000000000000000011
 147 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26	0000000000000000000000001010000	0000000000000000000000000000011
 148 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25	0000000000000000000000000100000	0000000000000000000000000000001
 149 |   1   2  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24	0000000000000000000000011000000	0000000000000000000000000000011
 150 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23	0000000000000000000000110000000	0000000000000000000000000000011
 151 |   1   2  15   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21   _	0000000000000000000001000000000	0000000000000000000000000000010
 152 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22	0000000000000000000000100000000	0000000000000000000000000000001
 153 |   1   2  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21	0000000000000000000001000000000	0000000000000000000000000000001
 154 |   1   2  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20   _	0000000000000000000010000000000	0000000000000000000000000000010
 155 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20	0000000000000000000010000000000	0000000000000000000000000000001
 156 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19   _	0000000000000000000100000000000	0000000000000000000000000000010
 157 |   1   2   7   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  18   _	0000000000000000001000000000000	0000000000000000000000000000010
 158 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19	0000000000000000010100000000000	0000000000000000000000000000011
 159 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18	0000000000000000101000000000000	0000000000000000000000000000011
 160 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17	0000000000000000010000000000000	0000000000000000000000000000001
 161 |   1   2   3   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16	0000000000000001100000000000000	0000000000000000000000000000011
 162 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	0000000000000011000000000000000	0000000000000000000000000000011
 163 |   1   2   0   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _	0000000000000100000000000000000	0000000000000000000000000000010
 164 |   1   2  -1   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	0000000000000010000000000000000	0000000000000000000000000000001
 165 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13	0000000000000100000000000000000	0000000000000000000000000000001
-----------------------------------------------------------------------------------------------------------------------------------------------------
Sorted matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30	One                            	Gap                            
-----------------------------------------------------------------------------------------------------------------------------------------------------
   0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _	0000000000000010111111111111111	1111100010011010111100010011000
   1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _	0000000000000100111111111111111	1011110001001101011110001001100
   2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _	0000000000000111111111111111100	0110101111000100110101111000100
   3 |   0   2  -1  15 |    _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29   _   _	0000000000000001111111111111110	0101111000100110101111000100100
   4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _	0000000000000011111111111111100	0101011110001001101011110001000
   5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _	0000000000000111111111111111000	0011010111100010011010111100000
   6 |   0   2  -6  15 |    _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _	0000000000000111111111111111000	0001101011110001001101011110000
   7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _	0000000000000111111111111111000	0000110101111000100110101111000
   8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _	0000000000000111111111111111000	0000011010111100010011010111100
   9 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _	0000000000000001001111111111111	1110001001101011110001001100000
  10 |   0   2   2  14 |    _  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _	0000000000000000011111111111111	0111000100110101111000100110000
  11 |   0   2  -2  14 |    _   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _   _	0000000000000001111111111111100	0010111100010011010111100010000
  12 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _	0000000000000111111111111110000	0000001101011110001001101011100
  13 |   0   1   6  13 |    0   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _	1111111111111000000000000000000	1100110101111000100110100000000
  14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _	1111111111111000000000000000000	0100010011010111100010011010000
  15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _	1111111111111000000000000000000	0010001001101011110001001101000
  16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _	1111111111111000000000000000000	0001000100110101111000100110100
  17 |   0   2 -10  13 |    _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25   _   _	0000000000000111111111111100000	0000000110101111000100110101100
  18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _	0111111111111000000000000000000	0010011010111100010011010000000
  19 |   0   1   4  12 |    _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _	0111111111111000000000000000000	0001001101011110001001101000000
  20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _	0111111111111000000000000000000	0000100110101111000100110100000
  21 |   0   1  -1  12 |    _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _   _	1111111111110000000000000000000	0000100010011010111100010011000
  22 |   0   1  -2  12 |    _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _	1111111111110000000000000000000	0000010001001101011110001001100
  23 |   0   2   8  12 |   19  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _	0000000000000000000111111111111	1100110101111000100110000000000
  24 |   0   2   7  12 |   18   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _	0000000000000000001011111111111	1010011010111100010011000000000
  25 |   0   2   6  12 |   17   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _	0000000000000000010011111111111	1001001101011110001001100000000
  26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _	0000000000000000100011111111111	1000100110101111000100110000000
  27 |   0   2   4  12 |    _  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _	0000000000000000000111111111111	0100010011010111100010011000000
  28 |   0   2 -11  12 |    _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24   _   _	0000000000000111111111111000000	0000000011010111100010011010100
  29 |   0   1   9  11 |    _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0110101111000100110100000000000
  30 |   0   1   8  11 |    _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0011010111100010011010000000000
  31 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _	1111111111100000000000000000000	0000001000100110101111000100100
  32 |   0   1   7  11 |    _   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _	0011111111111000000000000000000	0001101011110001001101000000000
  33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _	0101111111111000000000000000000	1101011110001001101000000000000
  34 |   0   2 -12  11 |    _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _   _   _	0000000000000111111111110000000	0000000001101011110001001101000
  35 |   0   2 -13  11 |    _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _   _	0000000000000111111111110000000	0000000000110101111000100110100
  36 |   0   1  -6  10 |    _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _	1111111111000000000000000000000	0000000001000100110101111000100
  37 |   0   2  12  10 |   20  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000010111111111	1101011110001001100000000000000
  38 |   0   2  11  10 |    _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0110101111000100110000000000000
  39 |   0   2  10  10 |    _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0011010111100010011000000000000
  40 |   0   2   9  10 |    _   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001111111111	0001101011110001001100000000000
  41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _	1111111111000000000000000000000	0000000100010011010111100010000
  42 |   0   1  -5  10 |    _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _	1111111111000000000000000000000	0000000010001001101011110001000
  43 |   0   2 -14  10 |    _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _   _   _	0000000000000111111111100000000	0000000000011010111100010011000
  44 |   0   2 -15  10 |    _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _   _	0000000000000111111111100000000	0000000000001101011110001001100
  45 |   0   1  -7   9 |    _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _   _	1111111110000000000000000000000	0000000000100010011010111100000
  46 |   0   1  -8   9 |    _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _	1111111110000000000000000000000	0000000000010001001101011110000
  47 |   0   1  -9   9 |    _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _	1111111110000000000000000000000	0000000000001000100110101111000
  48 |   0   1 -10   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _	1111111110000000000000000000000	0000000000000100010011010111100
  49 |   0   1  14   9 |    3   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0001011111111000000000000000000	1111100010011010000000000000000
  50 |   0   1  12   9 |    _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111000000000000000000	0101111000100110100000000000000
  51 |   0   1  11   9 |    _   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _	0000111111111000000000000000000	0010111100010011010000000000000
  52 |   0   1  13   9 |    2   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0010011111111000000000000000000	1011110001001101000000000000000
  53 |   0   2 -16   9 |    _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21   _   _	0000000000000111111111000000000	0000000000000110101111000100100
  54 |   0   2  16   8 |   22  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000101111111	1111100010011000000000000000000
  55 |   0   2  15   8 |   21   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000001001111111	1011110001001100000000000000000
  56 |   0   2  14   8 |    _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000011111111	0101111000100110000000000000000
  57 |   0   2  13   8 |    _   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000011111111	0010111100010011000000000000000
  58 |   0   1 -11   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   _   _	1111111100000000000000000000000	0000000000000010001001101011100
  59 |   0   2 -17   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _   _   _	0000000000000111111110000000000	0000000000000011010111100010000
  60 |   0   2 -18   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _   _	0000000000000111111110000000000	0000000000000001101011110001000
  61 |   0   2 -19   8 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _	0000000000000111111110000000000	0000000000000000110101111000100
  62 |   0   1  15   7 |    _   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001111111000000000000000000	0111000100110100000000000000000
  63 |   0   1  16   7 |    4   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000100111111000000000000000000	1110001001101000000000000000000
  64 |   0   1 -12   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   _   _	1111111000000000000000000000000	0000000000000001000100110101100
  65 |   0   2 -20   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _   _   _	0000000000000111111100000000000	0000000000000000011010111100000
  66 |   0   2 -21   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _   _	0000000000000111111100000000000	0000000000000000001101011110000
  67 |   0   2 -22   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _	0000000000000111111100000000000	0000000000000000000110101111000
  68 |   0   2 -23   7 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _	0000000000000111111100000000000	0000000000000000000011010111100
  69 |   0   1 -13   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   _   _	1111110000000000000000000000000	0000000000000000100010011010100
  70 |   0   2  18   6 |   23  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000010011111	1110001001100000000000000000000
  71 |   0   2  17   6 |    _  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000111111	0111000100110000000000000000000
  72 |   0   2 -24   6 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17  18   _   _	0000000000000111111000000000000	0000000000000000000001101011100
  73 |   0   1 -15   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _	1111100000000000000000000000000	0000000000000000001000100110100
  74 |   0   1  17   5 |    _   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111000000000000000000	0100010011010000000000000000000
  75 |   0   1  21   5 |    8   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000011111000000000000000000	1100110100000000000000000000000
  76 |   0   1  20   5 |    7   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000101111000000000000000000	1010011010000000000000000000000
  77 |   0   1  19   5 |    6   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000001001111000000000000000000	1001001101000000000000000000000
  78 |   0   1  18   5 |    5   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000010001111000000000000000000	1000100110100000000000000000000
  79 |   0   1 -14   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _   _	1111100000000000000000000000000	0000000000000000010001001101000
  80 |   0   2 -25   5 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16  17   _   _	0000000000000111110000000000000	0000000000000000000000110101100
  81 |   0   2  23   4 |   27  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001111	1100110000000000000000000000000
  82 |   0   1 -17   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _	1111000000000000000000000000000	0000000000000000000010001001100
  83 |   0   1 -16   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _   _	1111000000000000000000000000000	0000000000000000000100010011000
  84 |   0   2  22   4 |   26   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000010111	1010011000000000000000000000000
  85 |   0   2  21   4 |   25   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000100111	1001001100000000000000000000000
  86 |   0   2  20   4 |   24   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000001000111	1000100110000000000000000000000
  87 |   0   2  19   4 |    _  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000001111	0100010011000000000000000000000
  88 |   0   2 -26   4 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _  16   _   _	0000000000000111100000000000000	0000000000000000000000011010100
  89 |   0   1  25   3 |    9  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000001011000000000000000000	1101000000000000000000000000000
  90 |   0   1  24   3 |    _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0110100000000000000000000000000
  91 |   0   1  23   3 |    _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0011010000000000000000000000000
  92 |   0   1  22   3 |    _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000111000000000000000000	0001101000000000000000000000000
  93 |   0   1 -18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _	1110000000000000000000000000000	0000000000000000000001000100100
  94 |   0   2 -27   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _   _   _	0000000000000111000000000000000	0000000000000000000000001101000
  95 |   0   2 -28   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _  15   _   _	0000000000000111000000000000000	0000000000000000000000000110100
  96 |   0   2  27   2 |   28  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000101	1100000000000000000000000000000
  97 |   0   1 -20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   _	1100000000000000000000000000000	0000000000000000000000010001000
  98 |   0   2  26   2 |    _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0110000000000000000000000000000
  99 |   0   2  25   2 |    _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0011000000000000000000000000000
 100 |   0   2  24   2 |    _   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000011	0001100000000000000000000000000
 101 |   0   1 -19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   _   _	1100000000000000000000000000000	0000000000000000000000100010000
 102 |   0   1 -21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _	1100000000000000000000000000000	0000000000000000000000001000100
 103 |   0   2 -29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _   _   _	0000000000000110000000000000000	0000000000000000000000000011000
 104 |   0   2 -30   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14   _   _	0000000000000110000000000000000	0000000000000000000000000001100
 105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12	0000000000011000000000000000000	0000000000000000000000000000011
 106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8	0000001010000000000000000000000	0000000000000000000000000000011
 107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7	0000010100000000000000000000000	0000000000000000000000000000011
 108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5	0000110000000000000000000000000	0000000000000000000000000000011
 109 |   1   1  14   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4	0001100000000000000000000000000	0000000000000000000000000000011
 110 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25  27	0000000000000000000000000101000	0000000000000000000000000000011
 111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26	0000000000000000000000001010000	0000000000000000000000000000011
 112 |   1   2  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24	0000000000000000000000011000000	0000000000000000000000000000011
 113 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23	0000000000000000000000110000000	0000000000000000000000000000011
 114 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19	0000000000000000010100000000000	0000000000000000000000000000011
 115 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18	0000000000000000101000000000000	0000000000000000000000000000011
 116 |   1   2   3   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16	0000000000000001100000000000000	0000000000000000000000000000011
 117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	0000000000000011000000000000000	0000000000000000000000000000011
 118 |   0   1  27   1 |    _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	0100000000000000000000000000000
 119 |   1   1  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	0000000000100000000000000000000	0000000000000000000000000000010
 120 |   1   1  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11	0000000000010000000000000000000	0000000000000000000000000000001
 121 |   1   1  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10	0000000000100000000000000000000	0000000000000000000000000000001
 122 |   1   1  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _	0000000001000000000000000000000	0000000000000000000000000000010
 123 |   1   1  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9	0000000001000000000000000000000	0000000000000000000000000000001
 124 |   1   1  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _	0000000010000000000000000000000	0000000000000000000000000000010
 125 |   1   1  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _	0000000100000000000000000000000	0000000000000000000000000000010
 126 |   0   1 -23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _	1000000000000000000000000000000	0000000000000000000000000010000
 127 |   0   1 -25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _	1000000000000000000000000000000	0000000000000000000000000000100
 128 |   1   1  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6	0000001000000000000000000000000	0000000000000000000000000000001
 129 |   0   2  31   1 |   30   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000001	1000000000000000000000000000000
 130 |   0   2  30   1 |   29   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000000000000000000000010	1000000000000000000000000000000
 131 |   1   1  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	0010000000000000000000000000000	0000000000000000000000000000010
 132 |   1   1  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3	0001000000000000000000000000000	0000000000000000000000000000001
 133 |   1   1  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2	0010000000000000000000000000000	0000000000000000000000000000001
 134 |   1   1  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	0100000000000000000000000000000	0000000000000000000000000000010
 135 |   1   1   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	0100000000000000000000000000000	0000000000000000000000000000001
 136 |   1   1   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _	1000000000000000000000000000000	0000000000000000000000000000010
 137 |   1   1   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	1000000000000000000000000000000	0000000000000000000000000000001
 138 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30   _	0000000000000000000000000000001	0000000000000000000000000000010
 139 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29   _	0000000000000000000000000000010	0000000000000000000000000000010
 140 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  30	0000000000000000000000000000001	0000000000000000000000000000001
 141 |   1   2  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29	0000000000000000000000000000010	0000000000000000000000000000001
 142 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _	0000000000000000000000000000100	0000000000000000000000000000010
 143 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28	0000000000000000000000000000100	0000000000000000000000000000001
 144 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  27   _	0000000000000000000000000001000	0000000000000000000000000000010
 145 |   1   2  22   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  26   _	0000000000000000000000000010000	0000000000000000000000000000010
 146 |   0   1  29   1 |   11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000010000000000000000000	1000000000000000000000000000000
 147 |   0   1  26   1 |    _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	0010000000000000000000000000000
 148 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  25	0000000000000000000000000100000	0000000000000000000000000000001
 149 |   0   1  28   1 |   10   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000100000000000000000000	1000000000000000000000000000000
 150 |   0   1 -22   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _   _	1000000000000000000000000000000	0000000000000000000000000100000
 151 |   1   2  15   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21   _	0000000000000000000001000000000	0000000000000000000000000000010
 152 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22	0000000000000000000000100000000	0000000000000000000000000000001
 153 |   1   2  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  21	0000000000000000000001000000000	0000000000000000000000000000001
 154 |   1   2  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20   _	0000000000000000000010000000000	0000000000000000000000000000010
 155 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  20	0000000000000000000010000000000	0000000000000000000000000000001
 156 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  19   _	0000000000000000000100000000000	0000000000000000000000000000010
 157 |   1   2   7   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  18   _	0000000000000000001000000000000	0000000000000000000000000000010
 158 |   0   1 -24   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	1000000000000000000000000000000	0000000000000000000000000001000
 159 |   0   1  31   1 |   12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	0000000000001000000000000000000	1000000000000000000000000000000
 160 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17	0000000000000000010000000000000	0000000000000000000000000000001
 161 |   0   2 -31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _   _	0000000000000100000000000000000	0000000000000000000000000000100
 162 |   1   1  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	0000000000001000000000000000000	0000000000000000000000000000010
 163 |   1   2   0   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _	0000000000000100000000000000000	0000000000000000000000000000010
 164 |   1   2  -1   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	0000000000000010000000000000000	0000000000000000000000000000001
 165 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13	0000000000000100000000000000000	0000000000000000000000000000001
-----------------------------------------------------------------------------------------------------------------------------------------------------

===========================================================================

Solution: 1

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 2 |    7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _
 3 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 4 |  111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  16   _   _   _   _   _   _  20   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _   _  29   _   _   _   _
   _   _   _  17   _  19   _   _   _   _   _   _   _  22   _   _   _   _  25   _  27   _   _   _   _   _   _   _  30   _   _
   _   _   _   _  13   _   _  15   _   _   _  18   _   _   _   _   _   _   _  21   _   _  23   _   _   _   _   _   _   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0F0FFFF000F00FF0F
EC0E0CDED000C00ED0E0GDGD000C00CD

Seed (after)

CAAACFDEDFECFFEFDFFFFDEDFECFFCFD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C000000C00000000000000C00C0
Input row #  2                               000000D0D0000000D0000D0D0000000D
Input row #  2                                      E00E000E0000000E00E0000000000000
Input row #  1                              000000F000F00FF0F0FFFF000F00FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2           00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001022)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10140)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048089)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 1));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 20));
}


===========================================================================

Solution: 2

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 2 |    7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _
 3 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 4 |  111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  16   _   _  19   _   _   _  20   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _   _  29   _   _   _   _
  13   _   _  17   _   _   _   _   _   _   _   _   _  22   _   _   _   _  25   _  27   _   _   _   _   _   _   _  30   _   _
   _   _   _   _   _  14   _  15   _   _   _  18   _   _   _   _   _   _   _  21   _   _  23   _   _   _   _   _   _   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0F0FFFF000F00FF0F
DE0E0CDEC000C00ED0E0GDGD000C00CD

Seed (after)

DAAACFDCEFECFFEFDFFFFDEDFECFFCFD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              00000C00C000C00000000000000C00C0
Input row #  2                               D00000D000000000D0000D0D0000000D
Input row #  2                                      0E0E000E0000000E00E0000000000000
Input row #  1                              000000F000F00FF0F0FFFF000F00FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2           00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001120)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10041)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004808a)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 1));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 20));
}


===========================================================================

Solution: 3

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   11 |   0   2  -2  14 |    _   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _   _
 3 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _   _   _   _   _   _  20   _   _   _  22   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30   _   _   _
   _  13   _   _   _   _   _   _   _  19   _   _   _   _   _   _   _   _   _  23   _  24   _  26  27   _   _   _  28   _   _
   _   _  15   _  16  17  18   _   _   _   _   _   _   _  21   _   _   _   _   _  25   _   _   _   _   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0F0FFFF000F00FG0G
DC0E0EEED000C00EC0D0DEDD000D00CC

Seed (after)

CAAADEFEEEFCDFFCFEFFFFDEDFDDFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000000000C000C0000000000000CC
Input row #  2                                   D0000000D000000000D0D0DD000D0000
Input row #  2                                 000E0EEE0000000E00000E0000000000
Input row #  1                               000000F000F00FF0F0FFFF000F00F000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08d40101)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002080e8)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x123d6440)));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 4

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   17 |   0   2 -10  13 |    _   _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18  19   _   _   _   _   _   _   _  22   _   _   _   _  25  26   _   _   _   _   _   _   _  29  30   _   _   _
   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24   _   _  27   _   _   _  28   _   _
   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _  13   _   _  15   _   _   _   _   _   _   _   _  20   _   _  21   _   _  23   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EEEE000E00EG0G
FC0F0DCCC000F00FC0F0DCCD000D00CC

Seed (after)

CAAAECCCEDFEEFECEEEECCFEDFEDFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CCC0000000C0000CC0000000CC
Input row #  2                                   00000D00000000000000D00D000D0000
Input row #  1                             000000E000E00EE0E0EEEE000E00E000
Input row #  2                                         F00F00000000F00F00F0000000000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc06101c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08900020)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x123d6440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00049009)), 10));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 5

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   22 |   0   1  -2  12 |    _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18   _   _   _   _  20   _   _   _  22   _  23   _   _  25   _   _   _   _   _   _   _   _  29  30   _   _   _
   _  13   _   _  15   _  16   _   _  19   _   _   _   _   _   _  21   _   _   _   _  24   _  26  27   _   _   _  28   _   _
   _   _   _   _   _   _   _   1   _   _   2   3   _   4   _   5   _   _   _   _   _   _   9   _   _  10   _   _   _   _   _
   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   _   _   _   6   7   8   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000E00EE0E0EFFF000E00EG0G
DC0D0DCCD000C00DC0C0DCDD000D00CC

Seed (after)

CAAADCCDFDECDEECECEDCFFFDEDDECCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CC0000C000C0C00C00000000CC
Input row #  2                                   D00D0D00D000000D0000D0DD000D0000
Input row #  1                               0000000000E00EE0E0E000000E00E000
Input row #  1                                 000000F000000000000FFF0000000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc02510c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08d08129)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12056400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00380040)), 2));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 6

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   22 |   0   1  -2  12 |    _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18   _   _   _   _  20   _   _   _  22   _  23   _   _   _   _  27   _   _   _   _   _   _  29  30   _   _   _
   _  13   _   _  15   _  16   _   _  19   _   _   _   _   _   _  21   _   _   _   _  24  25  26   _   _   _   _  28   _   _
   _   _   _   _   _   _   _   1   _   _   2   3   _   4   _   5   _   7   _   _   _   _   _   _   _  10   _   _   _   _   _
   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   _   _   _   6   _   8   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000E00EE0E0EFEF000F00EG0G
DC0D0DCCD000C00DC0C0DDDC000D00CC

Seed (after)

CAAADCCDFDECDEECECEDEFCFDDDFECCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CC0000C000C0C0000C000000CC
Input row #  2                                   D00D0D00D000000D0000DDD0000D0000
Input row #  1                               0000000000E00EE0E0E0E0000000E000
Input row #  1                                 000000F000000000000F0F000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc08510c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08708129)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10156400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02280040)), 2));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 7

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   27 |   0   2   4  12 |    _  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17   _   _   _   _   _   _   _   _   _  22   _   _   _   _   _  26   _   _   _   _   _   _   _   _  30   _   _   _
   _  13   _   _  15   _  16   _  18  19   _   _   _   _   _   _  21   _   _  23   _  24   _   _  27   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   _   7   _   _   _   _   9   _   _  10  11   _  12   _   _
   _   _   _   _   _  20   _   _   _   _   _   _   _   _  25   _   _   _   _   _  28   _   _  29   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EGEG000E00EE0E
DC0D0DCDD000F00DC0D0DFCD000F00FC

Seed (after)

CAAADCEDFDEDDEECEFEDECDFDEFDEECE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000C000000000C00000C00000000C
Input row #  2                                   D00D0D0DD000000D00D0D00D00000000
Input row #  1                               000000E000E00EE0E0E0E0000E00EE0E
Input row #  2                           000000000000F00000000F00000F00F0

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80410042)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x009481a9)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2156440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48201000)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 8

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   30 |   0   1   8  11 |    _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17   _   _   _   _   _   _   _   _   _  22   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30   _   _   _
   _  13   _   _  15   _  16   _  18  19   _   _   _  20   _   _  21   _   _  23   _  24  25  26  27   _   _   _  28   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   _   _   5   _   7   _   _   _   _   _   _   _  10   _   _   _   _   _
   _   _   _   _   _   4   _   _   _   _   _   _   _   _   9   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0F0EGEG000F00EF0F
DC0D0DCDD000D00DC0D0DDDD000D00CC

Seed (after)

CAAADCEDFDEDDEECDFEDEFDFDDDDECCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000C000000000C0000000000000CC
Input row #  2                                   D00D0D0DD000D00D00D0DDDD000D0000
Input row #  1                               000000E000E00EE000E0E0000000E000
Input row #  1                       0000000000000000F00000000F000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0010042)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08f491a9)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10146440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2010000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 9

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   31 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _
 3 |   51 |   0   1  11   9 |    _   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  116 |   1   2   3   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18   _   _   _   _  20   _   _  21  22   _   _   _   _   _  26   _   _   _   _  28   _   _  29  30   _   _   _
   _  13   _   _   _   _   _   _   _  19   _   _   _   _   _   _   _   _   _  23   _  24  25   _  27   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _   _   7   _   _   _   _   9   _   _  10   _   _
   _   _   _   _   5   6   _   8   _   _   _   _   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0FFEF000E00EF0F
DC0G0GCCD000C00CC0D0DDCD000C00CC

Seed (after)

CAAADCCFFEFCDECCEEFEFCDEDDCDECCE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CC0000C00CC00000C0000C00CC
Input row #  2                                   D0000000D000000000D0DD0D00000000
Input row #  1                                  000000E000E00EE0E000E0000E00E000
Input row #  1                    000000000000000000FF0F0000000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                            000G0G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc84190c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b40101)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12116440)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa02c0000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000028)), 3));
}


===========================================================================

Solution: 10

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   31 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _
 3 |   51 |   0   1  11   9 |    _   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  116 |   1   2   3   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _   _  18   _   _   _   _  20   _   _  21  22   _   _   _  24   _  26   _   _   _   _  28   _   _  29  30   _   _   _
   _  13   _   _   _   _   _  17   _  19   _   _   _   _   _   _   _   _   _  23   _   _  25   _  27   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _   _   _   _   7   8   _   _   _   9   _   _  10   _   _
   _   _   4   _   5   6   _   _   _   _   _   _   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0F0FFEE000E00EF0F
DC0G0GDCD000C00CC0D0CDCD000C00CC

Seed (after)

CAAADFCFFEDCDECCEEFCFCDEEDCDECCE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C00000C0000C00CC000C0C0000C00CC
Input row #  2                                   D00000D0D000000000D00D0D00000000
Input row #  1                                  000000E000E00EE00000EE000E00E000
Input row #  1                    0000000000000000F0FF000000000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                            000G0G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8519082)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a40141)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12306440)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa00d0000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000028)), 3));
}


===========================================================================

Solution: 11

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    2 |   0   2  -4  16 |    _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _
 2 |   31 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _
 3 |   52 |   0   1  13   9 |    2   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  115 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _   _   _   _  20   _   _  21   _   _   _   _   _   _   _   _   _   _   _   _   _   _  29  30   _   _   _
   _  13  14   _  15   _   _  17   _  19   _   _   _   _   _   _   _  22   _  23   _  24  25  26  27   _   _   _  28   _   _
   _   _   _   _   _   _   0   _   _   _   1   _   _   _   3   _   4   _   5   _   7   _   _   _   _   9   _   _   _   _   _
   2   _   _   6   _   8   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FE0E0EFEF000E00FF0F
DD0D0GDGD000C00CD0D0DDDD000D00CC

Seed (after)

FAAADDFDFEDCDECFFEFEDEDEDDDDECCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              000000000000C00C00000000000000CC
Input row #  2                                   DD0D00D0D0000000D0D0DDDD000D0000
Input row #  1                                  000000E000E000E0E0E0E0000E000000
Input row #  1                  0000000000000F00000F0F000000FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                          00000G0G000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0009000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08f5014b)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02154440)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0282000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000a0)), 5));
}


===========================================================================

Solution: 12

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  16   _   _  19   _   _   _   _   _   _  21   _   _   _   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _   _
   _   _  13   _   _  15   _   _  17  18   _   _   _   _  20   _   _   _  22   _  23   _   _   _  26   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   _   _   4   _   5   _   _   _   _   _   _   9   _   _  10   _   _  12   _   _
   _   _   _   _   _   _   3   _   _   _   _   _   7   _   _   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EF0E0EGFG000E00EF0E
DC0D0CDDC000D00CD0D0CCDC000C00CC

Seed (after)

CAAACDECDFEDDECFEDECCDCDFECDECCE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C00C000000C0000CC0C000C00CC
Input row #  2                                    D00D00DD0000D000D0D000D000000000
Input row #  1                               000000E000E00E00E0E000000E00E00E
Input row #  1                          00000000000000F00000F00000000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b08122)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004510c9)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x92052440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20104000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 13

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   25 |   0   2   6  12 |   17   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  16   _   _  19   _   _   _   _   _   _   _  22   _   _   _  24   _   _  27   _   _   _   _   _   _   _  30   _   _   _
   _   _  13   _   _  15   _   _  17  18   _   _   _   _  20   _   _   _   _   _  23   _   _  25  26   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   _   7   _   _   _   _   9   _   _  10  11   _  12   _   _
   _   _   _   _   _   _  21   _   _   _   _   _   _   _   _   _   _   _  28   _   _  29   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EGEG000E00EE0E
DC0D0CDDC000D00FC0D0CDDC000F00FC

Seed (after)

CAAACDECDFEDDEECEDECEFCDFEDDEECE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C00C0000000C000C00C0000000C
Input row #  2                                    D00D00DD0000D00000D00DD000000000
Input row #  1                               000000E000E00EE0E0E0E0000E00EE0E
Input row #  2                         000000000000000F00000000000F00F0

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80910122)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006410c9)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2156440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48008000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 14

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   25 |   0   2   6  12 |   17   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  16   _   _  19   _   _   _   _   _   _   _   _   _   _   _  24   _   _  27   _   _   _  28   _   _   _  30   _   _   _
   _   _  13   _   _  15   _   _  17  18   _   _   _   _  20   _   _   _  22   _  23   _   _   _  26   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   _   7   _   _   _   _   9   _   _  10  11   _  12   _   _
   _   _   _   _   _   _  21   _   _   _   _   _  25   _   _   _   _   _   _   _   _  29   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EGEG000E00EE0E
DC0D0CDDC000D00FD0D0CFDC000C00FC

Seed (after)

CAAACDECDFEDDEEFEDECEDCDFECDEECE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000C00C00000000000C00C000C000C
Input row #  2                                    D00D00DD0000D000D0D000D000000000
Input row #  1                               000000E000E00EE0E0E0E0000E00EE0E
Input row #  2                         000000000000000F00000F00000000F0

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88900122)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004510c9)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2156440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40208000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 15

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    6 |   0   2  -6  15 |    _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _
 2 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 3 |   22 |   0   1  -2  12 |    _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14  16  17   _  19   _   _   _   _   _   _  21  22   _   _   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
   _   _   _  13   _   _  15   _   _   _  18   _   _   _   _  20   _   _   _   _   _  23   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   _   _   _   6   7   _   _   _   _   _   _   _  10   _   _  12   _   _   _   _   _
   _   _   _   _   _   0   _   _   _   1   _   _   _   _   _   _   _   _   _   _   8   _   _   _   9   _   _   _  11   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00EE0G0GEEF000F00EF0E
DC0D0CCDC000D00CC0D0CCCC000C00CC

Seed (after)

CAAACCDCFDEEFDCCEEDCCCCFDECFECCF
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C000CC0C000000CC000CCCC000C00CC
Input row #  2                                     D00D000D0000D00000D0000000000000
Input row #  1                            0000000000000EE0000EE0000000E00E
Input row #  1                                 000000F000F0000000000F000F000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f18162)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00041089)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90186000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22200440)), 2));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 16

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |    7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _
 2 |   31 |   0   1  -3  11 |    _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _
 3 |   37 |   0   2  12  10 |   20  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _  17  18   _   _   _   _   _   _   _  21   _   _   _   _   _  25   _   _   _   _   _  28   _   _   _  30   _   _   _
   _   _   _   _  13  14   _  15   _  16   _   _  19   _   _   _   _   _   _   _   _   _  23   _  24   _  26   _   _   _   _
   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _
  20  22   _   _   _   _   _   _  27   _   _   _   _   _   _  29   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EEEE000E00EG0G
DD0D0DCCD000F00CF0D0DCDF000C00FC

Seed (after)

FAAAFCCDDEDFDECDEEFECEEEEDCDEDCE
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              000000CC0000000C00000C00000C000C
Input row #  2                                      DD0D0D00D000000000D0D0D000000000
Input row #  1                                  000000E000E00EE0E0EEEE000E00E000
Input row #  2                   000000000000F000F000000F000000F0

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x882080c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0054012b)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x123d6440)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40811000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 17

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |   12 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18  19   _   _   _   _   _   _   _  22   _  23   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _   _
   _   _   _   _   _   _  13   _   _  15   _  16   _   _   _   _   _   _  20   _   _  21   _   _   _   _   _   _  26   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   5   _   7   _   _   _   _   9   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   4   _   _   _   _   _   _   _   _   _   _   _  10   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0F0EGEG000E00FE0F
DC0D0DCCC000D00DC0C0CCDC000C00CC

Seed (after)

CAAAECCCEDFFDFDCECECCDCEDFCEFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CCC0000000C0C0CC0C000C00CC
Input row #  2                                        D00D0D000000D00D000000D000000000
Input row #  1                             000000E000E0000000E0E0000E000E00
Input row #  1                            0000000000000FF0F00000000000F00F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b501c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00409029)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22140440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90016000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 18

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |   12 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18  19   _   _   _   _   _   _   _  22   _  23   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _   _
   _   _   _   _   _   _  13   _   _  15   _  16   _   _   _   _   _   _  20   _   _  21   _   _   _   _   _   _  26   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   4   _   _   6   _   8   _   _   _   _   _   _  10   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0F0GFGF000E00FE0F
DC0D0DCCC000D00DC0C0CCDC000C00CC

Seed (after)

CAAAECCCEDFFDFDCFCFCCDCEDFCEFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CCC0000000C0C0CC0C000C00CC
Input row #  2                                        D00D0D000000D00D000000D000000000
Input row #  1                             000000E000E00000000000000E000E00
Input row #  1                            0000000000000FF0F00F0F000000F00F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1             000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b501c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00409029)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90296000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140000)), 18));
}


===========================================================================

Solution: 19

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |   12 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  112 |   1   2  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18  19   _   _   _   _   _   _   _  22   _   _   _   _  25   _  27   _   _   _  28   _   _  29  30   _   _   _
   _   _   _   _   _   _  13   _   _  15   _  16   _   _   _   _   _   _  20   _   _  21   _   _   _   _   _   _  26   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   5   6   7   8   _   _   _   9   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   4   _   _   _   _   _   _   _   _   _   _   _  10   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23  24
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0F0EEEE000E00FE0F
DC0D0DCCC000D00DC0G0GCDC000C00CC

Seed (after)

CAAAECCCEDFFDFDCEEEECDCEDFCEFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CCC0000000C0000C0C000C00CC
Input row #  2                                        D00D0D000000D00D000000D000000000
Input row #  1                             000000E000E0000000EEEE000E000E00
Input row #  1                            0000000000000FF0F00000000000F00F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2             000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8a101c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00409029)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x223c0440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90016000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 18));
}


===========================================================================

Solution: 20

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1  16 |   14  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _
 1 |   12 |   0   2  -9  14 |    _   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  113 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  14   _  17  18  19   _   _   _   _   _   _   _   _   _   _   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _   _
   _   _   _   _   _   _  13   _   _  15   _  16   _   _   _   _   _   _  20   _   _  21   _   _   _   _   _   _  26   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _   _   _  10   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0F0FFFF000E00FE0F
DC0D0DCCC000D00DG0G0CCDC000C00CC

Seed (after)

CAAAECCCEDFFDFDFFFFCCDCEDFCEFCCD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                              0C0000CCC00000000000CC0C000C00CC
Input row #  2                                        D00D0D000000D00D000000D000000000
Input row #  1                             000000E000E00000000000000E000E00
Input row #  1                            0000000000000FF0F0FFFF000000F00F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b001c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00409029)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x903d6000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 21

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 2 |   16 |   0   1   0  13 |    _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _
 3 |   49 |   0   1  14   9 |    3   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _   _  18   _   _   _   _  20   _   _  21   _   _  23   _   _   _  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _  16  17   _  19   _   _   _   _   _   _   _  22   _   _   _  24  25   _  27   _   _   _   _   _   _   _
   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   _   _   7   8   _   _   _   9   _   _  10  11   _   _   _   _
   _   5   6   _   _   _   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0FFEE000E00EE0F
CG0G0DDCD000C00CD0C0DDCD000C00CC

Seed (after)

CAAAFFECDDEDCEECEFCDEECDDEDCEECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C000000C0000C00C00C000C0000C00CC
Input row #  2                                  00000DD0D0000000D000DD0D00000000
Input row #  1                               000000E000E00EE0E000EE000E00EE00
Input row #  1                 000000000000000000FF00000000000F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8449081)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b10160)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32316440)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x800c0000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 22

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 2 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 3 |   21 |   0   1  -1  12 |    _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _   _   _
 4 |  106 |   1   1  19   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _   _  19   _   _   _  20   _   _   _  22   _   _   _  24   _   _  27   _   _   _  28   _   _  29  30   _   _
   _  14   _  15   _   _  17  18   _   _   _   _   _   _   _  21   _   _  23   _   _  25  26   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   4   _   _   _   7   _   _   _   _   9   _   _   _  11   _  12   _   _   _   _   _
   _   _   _   _   0   _   _   _   1   _   _   2   3   _   _   _   5   _   _   _   _   _   _   _   _   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   8
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0E0FGEG000E00FE0E
CD0D0CDDC000C00DC0D0CDDC000C00CC

Seed (after)

CAAADCDFCDDFCEFFCEDFCDECDDECEFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C00C000C000C000C00C000C00CC
Input row #  2                                  0D0D00DD0000000D00D00DD000000000
Input row #  1                            0000000000000000E000E0000E000E0E
Input row #  1                                000000F000F00FF000F000000000F000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1            0000000000000000000G0G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8911121)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006480ca)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2110000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10046440)), 1));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 19));
}


===========================================================================

Solution: 23

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 2 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  107 |   1   1  18   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _  18  19   _   _   _  20   _   _  21   _   _   _   _  24   _  26  27   _   _   _  28   _   _  29  30   _   _
   _  14   _  15   _   _  17   _   _   _   _   _   _   _   _   _  22   _  23   _   _  25   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   3   _   4   _   _   6   _   8   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _   _   _   _   _   _   _   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FE0E0GEGE000F00EE0E
CD0D0CDCC000C00CD0D0CDCC000C00CC

Seed (after)

CAAADCDCCDFECEFCEFEDCDCCDEECEFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C0CC000C00C0000C0CC000C00CC
Input row #  2                                  0D0D00D000000000D0D00D0000000000
Input row #  1                            00000000000000E0E00E0E000000EE0E
Input row #  1                                   000000F000F00F00000000000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1             000000000000000000G0G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8d091a1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0025004a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0294000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02002440)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140000)), 18));
}


===========================================================================

Solution: 24

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |    9 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _
 3 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 4 |  114 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _  18   _   _   _   _   _   _   _   _   _   _   _   _   _  25  26   _   _   _   _   _   _   _  29  30   _   _
   _   _  13  14   _   _   _  16   _   _   _   _   _   _   _   _   _  21   _   _   _   _  24   _   _  27   _   _   _   _   _
  15   _   _   _   _   _  20   _   _   _  22   _  23   _   _   _   _   _   _   _   _  28   _   _   _   _   _   _   _   _   _
   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0F0FFFF000F00FF0F
DD0E0DGCG000E00DE0E0DCCD000E00CC

Seed (after)

EAAAFDDCFEDFFEFEFFFFDCCFEDFFDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               0000000C0000000000000CC0000000CC
Input row #  2                                    DD000D000000000D0000D00D00000000
Input row #  2                            000E00000000E000E0E00000000E0000
Input row #  1                             000000F000F00FF0F0FFFF000F00FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                         000000G0G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0600080)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908023)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08051008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 2));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000140)), 6));
}


===========================================================================

Solution: 25

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |    9 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _
 3 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _  17  18   _   _   _   _   _   _   _   _   _   _   _   _   _  25  26   _   _   _   _   _   _   _  29  30   _   _
   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _  21   _   _   _   _  24   _   _  27   _   _   _   _   _
   _   _  19   _   _   _  20   _   _   _  22   _  23   _   _   _   _   _   _   _   _  28   _   _   _   _   _   _   _   _   _
   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FF0F0FFFF000F00FF0F
CG0G0DCCE000E00DE0E0DCCD000E00CC

Seed (after)

CAAAFECCFEDFFEFEFFFFDCCFEDFFDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C00000CC0000000000000CC0000000CC
Input row #  2                                    00000D000000000D0000D00D00000000
Input row #  2                            00000000E000E000E0E00000000E0000
Input row #  1                             000000F000F00FF0F0FFFF000F00FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc06000c1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08051100)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 2));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 26

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _
 4 |  114 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _   _  18   _   _   _   _  20   _   _  21  22   _   _   _   _  25  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _  14   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _   _  23   _  24   _   _  27   _   _   _   _   _
   _   0   _   _   _   _   _   _   2   _   _   4   _   _   6   7   8   _   _   _   _   _   _  10   _   _  12   _   _   _   _
   _   _   1   _   _   _   3   _   _   _   5   _   _   _   _   _   _   9   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000F00EF0E0FEEE000F00EF0E
CD0D0DGCG000C00CC0D0DCCD000C00CC

Seed (after)

CAAAEFDCDFDECFECCEEEFCCDFDECDECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C000000C0000C00CC0000CC0000C00CC
Input row #  2                                    0D0D0D000000000000D0D00D00000000
Input row #  1                             000000E000000E00E00EEE000000E00E
Input row #  1                          0000000000F000F000F000000F000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                         000000G0G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8619081)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0094002a)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90392040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044400)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000140)), 6));
}


===========================================================================

Solution: 27

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _
 4 |  114 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _   _  18   _   _   _   _  20   _   _   _  22   _  23   _   _  25  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _  14   _  15   _  16   _   _   _   _   _   _   _   _   _  21   _   _   _   _  24   _   _  27   _   _   _   _   _
   _   0   _   _   _   _   _   _   2   _   _   4   _   _   6   _   8   _   _   _   9   _   _  10   _   _  12   _   _   _   _
   _   _   1   _   _   _   3   _   _   _   5   _   7   _   _   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17  19
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000F00EF0E0FEFE000E00EF0E
CD0D0DGCG000C00DC0C0DCCD000C00CC

Seed (after)

CAAAEFDCDFDECFEFCECEDCCEFDECDECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C000000C0000C000C0C00CC0000C00CC
Input row #  2                                    0D0D0D000000000D0000D00D00000000
Input row #  1                             000000E000000E00E00E0E000E00E00E
Input row #  1                          0000000000F000F000F0F00000000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                         000000G0G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8651081)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0090802a)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92292040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20144400)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000140)), 6));
}


===========================================================================

Solution: 28

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _  17  18  19   _   _   _  20   _   _  21  22   _   _   _   _  25  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _  23   _  24   _   _  27   _   _   _   _   _
   _   0   _   _   _   _   _   _   2   _   _   4   _   _   6   7   8   _   _   _   _   _   _  10   _   _  12   _   _   _   _
   _   _   1   _   _   _   3   _   _   _   5   _   _   _   _   _   _   9   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000F00EF0E0FEEE000F00EF0E
CG0G0DCCC000C00CC0D0DCCD000C00CC

Seed (after)

CAAAEFCCCFDECFECCEEEFCCDFDECDECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C00000CCC000C00CC0000CC0000C00CC
Input row #  2                                    00000D000000000000D0D00D00000000
Input row #  1                             000000E000000E00E00EEE000000E00E
Input row #  1                          0000000000F000F000F000000F000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc86191c1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00940020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90392040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044400)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 29

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   18 |   0   1   5  12 |    _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _   _  17  18  19   _   _   _  20   _   _   _  22   _  23   _   _  25  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _  21   _   _   _   _  24   _   _  27   _   _   _   _   _
   _   0   _   _   _   _   _   _   2   _   _   4   _   _   6   _   8   _   _   _   9   _   _  10   _   _  12   _   _   _   _
   _   _   1   _   _   _   3   _   _   _   5   _   7   _   _   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000F00EF0E0FEFE000E00EF0E
CG0G0DCCC000C00DC0C0DCCD000C00CC

Seed (after)

CAAAEFCCCFDECFEFCECEDCCEFDECDECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C00000CCC000C000C0C00CC0000C00CC
Input row #  2                                    00000D000000000D0000D00D00000000
Input row #  1                             000000E000000E00E00E0E000E00E00E
Input row #  1                          0000000000F000F000F0F00000000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc86511c1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92292040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20144400)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 30

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _  18   _   _   _   _  20   _   _  21  22   _   _   _  24   _  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _  14   _  15   _   _  17   _  19   _   _   _   _   _   _   _   _   _  23   _   _  25   _  27   _   _   _   _   _
   _   3   _   _   _   _   6   _   _   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _   _   _   _   _   7   8   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FE0G0GEFF000F00EE0E
CD0D0CDCD000C00CC0D0CDCD000C00CC

Seed (after)

CAAAECDCDEFDCDFCCFEECECDFFDCDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C0C0000C00CC000C0C0000C00CC
Input row #  2                                    0D0D00D0D000000000D00D0D00000000
Input row #  1                     00000000000000E0000E00000000EE0E
Input row #  1                                   000000F000F00F000000FF000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc85190a1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a4014a)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0084000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02302440)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 31

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _  18   _   _   _   _  20   _   _  21  22   _   _   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _
   _   _   _  14   _  15   _   _  17   _  19   _   _   _   _   _   _   _   _   _  23   _   _  25   _  27   _   _   _   _   _
   _   3   _   _   _   _   6   _   _   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _   4   _   5   _   7   8   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FE0F0FEFF000F00EE0E
CD0D0CDCD000C00CC0D0GDGD000C00CC

Seed (after)

CAAAECDCDEFDCDFCCFEEFEFDFFDCDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C0C0000C00CC0000000000C00CC
Input row #  2                                    0D0D00D0D000000000D00D0D00000000
Input row #  1                     00000000000000E0000E00000000EE0E
Input row #  1                                   000000F000F00F00F0F0FF000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2           00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc80190a1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a4014a)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0084000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02352440)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 20));
}


===========================================================================

Solution: 32

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17  18   _   _   _   _  20   _   _  21  22   _   _   _   _   _  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _   _   _   _   _   _  19   _   _   _   _   _   _   _   _   _  23   _  24  25   _  27   _   _   _   _   _
   _   3   _   _   _   5   6   _   8   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _   4   _   _   _   7   _   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FE0F0EEFE000F00EE0E
CG0G0CCCD000C00CC0D0DDCD000C00CC

Seed (after)

CAAAECCCEEFECDFCCFEEFECDFDDCDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CCC0000C00CC00000C0000C00CC
Input row #  2                                    00000000D000000000D0DD0D00000000
Input row #  1                     00000000000000E000EE0E000000EE0E
Input row #  1                                   000000F000F00F00F000F0000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc84190e1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00b40100)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb02c4000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02112440)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 33

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    5 |   0   2  -5  15 |    _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _   _
 2 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _  18   _   _   _   _  20   _   _  21  22   _   _   _  24   _  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _   _   _   _  17   _  19   _   _   _   _   _   _   _   _   _  23   _   _  25   _  27   _   _   _   _   _
   _   3   _   4   _   5   6   _   _   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   _   _   _   _   _   _   7   8   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000F00FE0E0EEFF000F00EE0E
CG0G0CDCD000C00CC0D0CDCD000C00CC

Seed (after)

CAAAECECEEFDCDFCCFEECECDFFDCDFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C0C0000C00CC000C0C0000C00CC
Input row #  2                                    000000D0D000000000D00D0D00000000
Input row #  1                     00000000000000E0E0EE00000000EE0E
Input row #  1                                   000000F000F00F000000FF000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc85190a1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a40140)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb00d4000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02302440)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 34

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    6 |   0   2  -6  15 |    _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17   _   _   _   _   _  20   _   _  21  22   _   _   _  24  25  26   _   _   _   _  28   _   _  29  30   _   _
   _   _   _   _  14   _  15   _   _   _  18  19   _   _   _   _   _   _   _   _   _  23   _   _   _   _  27   _   _   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   _   6   7   8   _   _   _   9   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0G0GEEE000E00FF0F
CD0D0CCDD000C00CC0D0CCCD000C00CC

Seed (after)

CAAAECCDEDFFCDDCCEEECCCEDFFCFDCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CC00000C00CC000CCC0000C00CC
Input row #  2                                     0D0D000DD000000000D0000D00000000
Input row #  1                             000000E000E00000000EEE000E000000
Input row #  1                            0000000000000FF0000000000000FF0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8719061)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0084018a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02380440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0006000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 35

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    6 |   0   2  -6  15 |    _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17   _   _   _   _   _  20   _   _  21  22   _   _   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _
   _   _   _   _  14   _  15   _   _   _  18  19   _   _   _   _   _   _   _   _   _  23   _   _   _  26   _   _   _   _   _
   _   0   _   _   _   1   _   _   _   _   _   _   _   _   6   7   8   _   _   _   _   _   _   _   _   _  12   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   _   _   _   _   _   _   _   _   _   9   _   _  10  11   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00FF0G0GEEE000F00FF0E
CD0D0CCDD000C00CC0D0CCDC000C00CC

Seed (after)

CAAAECCDEDFFCDDCCEEECCFCDFFCDECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CC00000C00CC000CC0C000C00CC
Input row #  2                                     0D0D000DD000000000D000D000000000
Input row #  1                             000000E000E00000000EEE000000000E
Input row #  1                            0000000000000FF0000000000F00FF00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b19061)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0044018a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80380440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x32006000)), 3));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 36

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 4 |  111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17  18   _   _   _   _  20   _   _   _  22   _   _   _   _  25   _  27   _   _   _  28   _   _  29  30   _   _
   _   _   _   _   _  14   _  15   _   _   _   _  19   _   _   _   _   _   _  21   _   _  23   _   _   _   _   _   _   _   _
   _   0   _   _   _   _   _   _   2   _   _   4   _   _   _   _   _   _   _   _   _   _   _  10   _   _  12   _   _   _   _
   _   _   _   _   _   _   1   _   _   _   3   _   _   _   5   6   7   8   _   _   _   9   _   _   _  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000F00EF0E0FFFF000F00EF0E
CD0D0CCCD000C00DC0D0GCGC000C00CC

Seed (after)

CAAAECCCDFDECFEDCFFFFCDCFDECFECC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CCC0000C000C0000C0C000C00CC
Input row #  2                                      0D0D0000D000000D00D0000000000000
Input row #  1                             000000E000000E00E00000000000E00E
Input row #  1                              0000000000F000F000FFFF000F000F00

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2           00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8a110e1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004810a)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90012040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x223c4400)), 1));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 20));
}


===========================================================================

Solution: 37

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    7 |   0   2  -7  15 |    _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _
 2 |   14 |   0   1   2  13 |    _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
 3 |   25 |   0   2   6  12 |   17   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16   _  18   _   _   _   _   _   _   _   _   _   _   _   _  24   _  26   _   _   _   _   _   _   _   _  30   _   _
   _   _   _   _   _   _   _   _   _   _  17   _  19   _   _   _   _   _   _   _   _   _  23   _   _  25   _  27   _   _   _
   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _
   _   _   _  20   _   _  21  22   _   _   _   _   _   _   _   _   _   _  28   _   _  29   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EEEE000E00EE0E
CG0G0CDCD000F00FF0D0CDCD000F00FC

Seed (after)

CAAAECFCEFFEEDEDEEEECFCEFDEEDEDC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000C0C000000000000C0C00000000C
Input row #  2                                      000000D0D000000000D00D0D00000000
Input row #  1                             000000E000E00EE0E0EEEE000E00EE0E
Input row #  2                         000000000000F00FF0000000000F00F0

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x805000a1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a40140)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48019000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 38

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    9 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _
 2 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 3 |   46 |   0   1  -8   9 |    _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17   _  19   _   _   _   _   _   _   _   _   _  23   _  24  25   _  27   _   _   _  28   _   _  29  30   _   _
   _  18   _   _   _   _  20   _   _  21  22   _   _   _   _   _  26   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   2   3   _   _   _   5   6   7   _   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   4   _   _   _   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000E00EE0F0EEEF000E00EE0E
CG0G0CCDC000D00DD0C0CCDC000C00CC

Seed (after)

CAAADCCECDEEDDFEEECDCCECFEECEFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CC0C000000000C0CC0C000C00CC
Input row #  2                            0000000D0000D00DD00000D000000000
Input row #  1                            0000000000E00EE000EEE0000E00EE0E
Input row #  1                                       000000F000000000F0000F0000000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8b40161)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00419080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb21c6400)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210040)), 8));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 39

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |    9 |   0   2   3  14 |   15  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _
 2 |   20 |   0   1   3  12 |    _   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
 3 |   46 |   0   1  -8   9 |    _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17   _  19   _   _   _   _   _   _   _  22   _  23   _  24  25   _  27   _   _   _   _   _   _  29  30   _   _
   _  18   _   _   _   _  20   _   _  21   _   _   _   _   _   _  26   _   _   _   _  28   _   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   2   3   _   4   _   5   _   7   _   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   _   _   _   6   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000E00EE0E0EFEF000E00EE0E
CG0G0CCDC000D00DC0C0CCDC000D00CC

Seed (after)

CAAADCCECDEEDEFECECDCCECDEEFEFCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CC0C0000000C0C0CC0C000000CC
Input row #  2                            0000000D0000D00D000000D0000D0000
Input row #  1                            0000000000E00EE0E0E0E0000E00EE0E
Input row #  1                                       000000F000000000000F0F0000000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0b50161)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08409080)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2156400)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280040)), 8));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 40

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0  16 |   13   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _
 1 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 2 |   27 |   0   2   4  12 |    _  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _
 3 |   41 |   0   1  -4  10 |    _   _   _   _   _   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
  13   _  16  17  18   _   _   _   _   _   _   _   _  22   _   _   _  24  25  26   _   _   _   _   _   _   _   _  30   _   _
   _   _   _   _   _   _   1   _   _   2   3   _   4   _   5   6   _   _   _   _   _   _   _   _  10  11   _  12   _   _   _
   _  19   _   _   _  20   _   _  21   _   _  23   _   _   _   _  27   _   _   _  28   _   _  29   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   _   _   _   _   7   8   _   _   _   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBF000D00DD0D0DDFF000F00DD0D
CG0G0CCCE000E00EC0E0CCCE000E00EC

Seed (after)

CAAAECCCEDFEDDEDCDDECCCEFFEDDFDC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                               C0000CCC00000000C000CCC00000000C
Input row #  1                              0000000000D00DD0D0DD00000000DD0D
Input row #  2                           00000000E000E00E00E0000E000E00E0
Input row #  1                                   000000F0000000000000FF000F000000

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x807100e1)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb00d6400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48849100)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02300040)), 4));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}


===========================================================================

Solution: 41

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 1 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 2 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 3 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 4 |  105 |   1   1  29   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _   _   _  18   _   _   _   _   _   _   _   _   _   _  23   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  13   _   _   _   _   _  17   _  19   _   _   _   _   _   _  21   _   _   _   _  24  25  26  27   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10   _   _   _   _   _   _
  16   _   _   _  20   _   _   _  22   _   _   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EEEE000E00EG0G
DC0C0FDCD000F00DF0C0DDDD000F00FF

Seed (after)

FAAACECFDECFEEDEDEEEECFDEFFEDDDD
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C000C0000000000C0000000000000
Input row #  2                                       D00000D0D000000D0000DDDD00000000
Input row #  1                              000000E000E00EE0E0EEEE000E00E000
Input row #  2                          00000F000000F000F0000000000F00FF

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1  00000000000000000000000000000G0G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004008a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f08141)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x123d6440)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8011020)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 29));
}


===========================================================================

Solution: 42

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 1 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 2 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 3 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _   _   _  18   _   _   _   _   _   _   _   _   _   _  23   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  13   _   _   _   _   _  17   _  19   _   _   _   _   _   _  21   _   _   _   _   _  25   _  27   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   _   _   _   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
  16   _   _   _  20   _   _   _  22   _   _   _  24   _  26   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0G0GEEE000E00EE0E
DC0C0FDCD000F00DF0C0FDFD000F00FF

Seed (after)

FAAACECFDECFEEDFDFEEECFDEFFEEDED
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C000C0000000000C0000000000000
Input row #  2                                       D00000D0D000000D00000D0D00000000
Input row #  1                              000000E000E00EE0000EEE000E00EE0E
Input row #  2                          00000F000000F000F000F0F0000F00FF

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004008a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08141)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2386440)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8511020)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 43

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 1 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 2 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 3 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 4 |  108 |   1   1  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _  23   _  24   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  13   _   _   _   _   _  17  18  19   _   _   _   _   _   _   _   _   _   _   _   _  25   _  27   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   _   _   _   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
  16   _   _   _  20   _   _  21  22   _   _   _   _   _  26   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0G0GEEE000E00EE0E
DC0C0FDDD000F00FF0C0CDFD000F00FF

Seed (after)

FAAACECFDEFFEEDDDFEEECFCEFFEEDED
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C00000000000000C0C00000000000
Input row #  2                                       D00000DDD000000000000D0D00000000
Input row #  1                              000000E000E00EE0000EEE000E00EE0E
Input row #  2                          00000F000000F00FF00000F0000F00FF

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  1               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014000a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a001c1)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb2386440)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8419020)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 44

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -3  15 |    _  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _   _
 1 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 2 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 3 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 4 |  111 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _  14   _  15   _   _   _  18   _   _   _   _   _   _   _   _   _   _  23   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  13   _   _   _   _   _  17   _  19   _   _   _   _   _   _  21   _   _   _   _   _  25   _  27   _   _
   _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
  16   _   _   _  20   _   _   _  22   _   _   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  24  26
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBE000E00EE0E0EEEE000E00EE0E
DC0C0FDCD000F00DF0C0GDGD000F00FF

Seed (after)

FAAACECFDECFEEDEDEEEECFDEFFEEDED
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                  0C0C000C0000000000C0000000000000
Input row #  2                                       D00000D0D000000D00000D0D00000000
Input row #  1                              000000E000E00EE0E0EEEE000E00EE0E
Input row #  2                          00000F000000F000F0000000000F00FF

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2           00000000000000000000G0G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004008a)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08141)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d6440)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8011020)), 5));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 20));
}


===========================================================================

Solution: 45

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 1 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 2 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 3 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  113 |   1   2  16   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _   _   _   _  21   _   _   _   _  24  25  26  27   _   _
   _   _   0   _   _   _   _   _   _   2   _   _   _   _   5   6   _   8   _   _   _   9   _   _  10   _   _   _   _   _   _
   _   _   _   _  20   _   _   _   _   _   _   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   1   3   _   4   _   _   _   7   _   _   _   _   _   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  22  23
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBD000F00DF0F0DDFD000D00DF0F
CC0C0CCCC000E00CG0G0CCCC000E00EE

Seed (after)

FAAAFDFECCFCDCCCCDDFDFECDEEDCCCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                       CC0C0CCCC000000C0000CCCC00000000
Input row #  1                              000000D000000D0000DD0D000D00D000
Input row #  2                          000000000000E00000000000000E00EE
Input row #  1                     0000000000F000F0F000F00000000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2               0000000000000000G0G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f081eb)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x122c2040)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8001000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0114400)), 10));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050000)), 16));
}


===========================================================================

Solution: 46

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 1 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 2 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 3 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  115 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  13  14   _  15   _   _  17   _  19   _   _   _   _   _   _  21  22   _   _   _  24  25  26  27   _   _
   _   _   0   _   _   _   _   _   _   2   _   _   _   _   5   6   _   8   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _  20   _   _   _   _   _  23   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   1   3   _   4   _   _   _   7   _   _   _   _   9   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  18
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBD000F00DF0F0DDFD000F00DF0F
CC0C0GCGC000E00CC0E0CCCC000E00EE

Seed (after)

FAAAFDFECCFCDECFCDDFDFECCEEDCCCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                       CC0C00C0C000000CC000CCCC00000000
Input row #  1                              000000D000000D0000DD0D000000D000
Input row #  2                          000000000000E00000E00000000E00EE
Input row #  1                     0000000000F000F0F000F0000F000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                          00000G0G000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f1814b)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x102c2040)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8041000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2114400)), 10));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000a0)), 5));
}


===========================================================================

Solution: 47

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 1 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 2 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 3 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  116 |   1   2   3   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  13  14   _   _   _   _  17  18  19   _   _   _   _   _   _  21   _   _   _   _  24  25  26  27   _   _
   _   _   0   _   _   _   _   _   _   2   _   _   _   _   5   6   _   8   _   _   _   9   _   _  10   _   _   _   _   _   _
   _   _   _   _  20   _   _   _  22   _  23   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   1   3   _   4   _   _   _   7   _   _   _   _   _   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  16
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBD000F00DF0F0DDFD000D00DF0F
CC0G0GCCC000E00CE0E0CCCC000E00EE

Seed (after)

FAAAFDFECCFEDECCCDDFDFECDEEDCCCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                       CC0000CCC000000C0000CCCC00000000
Input row #  1                              000000D000000D0000DD0D000D00D000
Input row #  2                          000000000000E000E0E00000000E00EE
Input row #  1                     0000000000F000F0F000F00000000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                            000G0G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f081c3)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x122c2040)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8051000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0114400)), 10));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000028)), 3));
}


===========================================================================

Solution: 48

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -8  15 |    _   _   _   _   _  13  14   _  15   _  16  17  18  19   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _
 1 |   15 |   0   1   1  13 |    _   _   0   _   _   _   1   _   _   2   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _
 2 |   26 |   0   2   5  12 |   16   _   _   _  20   _   _  21  22   _  23   _  24  25  26  27   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
 3 |   33 |   0   1  10  11 |    1   3   _   4   _   5   6   7   8   _   _   _   9   _   _  10  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
 4 |  117 |   1   2   1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30
----------------------------------------------------------------------------------------------------------------------------
   _   _   _   _   _  13   _   _   _   _   _  17  18  19   _   _   _   _   _   _  21   _   _   _   _  24  25  26  27   _   _
   _   _   0   _   _   _   1   _   _   2   _   _   _   _   5   6   _   8   _   _   _   9   _   _  10   _   _   _   _   _   _
  16   _   _   _  20   _   _   _  22   _  23   _   _   _   _   _   _   _   _  28   _   _  29  30   _   _   _   _   _   _   _
   _   3   _   4   _   _   _   7   _   _   _   _   _   _   _   _  11   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
----------------------------------------------------------------------------------------------------------------------------

Seed (before)

0AAA0000000000000000000000000000
0B0BBBD000D00DF0F0DDFD000D00DF0F
CG0G0ECCC000E00CE0E0CCCC000E00EE

Seed (after)

EAAAFDFECDFEDECCCDDFDFECDEEDCCCC
GBGBBB

Processing scheme

Output row #0
Input row #  0                               0AAA0000000000000000000000000000
Input row #  2                                       C00000CCC000000C0000CCCC00000000
Input row #  1                              000000D000D00D0000DD0D000D00D000
Input row #  2                          00000E000000E000E0E00000000E00EE
Input row #  1                     00000000000000F0F000F00000000F0F

Output row #1
Input row #  1                               0B0BBB00000000000000000000000000
Input row #  2                              0G0G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00f081c1)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x122c2440)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8051020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0114000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000003a));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000000a)), 1));
}

