Original seed
11010111100010011010111100010011010111100010011010111100010011010111

11010111100010011010111100010011
01011110001001101011110001001101
0111

Length (original seed): 68

Weight: 38

Total number of rows: 3

Number of rows: 3

Indices of rows (new: original):
0: 1
1: 2
2: 0

01011110001001101011110001001101
01110000000000000000000000000000
11010111100010011010111100010011

Number of variables (gaps/ones): 18

Positions of gaps:
1: 0
2: 2
3: 7
4: 8
5: 9
6: 11
7: 12
8: 15
9: 17
10: 22
11: 23
12: 24
13: 26
14: 27
15: 30
16: 32
17: 36
18: 37

Positions of ones:
1: 64
2: 65
3: 67
4: 69
5: 70
6: 71
7: 72
8: 76
9: 79
10: 80
11: 82
12: 84
13: 85
14: 86
15: 87
16: 91
17: 94
18: 95

Original matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17	One               	Gap               
-------------------------------------------------------------------------------------------------
   0 |   0   2  31   1 |   17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	100000000000000000
   1 |   0   2  30   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000010	100000000000000000
   2 |   0   2  29   1 |    _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	010000000000000000
   3 |   0   2  28   1 |    _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000010	010000000000000000
   4 |   0   2  27   1 |   15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000100	100000000000000000
   5 |   0   2  25   1 |    _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000100	010000000000000000
   6 |   0   2  24   1 |    _   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	001000000000000000
   7 |   0   2  23   3 |   14   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000001011	101100000000000000
   8 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000010011	100110000000000000
   9 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000101010	110010000000000000
  10 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _	000000000001010101	111001000000000000
  11 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _	000000000000100111	010101100000000000
  12 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _	000000000011000110	110010100000000000
  13 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _	000000000110001101	111001010000000000
  14 |   0   2  15   5 |    8   _  13  14   _   _  15  16   _   _   _   _   _   _   _   _   _   _	000000001000011110	101100110000000000
  15 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _	000000000100111001	011110001000000000
  16 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _	000000001001110010	011110001000000000
  17 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _	000000010001101100	100111010000000000
  18 |   0   2  11   4 |    _   _  10   _  11  13  14   _   _   _   _   _   _   _   _   _   _   _	000000000011011000	001011100000000000
  19 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _	000000010010110100	010101101000000000
  20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _	000000000111100001	001011100100000000
  21 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _	000000101101001011	101100110110000000
  22 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _	000001001110010011	100111010011000000
  23 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _	000010101010101010	110010111001000000
  24 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _	000101010101010101	111001011100100000
  25 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _	000010011100100111	010101101010110000
  26 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _	001100011011000110	110010111001010000
  27 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _	011000110110001101	111001011100101000
  28 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _	100001111000011110	101100110110011000
  29 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _	010011100100111000	011110001111000000
  30 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _	100111001001110000	011110001111000000
  31 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _	000110110001101100	000111010011101000
  32 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _	001101100011011000	001011100101110000
  33 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _	001011010010110000	000101101010110000
  34 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _	011110000111100000	001011100101110000
  35 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _	110100101101001000	001100110110011000
  36 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _	111001001110010000	000111010011101000
  37 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _	101010101010100000	000010111001011000
  38 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _	010101010101000000	000001011100101000
  39 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _	110010011100000000	000001101010110000
  40 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _	101100011010000000	000000111001011000
  41 |   0   2 -14   5 |    _   _   _   _   _   _   _   1   2   6   _   _   7   _   9   _   _   _	011000110100000000	000000011100101000
  42 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _	100001111000000000	000000010110011000
  43 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _	010011100000000000	000000001111000000
  44 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _	100111000000000000	000000001111000000
  45 |   0   2 -18   4 |    _   _   _   _   _   _   _   _   _   _   3   4   6   _   7   _   _   _	000110110000000000	000000000011101000
  46 |   0   2 -19   4 |    _   _   _   _   _   _   _   _   _   2   _   3   5   6   _   _   _   _	001101100000000000	000000000101110000
  47 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   _   2   _   4   5   _   _   _   _	001011000000000000	000000000010110000
  48 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _	011110000000000000	000000000101110000
  49 |   0   2 -22   4 |    _   _   _   _   _   _   _   _   _   0   1   _   _   3   6   _   _   _	110100100000000000	000000000110011000
  50 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _	111001000000000000	000000000011101000
  51 |   0   2 -24   3 |    _   _   _   _   _   _   _   _   _   _   _   0   _   2   4   _   _   _	101010000000000000	000000000001011000
  52 |   0   2 -25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   1   _   3   _   _   _	010100000000000000	000000000000101000
  53 |   0   2 -26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _	110000000000000000	000000000000110000
  54 |   0   2 -27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   2   _   _   _	101000000000000000	000000000000011000
  55 |   0   2 -29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _	010000000000000000	000000000000001000
  56 |   0   2 -30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	100000000000000000	000000000000001000
  57 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _	000000000000000001	000000000000000100
  58 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _	000000000000000010	000000000000000100
  59 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _	000000000000000101	000000000000000110
  60 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17	000000000000000011	000000000000000011
  61 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	000000000000000010	000000000000000001
  62 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _	000000000000001100	000000000000000110
  63 |   1   2  22   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15	000000000000010100	000000000000000101
  64 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _	000000000000100000	000000000000000100
  65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _	000000000001000000	000000000000000100
  66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _	000000000000001000	000000000000000010
  67 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14	000000000010011000	000000000000000111
  68 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13	000000000000110000	000000000000000011
  69 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12	000000000101100000	000000000000000111
  70 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11	000000001001000000	000000000000000101
  71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	000000000010000000	000000000000000010
  72 |   1   2  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10	000000000010000000	000000000000000001
  73 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _	000000010100000000	000000000000000110
  74 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9	000000001100000000	000000000000000011
  75 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	000000001000000000	000000000000000001
  76 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _	000000110000000000	000000000000000110
  77 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7	000001010000000000	000000000000000101
  78 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _	000010000000000000	000000000000000100
  79 |   1   2   5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   _	000100000000000000	000000000000000100
  80 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _	000000100000000000	000000000000000010
  81 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6	001001100000000000	000000000000000111
  82 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5	000011000000000000	000000000000000011
  83 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4	010110000000000000	000000000000000111
  84 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3	100100000000000000	000000000000000101
  85 |   1   2  -1   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	001000000000000000	000000000000000010
  86 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2	001000000000000000	000000000000000001
  87 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	010000000000000000	000000000000000010
  88 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1	110000000000000000	000000000000000011
  89 |   1   2  -5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	100000000000000000	000000000000000001
-------------------------------------------------------------------------------------------------
Sorted matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17	One               	Gap               
-------------------------------------------------------------------------------------------------
   0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _	011000110110001101	111001011100101000
   1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _	100001111000011110	101100110110011000
   2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _	000101010101010101	111001011100100000
   3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _	000010011100100111	010101101010110000
   4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _	001100011011000110	110010111001010000
   5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _	010011100100111000	011110001111000000
   6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _	100111001001110000	011110001111000000
   7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _	000110110001101100	000111010011101000
   8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _	001101100011011000	001011100101110000
   9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _	011110000111100000	001011100101110000
  10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _	110100101101001000	001100110110011000
  11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _	111001001110010000	000111010011101000
  12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _	000000101101001011	101100110110000000
  13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _	000001001110010011	100111010011000000
  14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _	000010101010101010	110010111001000000
  15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _	001011010010110000	000101101010110000
  16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _	101010101010100000	000010111001011000
  17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _	010101010101000000	000001011100101000
  18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _	110010011100000000	000001101010110000
  19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _	101100011010000000	000000111001011000
  20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _	000000000111100001	001011100100000000
  21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _	000000000110001101	111001010000000000
  22 |   0   2  15   5 |    8   _  13  14   _   _  15  16   _   _   _   _   _   _   _   _   _   _	000000001000011110	101100110000000000
  23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _	000000000100111001	011110001000000000
  24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _	000000001001110010	011110001000000000
  25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _	000000010001101100	100111010000000000
  26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _	000000010010110100	010101101000000000
  27 |   0   2 -14   5 |    _   _   _   _   _   _   _   1   2   6   _   _   7   _   9   _   _   _	011000110100000000	000000011100101000
  28 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _	100001111000000000	000000010110011000
  29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _	000000000011000110	110010100000000000
  30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _	000000000001010101	111001000000000000
  31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _	000000000000100111	010101100000000000
  32 |   0   2  11   4 |    _   _  10   _  11  13  14   _   _   _   _   _   _   _   _   _   _   _	000000000011011000	001011100000000000
  33 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _	010011100000000000	000000001111000000
  34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _	100111000000000000	000000001111000000
  35 |   0   2 -18   4 |    _   _   _   _   _   _   _   _   _   _   3   4   6   _   7   _   _   _	000110110000000000	000000000011101000
  36 |   0   2 -19   4 |    _   _   _   _   _   _   _   _   _   2   _   3   5   6   _   _   _   _	001101100000000000	000000000101110000
  37 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _	011110000000000000	000000000101110000
  38 |   0   2 -22   4 |    _   _   _   _   _   _   _   _   _   0   1   _   _   3   6   _   _   _	110100100000000000	000000000110011000
  39 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _	111001000000000000	000000000011101000
  40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000101010	110010000000000000
  41 |   0   2  23   3 |   14   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000001011	101100000000000000
  42 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   _   2   _   4   5   _   _   _   _	001011000000000000	000000000010110000
  43 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000010011	100110000000000000
  44 |   0   2 -24   3 |    _   _   _   _   _   _   _   _   _   _   _   0   _   2   4   _   _   _	101010000000000000	000000000001011000
  45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14	000000000010011000	000000000000000111
  46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12	000000000101100000	000000000000000111
  47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6	001001100000000000	000000000000000111
  48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4	010110000000000000	000000000000000111
  49 |   0   2 -25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   1   _   3   _   _   _	010100000000000000	000000000000101000
  50 |   0   2 -26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _	110000000000000000	000000000000110000
  51 |   0   2 -27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   2   _   _   _	101000000000000000	000000000000011000
  52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _	000000000000000101	000000000000000110
  53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17	000000000000000011	000000000000000011
  54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _	000000000000001100	000000000000000110
  55 |   1   2  22   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15	000000000000010100	000000000000000101
  56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13	000000000000110000	000000000000000011
  57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11	000000001001000000	000000000000000101
  58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _	000000010100000000	000000000000000110
  59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9	000000001100000000	000000000000000011
  60 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _	000000110000000000	000000000000000110
  61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7	000001010000000000	000000000000000101
  62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5	000011000000000000	000000000000000011
  63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3	100100000000000000	000000000000000101
  64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1	110000000000000000	000000000000000011
  65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _	000000000001000000	000000000000000100
  66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _	000000000000001000	000000000000000010
  67 |   0   2  24   1 |    _   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	001000000000000000
  68 |   0   2 -30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	100000000000000000	000000000000001000
  69 |   0   2  31   1 |   17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	100000000000000000
  70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _	000000000000000001	000000000000000100
  71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _	000000000010000000	000000000000000010
  72 |   1   2  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10	000000000010000000	000000000000000001
  73 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _	000000000000000010	000000000000000100
  74 |   0   2  28   1 |    _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000010	010000000000000000
  75 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	000000001000000000	000000000000000001
  76 |   0   2  25   1 |    _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000100	010000000000000000
  77 |   1   2  25   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	000000000000000010	000000000000000001
  78 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _	000010000000000000	000000000000000100
  79 |   1   2   5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   _	000100000000000000	000000000000000100
  80 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _	000000100000000000	000000000000000010
  81 |   0   2  30   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000010	100000000000000000
  82 |   0   2  27   1 |   15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000100	100000000000000000
  83 |   0   2  29   1 |    _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	000000000000000001	010000000000000000
  84 |   0   2 -29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _	010000000000000000	000000000000001000
  85 |   1   2  -1   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _	001000000000000000	000000000000000010
  86 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2	001000000000000000	000000000000000001
  87 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _	010000000000000000	000000000000000010
  88 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _	000000000000100000	000000000000000100
  89 |   1   2  -5   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	100000000000000000	000000000000000001
-------------------------------------------------------------------------------------------------

===========================================================================

Solution: 1

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _  10   _   _   _  15   _  17   _   _   _
   _   _   5   6   _   _   _   _   _  13  14   _   _   _   _   _   _   _
   _   3   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   _   0   _   2   4   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0F0EFDD000C00FG0C0GGDD000C00EC

Seed (after)

CAEAAAADDFACFAAFACAAAADDFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C00000C00000000C000C
Input row #  2                               0000000DD0000000000000DD00000000
Input row #  2                            00000E000000000000000000000000E0
Input row #  2                                        F00F00F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88041002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008049)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 2

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _
   _   _   5   6   _   _   _   _   _  13  14   _   _   _   _   _   _   _
   2   3   _   _   7   _   _  10   _   _   _  15   _  16   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0E0EFDD000E00FG0E0GGDD000E00EC

Seed (after)

EAEAAAADDEAFFAAEAFAAAADDEAFEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0000000000000000000000000000000C
Input row #  2                               0000000DD0000000000000DD00000000
Input row #  2                            000E0E000000E00000E00000000E00E0
Input row #  2                                          FF0000F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48041028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 3

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   0   _   5   6   _   _   _   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   9   _   _  11   _   _   _   _
   _   _   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0C0GGDD000C00FE0F0EFDF000C00FC

Seed (after)

DACAAAADDFACFAAFAFAAAADEFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000000000000C000C
Input row #  2                               D000000DD0000000000000D000000000
Input row #  2                                      0000000000000000E000E00000000000
Input row #  2                         000000000000000F00F00F0F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40a48000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 4

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   9   _  11   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   7   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0G0FFGG000E00ED0C0DFFC000C00EC

Seed (after)

CAFAAAAFFEADEAADACAAAACFFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000000000C0000C000C000C
Input row #  2                          0000000000000000D000D00000000000
Input row #  2                            000000000000E00E00000000000000E0
Input row #  2                                 F0000FF00000000000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88840002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 5

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   9   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   7   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0G0FFGG000E00ED0E0EFFC000C00EC

Seed (after)

CAFAAAAFFEADEAAEAEAAAACFFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000000000000000000C000C000C
Input row #  2                          0000000000000000D000000000000000
Input row #  2                            000000000000E00E00E0E000000000E0
Input row #  2                                 F0000FF00000000000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88800002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40149000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 6

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   8   9   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   7   _   _  10  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0G0FFGG000E00DD0E0EFFC000C00EC

Seed (after)

CAFAAAAFFEADDAAEAEAAAACFFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000000000000000000C000C000C
Input row #  2                           000000000000000DD000000000000000
Input row #  2                            000000000000E00000E0E000000000E0
Input row #  2                                 F0000FF00000000000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88800002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40141000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 7

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   7   _   8   9   _   _   _   _   _   _   _   _   _   _   _
   2   _   _   _   _   _   _  10  11   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FG0E0GGFC000D00DD0E0EFFC000C00EC

Seed (after)

EAFAAAACDFADDAAEAEAAAACFFACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C00000000000000C000C000C
Input row #  2                           000000000000D00DD000000000000000
Input row #  2                            000E00000000000000E0E000000000E0
Input row #  2                                 F000000F0000000000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88800100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00019000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40140008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600081)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 8

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _  10   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _  15   _  16  17   _   _   _   _
   _   _   _   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   6   _   8   _   _   _   _  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FEEF000C00FG0C0GGEF000D00DD

Seed (after)

CACAAAAFEEACFAAFACAAAAFDEADDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000C0000000000000
Input row #  2                           000000000000000000000000000D00DD
Input row #  2                                 000000EE00000000000000E000000000
Input row #  2                                      F0000F00F000000F0000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8000000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00808121)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 9

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _  15   _  16  17   _   _   _   _
   _   0   3   4   5   _   _   _   _  11   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EEEF000C00FC0G0EFGG000D00DD

Seed (after)

CAEAAAAEEEACFAACAFAAAAEDFADDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000000000000
Input row #  2                           000000000000000000000000000D00DD
Input row #  2                                 E0000EEE000000000000E00000000000
Input row #  2                                        000F0000F000000F00000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8000000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x001000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208108)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 10

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _  14   _   _   _   _  17   _   _   _
   _   _   _   7   _   8   _   _   _   _  15   _  16   _   _   _   _   _
   _   0   3   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   2   4   6   _   _   _   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EFEF000D00DG0F0GGEC000D00DC

Seed (after)

CAEAAAAEDEADFAAFAFAAAACDEADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000000000000000000C0000000C
Input row #  2                           000000000000D00D00000000000D00D0
Input row #  2                                 E0000E0E00000000000000E000000000
Input row #  2                                        000F00F0F000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80800002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000a1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040148)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 11

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _   _
   _   4   _   7   _   8   _   _   _   _  15   _  16  17   _   _   _   _
   _   _   _   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   0   2   3   _   _   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0F0FDEC000D00DG0F0GGEC000D00DD

Seed (after)

CADAAAACDEADFAAFAFAAAACDEADDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000C00000000000000C00000000
Input row #  2                           000000D00000D00D00000000000D00DD
Input row #  2                                 0000000E00000000000000E000000000
Input row #  2                                           F00F0F000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800102)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8009040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040029)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 12

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   4   _   7   _   _   _   _  12   _  15   _  16   _   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   9  10   _  13   _   _   _  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EDGG000D00EF0F0EDFE000D00DF

Seed (after)

CADAAAAEDFAFEAAFADAAAAEDFADEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000000000000000000000000000
Input row #  2                           000000D00000D00000000D00000D00D0
Input row #  2                                      E0000E000000000E0000E00E00000000
Input row #  2                        0000000000000000F0F000F00000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48201040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908021)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80450000)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 13

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _   _   _   _  15   _   _   _   _   _
   _   4   _   7   _   _   _   _  12   _   _   _   _   _   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   9  10   _  13   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EDGG000D00EF0F0EDFE000C00FF

Seed (after)

CADAAAAEDFAFEAAFADAAAAEFFACEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000000000000000000C0000
Input row #  2                           000000D00000D00000000D0000000000
Input row #  2                                      E0000E000000000E0000E00E00000000
Input row #  2                        0000000000000000F0F000F0000000FF

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00201040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908021)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0450000)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 14

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   9   _  14   _   _   _   _   _   _   _   _
   _   4   _   _   _   8   _   _   _   _  15   _  16  17   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   7   _   _  10   _   _   _
   _   _  11  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EDGG000E00DC0E0FFFC000D00DD

Seed (after)

CADAAAAFFFADEAACAEAAAACDEADDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C00000000000000C000000C00000000
Input row #  2                           000000D00000000D00000000000D00DD
Input row #  2                                           E0000E000000E00000E0000000000000
Input row #  2                  00000000000000000000FFF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00810002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8008040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00041021)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 15

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   6   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   3   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   4   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0F0DFEC000C00FG0C0GGEC000C00DC

Seed (after)

CADAAAACEFACFAAFACAAAACEFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000C000C00000C0000C000C000C
Input row #  2                            00000D000000000000000000000000D0
Input row #  2                                0000000E00000000000000E000000000
Input row #  2                                        F00F00F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841102)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008049)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 16

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   3   _   _   _   _   _  10   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   6   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0F0DEEF000C00FG0D0GGEC000C00DC

Seed (after)

CADAAAAEEFACFAADAFAAAACEFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C0000000000C000C000C
Input row #  2                            00000D000000000000D00000000000D0
Input row #  2                                000000EE00000000000000E000000000
Input row #  2                                        F00F0000F000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40040020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008109)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 17

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   _   9   _   _   _   _   _   _  17   _   _   _
   2   3   _   _   _   _   _   _  11   _   _  15   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12   _   _   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   _   _   7   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEE000F00FC0G0DEGG000D00DC

Seed (after)

DADAAAAEEEAFFAACADAAAAEFDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0000000000000000C00000000000000C
Input row #  2                            000D0D00000000000000D000000D00D0
Input row #  2                                000000EEE000000000000E0000000000
Input row #  2                                          FF0000000000F00F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48100028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009003)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 18

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _  14   _   _   _   _  17   _   _   _
   2   3   _   _   7   _   _  10   _   _   _  15   _  16   _   _   _   _
   _   _   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DFEC000D00FG0D0GGEC000D00DC

Seed (after)

DADAAAACEDAFFAADAFAAAACEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C00000000000000C0000000C
Input row #  2                            000D0D000000D00000D00000000D00D0
Input row #  2                                0000000E00000000000000E000000000
Input row #  2                                          FF0000F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80800100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48041028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 19

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _   _  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   0   3   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FEEE000C00DG0D0GGEE000C00DC

Seed (after)

CACAAAAEEEACDAADAFAAAAFEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000000000000C000C
Input row #  2                            000000000000000D00D00000000000D0
Input row #  2                                000000EEE0000000000000EE00000000
Input row #  2                                                F0000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8800100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 20

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   1   4   5   6   _   _   _   _   _  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   0   3   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FE0D0FEEE000C00DG0D0GGEE000C00DC

Seed (after)

DAEAAAAEEEACDAADAFAAAAFEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000000000000C000C
Input row #  2                            000D00000000000D00D00000000000D0
Input row #  2                                0E0000EEE0000000000000EE00000000
Input row #  2                                                F0000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c001c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 21

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   39 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _   _   _  17   _   _   _
   _   3   _   _   _   _   8   _  11   _   _  15   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   0   _   2   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0F0DEEE000C00DC0G0DEGG000D00DC

Seed (after)

CADAAAAEEEACDAACADAAAAEFDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C00000000000000C
Input row #  2                            00000D000000000D0000D000000D00D0
Input row #  2                                000000EEE000000000000E0000000000
Input row #  2                                                      F00F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48108020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000009)), 23));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 22

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   39 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEE000C00DC0G0DEGG000C00DC

Seed (after)

DADAAAAEEEACDAACADAAAAEFFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                            000D0D000000000D0000D000000000D0
Input row #  2                                000000EEE000000000000E0000000000
Input row #  2                                                      FF000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 23));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 23

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0D0DEEE000C00DC0F0DEEE000C00DC

Seed (after)

DADAAAAEEEACDAACADAAAAEEEACDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                            000D0D000000000D0000D000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000F0000000000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 24

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0GEEE000C00DC0C0FEEE000C00DC

Seed (after)

CACAAAAEEEACDAACACAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C000C0C00000000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8805100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 25

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0GEEE000C00DE0D0FEEE000C00DC

Seed (after)

CACAAAAEEEACDAADAEAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000000000000C000C
Input row #  2                            000000000000000D00D00000000000D0
Input row #  2                                000000EEE0000000E0000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8800100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e101c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 26

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   1   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GE0D0GEEE000C00DC0C0FEEE000C00DC

Seed (after)

DAEAAAAEEEACDAACACAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0C00000000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                0E0000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c2)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 27

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GE0D0GEEE000C00DE0D0FEEE000C00DC

Seed (after)

DAEAAAAEEEACDAADAEAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000000000000C000C
Input row #  2                            000D00000000000D00D00000000000D0
Input row #  2                                0E0000EEE0000000E0000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e101c2)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 28

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0D0DEEE000C00DF0D0DEEE000C00DC

Seed (after)

DADAAAAEEEACDAADADAAAAEEEACDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000000000000C000C
Input row #  2                            000D0D000000000D00D0D000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000000000000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 29

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0GEEE000C00DF0D0DEEE000C00DC

Seed (after)

CACAAAAEEEACDAADADAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000000000000C000C
Input row #  2                            000000000000000D00D0D000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                   0000000000000000F000000000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8800100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 12));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 30

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   1   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GE0D0GEEE000C00DF0D0DEEE000C00DC

Seed (after)

DAEAAAAEEEACDAADADAAAAEEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000000000000C000C
Input row #  2                            000D00000000000D00D0D000000000D0
Input row #  2                                0E0000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                   0000000000000000F000000000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c2)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 12));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 31

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
 4 |   71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FEEE000C00DC0G0DEEE000C00DC

Seed (after)

CACAAAAEEEACDAACADAAAAEEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C000C0000000000C000C
Input row #  2                            000000000000000D0000D000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               F0000F00000000000000000000000000
Input row #  2                 000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8801100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 14));
}


===========================================================================

Solution: 32

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
 4 |   71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   1   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FE0D0FEEE000C00DC0G0DEEE000C00DC

Seed (after)

DAEAAAAEEEACDAACADAAAAEEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                            000D00000000000D0000D000000000D0
Input row #  2                                0E0000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               F0000F00000000000000000000000000
Input row #  2                 000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c2)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 14));
}


===========================================================================

Solution: 33

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEE000C00DC0C0GEEE000C00DC

Seed (after)

DADAAAAEEEACDAACACAAAAEEEACDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0C00000000C000C
Input row #  2                            000D0D000000000D00000000000000D0
Input row #  2                                000000EEE000000000000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                   FF000000000000000000000000000000
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 34

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   _   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEE000C00DE0D0GEEE000C00DC

Seed (after)

DADAAAAEEEACDAADAEAAAAEEEACDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000000000000C000C
Input row #  2                            000D0D000000000D00D00000000000D0
Input row #  2                                000000EEE0000000E0000EEE00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                   FF000000000000000000000000000000
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e101c0)), 1));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 35

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   9   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00DF0D0DEEC000C00DC

Seed (after)

DAEAAAACFEACDAADADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C0000000000C000C000C
Input row #  2                            000D00000000000D00D0D000000000D0
Input row #  2                                 E000000E0000000000000EE000000000
Input row #  2                       0000000000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 36

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   _  10   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   9   _   _   _  14   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00DF0C0EEEF000C00DC

Seed (after)

DAEAAAACFEACDAAFACAAAAEEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C00000C00000000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E000000E000000000000EEE000000000
Input row #  2                       0000000000000000F000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88041100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00810000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 37

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   _  10   _   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   8   _  12  13   _   _   _   _   _   _
   _   _   _   9   _   _  11   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00EF0D0FEEC000C00DC

Seed (after)

DAEAAAACFEACFAADAEAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C0000000000C000C000C
Input row #  2                            000D00000000000000D00000000000D0
Input row #  2                                 E000000E0000000E00000EE000000000
Input row #  2                       0000000000000000F000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40040008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00608081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 38

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   7   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _  10   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000D00DC0F0DEEC000C00DC

Seed (after)

CAEAAAAEEDAFDAACADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C00000000000000C000000C000C000C
Input row #  2                            000000000000D00D0000D000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                        000000000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88810002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40109000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 39

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   9   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00DF0D0DEEC000C00DC

Seed (after)

CAEAAAAEEFACDAADADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C0000000000C000C000C
Input row #  2                            000000000000000D00D0D000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                        0000000000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 40

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   8   _  10   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00FC0F0DEEC000C00DC

Seed (after)

CAEAAAAEEFACFAACADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000C000C000C
Input row #  2                            00000000000000000000D000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                         000000000000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40100000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 41

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   8   _  10   _  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00FC0F0EEEF000C00DC

Seed (after)

CAEAAAAEEFACFAACAFAAAAEEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0000000000C000C
Input row #  2                            000000000000000000000000000000D0
Input row #  2                                 E0000EE0000000000000EEE000000000
Input row #  2                         000000000000000F00F0000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00848000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 42

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EEEF000C00FC0G0EEGG000C00DC

Seed (after)

CAEAAAAEEEACFAACAFAAAAEEFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0000000000C000C
Input row #  2                            000000000000000000000000000000D0
Input row #  2                                 E0000EEE000000000000EE0000000000
Input row #  2                                        000F0000F000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008108)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 43

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _
   2   _   _   _   7   _   8   _   _   _   _  15   _  16   _   _   _   _
   _   0   _   4   _   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   1   _   3   5   _   _   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEFC000D00DF0G0EEGG000D00DC

Seed (after)

DAEAAAACEDAFDAAFAFAAAAEEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C0000000000000000000000C
Input row #  2                            000D00000000D00D00000000000D00D0
Input row #  2                                 E00000E0000000000000EE0000000000
Input row #  2                                         0F000F0F00000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300041)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000100a2)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 44

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _
   2   _   _   _   _   _   8   _  11   _   _  15   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   1   _   3   _   7   _   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEEC000F00DF0G0DEGG000D00DC

Seed (after)

DAEAAAACEEAFDAAFADAAAAFEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C0000000000000000000000C
Input row #  2                            000D00000000000D0000D000000D00D0
Input row #  2                                 E00000EE0000000000000E0000000000
Input row #  2                                         0F000F000000F000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011022)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 45

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   _  10   _   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   8   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   _   _   7   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEC000F00EG0D0GGEC000C00DC

Seed (after)

DADAAAACEEAFFAADAEAAAACFEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C00000000000000C000C000C
Input row #  2                            000D0D000000000000D00000000000D0
Input row #  2                                 000000EE0000000E000000E000000000
Input row #  2                                          FF0000000000F0000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88800100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40040028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004080c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001003)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 46

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   9  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   7   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000D00DC0C0FEEC000C00DC

Seed (after)

CAEAAAAEEDAFDAACACAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C00000000000000C0C0000C000C000C
Input row #  2                            000000000000D00D00000000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                      00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88850002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 47

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _  10   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00DC0F0DEEC000C00DC

Seed (after)

CAEAAAAEEFACDAACADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000C000C000C
Input row #  2                            000000000000000D0000D000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                      000000000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 48

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   22 |   0   2  15   5 |    8   _  13  14   _   _  15  16   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00DC0C0EEEF000C00DC

Seed (after)

DAEAAAACFEACDAACACAAAAEEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C00000000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E000000E000000000000EEE000000000
Input row #  2                00000000000000000000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 15));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 49

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00DC0C0EEEF000C00DC

Seed (after)

CAEAAAAEEFACDAACACAAAAEEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C00000000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 E0000EE0000000000000EEE000000000
Input row #  2                 00000000000000000000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 50

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   7   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000D00DC0C0EEEF000C00DC

Seed (after)

CAEAAAAEEDAFDAACACAAAAEEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C00000000000000C0C00000000C000C
Input row #  2                            000000000000D00D00000000000000D0
Input row #  2                                 E0000EE0000000000000EEE000000000
Input row #  2                   00000000000000000000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88050002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 51

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00DC0C0FEEC000C00DC

Seed (after)

DAEAAAACFEACDAACACAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C0000C000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E000000E0000000000000EE000000000
Input row #  2                   00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88851100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 52

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _  10   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGEC000C00DC0F0DEEC000C00DC

Seed (after)

DAEAAAACFEACDAACADAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C000000C000C000C
Input row #  2                            000D00000000000D0000D000000000D0
Input row #  2                                 E000000E0000000000000EE000000000
Input row #  2                     000000000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 53

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   28 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   3   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   6   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0EEEF000C00DG0C0GGEC000C00DC

Seed (after)

CACAAAAEEEACDAAFACAAAACFEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000C0000C000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 00000EEE00000000000000E000000000
Input row #  2                                              F0000000F00000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8884100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000e0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000101)), 15));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 54

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   32 |   0   2  11   4 |    _   _  10   _  11  13  14   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEGG000C00DC0C0FEEC000C00DC

Seed (after)

CAEAAAAEEFACDAACACAAAACEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C0000C000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 E0000EE00000000000000EE000000000
Input row #  2                    00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88851002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 55

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   33 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   1   _   _   6   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0EEEF000C00DC0G0EEGG000C00DC

Seed (after)

DAEAAAAEEEACDAACAFAAAAEEFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E0000EEE000000000000EE0000000000
Input row #  2                                               0F000000F00000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000102)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 56

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   36 |   0   2 -19   4 |    _   _   _   _   _   _   _   _   _   2   _   3   5   6   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   6   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   3   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0FEEC000C00DC0G0DEGG000C00DC

Seed (after)

CAEAAAACEEACDAACADAAAAFEFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000C000C000C0000000000C000C
Input row #  2                            000000000000000D0000D000000000D0
Input row #  2                                 E00000EE0000000000000E0000000000
Input row #  2                                                  000F0F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011102)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000028)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 57

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   37 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9   _   _   _   _   _   _  17   _   _   _
   2   _   _   _   _   _   8   _  11   _   _  15   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   1   _   _   3   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEEC000C00DC0G0DEGG000D00DC

Seed (after)

DAEAAAACEEACDAACADAAAAFEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C00000000000000C
Input row #  2                            000D00000000000D0000D000000D00D0
Input row #  2                                 E00000EE0000000000000E0000000000
Input row #  2                                                    0F000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 58

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GEEC000C00DC0C0EEEF000C00DC

Seed (after)

DAEAAAACEEACDAACACAAAAEEEACDAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C00000000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E00000EE000000000000EEE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             00000000000000000000000F00000000
Input row #  2                              0G000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000c1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
}


===========================================================================

Solution: 59

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0D0DEEC000C00DC0F0DEEC000C00DC

Seed (after)

DADAAAACEEACDAACADAAAACEEACDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C000000C000C000C
Input row #  2                            000D0D000000000D0000D000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000F0000000000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 60

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EEEG000C00DC0C0FEEC000C00DC

Seed (after)

CAEAAAAEEEACDAACACAAAACEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C0000C000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 E0000EEE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                            000G0000G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88851002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000e1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
}


===========================================================================

Solution: 61

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0GEEC000C00DC0C0FEEC000C00DC

Seed (after)

CACAAAACEEACDAACACAAAACEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0C0000C000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8885110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 62

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0D0DEEC000C00DF0D0DEEC000C00DC

Seed (after)

DADAAAACEEACDAADADAAAACEEACDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C0000000000C000C000C
Input row #  2                            000D0D000000000D00D0D000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000000000000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 63

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EEEF000C00DG0D0DEEC000C00DC

Seed (after)

CAEAAAAEEEACDAADADAAAACEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C0000000000C000C000C
Input row #  2                            000000000000000D00D0D000000000D0
Input row #  2                                 E0000EEE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000F00000000000000000000000
Input row #  2                   0000000000000000G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000e1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 12));
}


===========================================================================

Solution: 64

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EEEF000C00DC0C0EEEG000C00DC

Seed (after)

CAEAAAAEEEACDAACACAAAAEEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C00000000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 E0000EEE000000000000EEE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000F00000000000000000000000
Input row #  2            00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000e1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 19));
}


===========================================================================

Solution: 65

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0EEEF000C00DC0G0DEEC000C00DC

Seed (after)

CAEAAAAEEEACDAACADAAAACEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000C000C000C
Input row #  2                            000000000000000D0000D000000000D0
Input row #  2                                 E0000EEE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000F00000000000000000000000
Input row #  2                 000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000e1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 14));
}


===========================================================================

Solution: 66

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEEC000C00DC0C0GEEC000C00DC

Seed (after)

DAEAAAACEEACDAACACAAAACEEACDAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C0000C000C000C
Input row #  2                            000D00000000000D00000000000000D0
Input row #  2                                 E00000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88851100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 15));
}


===========================================================================

Solution: 67

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEEC000C00DG0D0DEEC000C00DC

Seed (after)

DAEAAAACEEACDAADADAAAACEEACDAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C0000000000C000C000C
Input row #  2                            000D00000000000D00D0D000000000D0
Input row #  2                                 E00000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                    0000000000000000G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 11));
}


===========================================================================

Solution: 68

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   72 |   1   2  13   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   2   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0D0FEEC000C00DC0G0DEEC000C00DC

Seed (after)

DAEAAAACEEACDAACADAAAACEEACDAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C000000C000C000C
Input row #  2                            000D00000000000D0000D000000000D0
Input row #  2                                 E00000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                  000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c1)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 13));
}


===========================================================================

Solution: 69

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0D0DEEC000C00DC0C0EEEF000C00DC

Seed (after)

DADAAAACEEACDAACACAAAAEEEACDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C00000000C000C
Input row #  2                            000D0D000000000D00000000000000D0
Input row #  2                                 000000EE000000000000EEE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2        00000000000000000000000F00000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 23));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 70

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10  11   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0GEEC000C00DF0D0DEEC000C00DC

Seed (after)

CACAAAACEEACDAADADAAAACEEACDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C0000000000C000C000C
Input row #  2                            000000000000000D00D0D000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                   0000000000000000F000000000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8880110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40148000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 12));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 71

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
 4 |   66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FEEC000C00DC0C0EEEG000C00DC

Seed (after)

CACAAAACEEACDAACACAAAAEEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0C00000000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                                 000000EE000000000000EEE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               F0000F00000000000000000000000000
Input row #  2            00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8805110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 19));
}


===========================================================================

Solution: 72

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
 4 |   71 |   1   2  14   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _  11   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FEEC000C00DC0G0DEEC000C00DC

Seed (after)

CACAAAACEEACDAACADAAAACEEACDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C000000C000C000C
Input row #  2                            000000000000000D0000D000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               F0000F00000000000000000000000000
Input row #  2                 000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8881110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 14));
}


===========================================================================

Solution: 73

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 3 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
   2   3   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DEEC000C00DC0C0GEEC000C00DC

Seed (after)

DADAAAACEEACDAACACAAAACEEACDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C000C000C0C0000C000C000C
Input row #  2                            000D0D000000000D00000000000000D0
Input row #  2                                 000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                   FF000000000000000000000000000000
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88851100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 74

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _
   _   3   _   _   7   _   _   _  11   _   _  15   _  16   _   _   _   _
   _   _   0   _   _   _   _   6   _   8   9   _   _   _   _   _   _   _
   _   _   _   2   _   4   5   _   _   _   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0F0DFFE000D00EE0G0DFGG000D00DC

Seed (after)

CADAAAAEFDAFFAAEADAAAAEEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C00000000000000000000000000000C
Input row #  2                            00000D000000D0000000D000000D00D0
Input row #  2                                      E0000000E000000EE000000000000000
Input row #  2                                    000F00FF0000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48101020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c8)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 75

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _
   2   3   _   _   7   _   _   _  11   _   _  15   _  16   _   _   _   _
   _   _   0   1   _   _   _   6   _   8   9   _   _   _   _   _   _   _
   _   _   _   _   _   4   5   _   _   _   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EE0D0DFFE000D00EE0G0DFGG000D00DC

Seed (after)

DADAAAAEEDAFFAAEADAAAAEEDAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0000000000000000000000000000000C
Input row #  2                            000D0D000000D0000000D000000D00D0
Input row #  2                                      EE000000E000000EE000000000000000
Input row #  2                                    000000FF0000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48101028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018103)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 76

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   _   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _   _
   _   _   _  13  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FFFC000C00DG0D0GGEE000C00DC

Seed (after)

CACAAAACEEACDAADAFAAAAFFFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C00000000000000C000C
Input row #  2                            000000000000000D00D00000000000D0
Input row #  2                 0000000000000000000000EE00000000
Input row #  2                                                F0000FFF000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8800110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40048000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000e1)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 77

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 3 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _  11  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FFFC000C00DC0G0EEGG000C00DC

Seed (after)

CACAAAACEEACDAACAFAAAAFFFACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0000000000C000C
Input row #  2                            000000000000000D00000000000000D0
Input row #  2                   00000000000000000000EE0000000000
Input row #  2                                                F0000FFF000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8801110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000e1)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 78

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _   _  14   _   _  15   _   _   _   _   _
   _   _   4   5   6   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _  13   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDD000C00FG0F0GGEC000C00EE

Seed (after)

CACAAAADDDACFAAEAFAAAACEEACFAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C0000000000C000C0000
Input row #  2                                000000DDD00000000000000000000000
Input row #  2                        0000000000000000000000E0000000EE
Input row #  2                                           F0000F000000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0880100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0400000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 79

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   4   5   6   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  10   _  13   _   _  16   _   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   7   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDD000F00FG0E0GGEC000C00EC

Seed (after)

CACAAAADDDAEFAAEAFAAAACEFACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000000000000000000C000C000C
Input row #  2                                000000DDD00000000000000000000000
Input row #  2                        000000000000000000E000E0000000E0
Input row #  2                                           F0000F000000F00F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8880000a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40440000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 80

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   9   _   _   _   _  15   _   _   _   _   _
   _   _   4   5   6   _   _   _   _  12  13  14   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDD000C00EC0E0GDDD000C00FF

Seed (after)

CACAAAADDDACEAACAEAAAADDDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C000C0000000000C0000
Input row #  2                                000000DDD000000000000DDD00000000
Input row #  2                                           E0000E000000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0801100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00e001c0)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 81

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   0   _   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   3   _   _   _   _   _   _   _   _  14   _   _   _   _
   _   _   8   _   _   _  11   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0G0EDGG000C00FC0C0FDDE000C00FC

Seed (after)

CADAAAAFDEACFAACACAAAAFDDACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C00000000C000C
Input row #  2                                 D00000D00000000000000DD000000000
Input row #  2                                   00000E00000000000000000E00000000
Input row #  2                       000000000000000F0000F000000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600041)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800020)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 82

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _   _   _  17   _   _   _
   _   0   3   4   _   _   _   _   8   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _  10   _  11  13  14   _   _   _   _
   _   _   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0G0DDGG000C00DC0E0EDEE000F00FC

Seed (after)

CADAAAADDFACFAACADAAAAEDEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C00000000000000C
Input row #  2                                 D0000DD00000000D00000D0000000000
Input row #  2                                   000000000000000000E0E0EE00000000
Input row #  2             000000000000000000000000000F00F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00d40000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48000000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 83

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   43 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   0   _   _   5   _   _   _   8   _  12   _   _   _   _   _   _   _
   _   _   2   _   _   _   6   _   _  10   _  11   _  14   _   _   _   _
  13   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGDE000C00DC0E0EDFE000C00FC

Seed (after)

FADAAAAEFDACEAACADAAAAEDEACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                                 D000000D0000000D00000D0000000000
Input row #  2                                   000E0000E000000000E0E00E00000000
Input row #  2         0000000000000000000000F0000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00940108)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400000)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 84

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   _   4   _   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _  11   _   _   _   _
   _  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0EDGG000C00EC0C0EDDF000C00FC

Seed (after)

CAFAAAAEDFACEAACACAAAAEDDACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C00000000C000C
Input row #  2                                 000000D00000000000000DD000000000
Input row #  2                                      E0000E000000000E0000E00000000000
Input row #  2          00000000000000000000000F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00108021)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 85

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _  10   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   6   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDE000C00EF0C0EDDE000C00GG

Seed (after)

CACAAAAEDDACEAAEACAAAAEDDACEAAEA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000C00000000C0000
Input row #  2                                 000000DD0000000000000DD000000000
Input row #  2                                      E0000E00E000000E0000E00E00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000000000000000
Input row #  2     000000000000000000000000000000GG

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0804100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908121)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
}


===========================================================================

Solution: 86

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   6   _   _   7   _   9  10   _   _   _  15   _   _   _   _   _
   _   0   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0F0EDDC000C00EC0C0EDDE000C00GG

Seed (after)

CADAAAACDDACEAACACAAAAEDDACEAAEA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C000000C000C000C0C00000000C0000
Input row #  2                                 D00000DD0000000000000DD000000000
Input row #  2                                      00000E000000000E0000E00E00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000000000000000000000000000
Input row #  2     000000000000000000000000000000GG

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08051102)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908020)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
}


===========================================================================

Solution: 87

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   60 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   9  10   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDG000C00EC0C0EDDE000C00FF

Seed (after)

CACAAAAEDDACEAACACAAAAEDDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C000C0C00000000C0000
Input row #  2                                 000000DD0000000000000DD000000000
Input row #  2                                      E0000E000000000E0000E00E00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2                       00000000G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0805100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908021)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000100)), 8));
}


===========================================================================

Solution: 88

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9  10   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GC0C0EDDC000C00EC0C0EDDE000C00FF

Seed (after)

CACAAAACDDACEAACACAAAAEDDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0C00000000C0000
Input row #  2                                 000000DD0000000000000DD000000000
Input row #  2                                      00000E000000000E0000E00E00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2                               G0000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0805110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908020)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000001)));
}


===========================================================================

Solution: 89

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   88 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _  10   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   6   _   8   9   _   _  11  14   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDE000C00EE0C0EGDE000C00FF

Seed (after)

CACAAAAEDDACEAAEACAAAAEEDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000C00000000C0000
Input row #  2                                 000000DD00000000000000D000000000
Input row #  2                                      E0000E00E000000EE000E00E00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2          000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0804100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00918121)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 21));
}


===========================================================================

Solution: 90

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
 4 |   73 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   0   _   _   _   3   6   _   _   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDE000C00FF0C0EDDC000C00GC

Seed (after)

CACAAAAEDDACEAAEACAAAACDDACEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000C00000C0000C000C000C
Input row #  2                                 000000DD0000000000000DD000000000
Input row #  2                                      E0000E00E00000000000E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                    000000000000000FF000000000000000
Input row #  2 000000000000000000000000000000G0

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8884100a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100121)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 11));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 30));
}


===========================================================================

Solution: 91

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   _   _   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   _  14   _  16  17   _   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDC000C00FG0F0GGDE000C00EE

Seed (after)

CACAAAACDDACFAAEAFAAAAEEDACFAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C00000000000000C0000
Input row #  2                                 000000DD00000000000000D000000000
Input row #  2                       00000000000000000000000E000000EE
Input row #  2                                           F0000F000000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0800110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0800000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 92

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   44 |   0   2 -24   3 |    _   _   _   _   _   _   _   _   _   _   _   0   _   2   4   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _  10   _   _   _  15   _  17   _   _   _
   _   0   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   6   _   8   9   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0F0GGDE000C00EE0C0EDDE000C00EC

Seed (after)

EADAAAAEEDACEAAEACAAAAEDDACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000C00000000C000C
Input row #  2                                 D000000D0000000000000DD000000000
Input row #  2                       00000000E000000EE000E00E000000E0
Input row #  2                                                       000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88041000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40918100)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 24));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 93

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   51 |   0   2 -27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   2   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _  10   _   _   _  15   _  17   _   _   _
   _   _   _   _   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   6   _   8   9   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GF0C0FFDE000C00EE0C0EDDE000C00EC

Seed (after)

EACAAAAEEDACEAAEACAAAAEDDACGAACA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000C00000000C000C
Input row #  2                                 0000000D0000000000000DD000000000
Input row #  2                       00000000E000000EE000E00E000000E0
Input row #  2                                                          G0000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88041008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600080)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40918100)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000001)), 27));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 94

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   0   3   4   5   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _  13   _   _  16   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0F0DDDF000C00FG0F0GGEC000C00EC

Seed (after)

CADAAAADDDACFAAEAFAAAACEFACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C0000000000C000C000C
Input row #  2                                 D0000DDD000000000000000000000000
Input row #  2                        0000000000000000000000E0000000E0
Input row #  2                                        000F0000F000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048108)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 95

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _  14   _   _  15   _  17   _   _   _
   _   0   3   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   4   6   _   _   _   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0F0DFDF000C00EG0F0GGDC000C00EC

Seed (after)

CADAAAADEDACFAAFAFAAAACEDACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C0000000000C000C000C
Input row #  2                                 D0000D0D00000000000000D000000000
Input row #  2                        000000000000000E00000000000000E0
Input row #  2                                        000F00F0F000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88801002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000a1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040148)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 96

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   _   _  14   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _  13   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDC000C00FG0F0GGEC000C00EE

Seed (after)

CACAAAACDDACFAAEAFAAAACEEACFAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C0000000000C000C0000
Input row #  2                                 000000DD000000000000000000000000
Input row #  2                        0000000000000000000000E0000000EE
Input row #  2                                           F0000F000000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0880110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0400000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 97

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   _   _   _   _  14   _   _  15   _  17   _   _   _
   _   _   _   4   5   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  10   _  13   _   _  16   _   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   7   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDC000F00FG0E0GGEC000C00EC

Seed (after)

CACAAAACDDAEFAAEAFAAAACEFACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C00000000000000C000C000C
Input row #  2                                 000000DD000000000000000000000000
Input row #  2                        000000000000000000E000E0000000E0
Input row #  2                                           F0000F000000F00F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8880010a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40440000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 98

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   0   3   4   _   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   8   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0G0DDGG000C00EC0E0DDFE000C00EC

Seed (after)

CADAAAADDEACEAACAEAAAADDEACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0000000000C000C
Input row #  2                                 D0000DD0000000000000DD0000000000
Input row #  2                         000000000000000E00E0000E000000E0
Input row #  2                                    0000000000000000000000F000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300061)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40848000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 99

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   4   5   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FC0C0FDDC000C00FC0G0DDGG000C00EC

Seed (after)

CACAAAACDDACFAACAFAAAADDEACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0000000000C000C
Input row #  2                                 000000DD000000000000DD0000000000
Input row #  2                         000000000000000000000000000000E0
Input row #  2                                           F0000F000000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8801110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 100

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   _   3   4   _   _   _   _   8   _  12  13   _   _   _   _   _   _
   _   _   _   _   0   _   _   _   _   _   _   _   _  10   _   _   _   _
   _  11   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0DDGG000C00DC0E0FDDC000C00FC

Seed (after)

CAFAAAADDEACFAACADAAAACDDACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000C000C000C
Input row #  2                                 00000DD00000000D00000DD000000000
Input row #  2                                        E00000000000000000E0000000000000
Input row #  2             00000000000000000000F000000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00608060)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040001)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 101

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   73 |   1   2  30   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   0   3   4   5   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0E0DDDE000C00EC0E0DDFF000C00GC

Seed (after)

CADAAAADDDACEAACAEAAAADDEACEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0000000000C000C
Input row #  2                                 D0000DDD000000000000DD0000000000
Input row #  2                                        000E0000E000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             0000000000000000000000FF00000000
Input row #  2 000000000000000000000000000000G0

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048108)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 30));
}


===========================================================================

Solution: 102

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  14   _   _  15   _  17   _   _   _
   _   0   3   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   _   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0E0DDDE000C00GC0E0GDDC000C00FC

Seed (after)

CADAAAADDDACEAACAEAAAACDDACEAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C000000C000C000C
Input row #  2                                 D0000DDD0000000000000DD000000000
Input row #  2                                        000E0000E000000000E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000F0
Input row #  2                000000000000000G0000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88811002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040108)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00108000)), 15));
}


===========================================================================

Solution: 103

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   _   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   4   5   _   _   _   _  11  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   7   _   8   _   _   _   _
   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDC000E00EC0G0DDGG000C00FC

Seed (after)

CACAAAACDDAFEAACAEAAAADDEACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C0000000C0000000000C000C
Input row #  2                                 000000DD000000000000DD0000000000
Input row #  2                                           E0000E000000E00E0000000000000000
Input row #  2            000000000000000000000000000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8801010a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x003000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009021)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 104

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   _   _   _   _   7   _   9  10   _   _   _  15   _  17   _   _   _
   _   _   3   4   _   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   _   _   _   _   _   8   _   _   _   _
   _  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0G0DDGG000C00EC0C0DDDF000C00FC

Seed (after)

CAFAAAADDFACEAACACAAAADDDACEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0000000000C000C0C00000000C000C
Input row #  2                                 00000DD0000000000000DDD000000000
Input row #  2                                           E00000000000000E0000000000000000
Input row #  2          00000000000000000000000F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88051002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700060)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008001)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 105

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _  14
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDC000C00EC0F0DDDF000C00GC

Seed (after)

CACAAAACDDACEAACAEAAAADDDACEAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0000000000C000C
Input row #  2                                 000000DD000000000000DDD000000000
Input row #  2                                           E0000E000000000E0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000F0000F00000000
Input row #  2     000000000000000000000000000000G0

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x8801110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00840000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 26));
}


===========================================================================

Solution: 106

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _   _   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDC000C00EC0E0DDDG000C00FF

Seed (after)

CACAAAACDDACEAACAEAAAADDDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C0000000000C0000
Input row #  2                                 000000DD000000000000DDD000000000
Input row #  2                                           E0000E000000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2        00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0801110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x007000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 23));
}


===========================================================================

Solution: 107

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   6   _   _   7   _   9   _  14   _   _  15   _   _   _   _   _
   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   3   _   _   _   _   8  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0EDDC000C00EC0E0GDDC000C00FF

Seed (after)

CACAAAACDDACEAACAEAAAACDDACEAAEA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C0000C000C000C000000C000C0000
Input row #  2                                 000000DD0000000000000DD000000000
Input row #  2                                           E0000E000000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0881110a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048021)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 108

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   28 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   1   2   _   _   _   _   _   _  10  14   _   _  15   _   _   _   _   _
   _   _   3   4   5   _   _   _   _   _   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   _   6   _   _   7   8   _   _   _
   _   _   _   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EC0C0DDDE000E00EG0C0GGDC000C00FF

Seed (after)

CACAAAADDDAFFAAEACAAAACEDACEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              0C0C00000000000000C0000C000C0000
Input row #  2                                 00000DDD00000000000000D000000000
Input row #  2                                              E0000000E000E00E0000000000000000
Input row #  2            000000000000000000000000000000FF

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0884000a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x004000e0)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009101)), 15));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 109

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   50 |   0   2 -26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _  14   _   _   _   _  17   _   _   _
   _   _   3   4   _   _   _   _   8   _  12  13   _   _   _   _   _   _
  10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
   _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0F0DDFF000C00DC0E0EDDC000E00EC

Seed (after)

EAEAAAADDEACEAACADAAAACDDAGGAACA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C000000C0000000C
Input row #  2                                 00000DD00000000D00000DD000000000
Input row #  2             000000000000000000E0E000000E00E0
Input row #  2                                                         GG000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F000FF00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80811000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00608060)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48140000)), 18));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 26));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 110

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _   _   _   _   _  15   _   _   _   _   _
   _   _   0   1   _   _   3   _   _   8   _   _   _  11   _   _   _   _
   5   _   _   _   9   _   _   _   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   4   6   _   _   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0DFEF000C00DE0G0DFGG000C00EE

Seed (after)

EACAAAADDEACDAAFAFAAAADEEACDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000000000000C0000
Input row #  2                                      DD000D000000000D0000D00000000000
Input row #  2                        0000000E00000000E0000000000000EE
Input row #  2                                        000000F0F000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08001008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00108023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0010080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200140)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 111

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
 4 |   78 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _  10   _   _   _  15   _   _   _   _   _
   _   _   0   1   _   _   3   6   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9   _   _   _   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0DGED000C00DE0C0DFFD000C00EE

Seed (after)

EACAAAADDEACDAADACAAAADEEACDAADA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000C00000000C0000
Input row #  2                                      DD000D00D000000D0000D00D00000000
Input row #  2                        0000000E00000000E0000000000000EE

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2              000000000000000000000FF000000000
Input row #  2                         000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08041008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908123)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0010080)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600000)), 17));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 6));
}


===========================================================================

Solution: 112

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   0   1   _   _   3   _   _   _   9   _   _  11   _   _   _   _
   4   _   _   _   _   _   _  12   _   _   _  16   _   _   _   _   _   _
   _   8   _   _  13   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0G0DEGG000C00FD0C0DEFC000C00EC

Seed (after)

EAFAAAADDFACDAAEACAAAACDEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000C0000C000C000C
Input row #  2                                      DD000D0000000000D000D00000000000
Input row #  2                         000000E00000000000000E00000000E0
Input row #  2                  000000000000000F000000F000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40200040)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00408000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 113

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   0   1   _   _   3   _   _   _   9   _   _  11   _   _   _   _
   4   _   _   _   8   _   _  12   _   _   _  16   _   _   _   _   _   _
   _  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0G0DEGG000C00ED0C0DEFC000C00EC

Seed (after)

EAFAAAADDEACDAAEACAAAACDEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000C0000C000C000C
Input row #  2                                      DD000D0000000000D000D00000000000
Input row #  2                         000000E00000000E00000E00000000E0
Input row #  2           0000000000000000000000F000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40208040)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 114

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   55 |   1   2  22   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   0   1   _   _   3   _   _   _   9   _   _  11   _   _   _   _
   4   _   _   _   8   _   _  12   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0DEFF000C00ED0C0DEGC000C00EC

Seed (after)

EACAAAADDEACDAAEACAAAACDEACDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000C0000C000C000C
Input row #  2                                      DD000D0000000000D000D00000000000
Input row #  2                         000000E00000000E00000E00000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000FF00000000000000000000000
Input row #  2         0000000000000000000000G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40208040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000180)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400000)), 22));
}


===========================================================================

Solution: 115

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   0   1   _   _   3   _   _   _   9   _   _  11   _   _   _   _
   4   6   _   _   8   _   _  12   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0F0DEFE000C00ED0C0DEGC000C00EC

Seed (after)

EAEAAAADDEACDAAEACAAAACDEACDAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C00000C0000C000C000C
Input row #  2                                      DD000D0000000000D000D00000000000
Input row #  2                         000000E0E000000E00000E00000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F000F000000000000000000000000
Input row #  2              0000000000000000000000G000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40208140)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000088)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400000)), 17));
}


===========================================================================

Solution: 116

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _  10  14   _   _  15   _  17   _   _   _
   _   _   0   1   _   _   3   6   _   _   9   _   _  11   _   _   _   _
   4   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0DEGD000C00ED0C0DFFC000C00EC

Seed (after)

EACAAAADDEACDAADACAAAACDEACDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C00000C0000C000C000C
Input row #  2                                      DD000D00D0000000D000D00000000000
Input row #  2                         000000E00000000E00000000000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2              000000000000000000000FF000000000
Input row #  2                        0000000G000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88841008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110123)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600000)), 17));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 7));
}


===========================================================================

Solution: 117

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 3 |   40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   6   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   _   _   _   1   _   _   3   _   _   8   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   0   _   4   5   _   _   _   _   _   _
  12   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
ED0C0DEEC000C00DC0G0DFGG000C00FC

Seed (after)

FACAAAACDFACDAACAEAAAADEEACDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C0000C000C000C0000000000C000C
Input row #  2                                      0D000D000000000D0000D00000000000
Input row #  2                                                E00000EE000000000000000000000000
Input row #  2          000000000000000000000F00000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011108)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00108022)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c1)), 17));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40200000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 118

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   6   _   _   _   _   _   _  14   _   _   _   _  17   _   _   _
   _   _   _   0   _   2   _   5   _   _   8   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   7   _   _   _  12  13   _   _   _   _
  10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0D0GGDC000E00DD0F0FEEC000F00FC

Seed (after)

FAFAAAACDFADFAADAEAAAACDDAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              00000000C00000000000000C0000000C
Input row #  2                                       D00D000D0000000DD000000000000000
Input row #  2                                    000000000000E00000000EE000000000
Input row #  2             000000000000000000F0F000000F00F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80800100)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018089)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00601000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48140000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 119

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   2   _   _   _   7   _   _   _  14   _   _  15   _   _   _   _   _
   _   _   8   9   _   _  11   _   _   _   _   _   _   _   _   _   _   _
   5   _   _   _   _   _   _  13   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   0   _   _   _   6   _   _   _   _  10  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FG0C0GGEF000C00DD0F0DFEC000C00EE

Seed (after)

EACAAAADDFACDAAEAFAAAACEEACFAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000C00000000C0000000000C000C0000
Input row #  2                       000000000000000DD000D00000000000
Input row #  2                        0000000E00000000000000E0000000EE
Input row #  2                                        F0000000F000000000F00F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08801008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00118000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0400080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240101)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 120

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   1   9 |    1   2   6   _   _   7   _   9  10  14   _   _  15   _  17   _   _   _
 1 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 2 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 3 |   38 |   0   2 -22   4 |    _   _   _   _   _   _   _   _   _   0   1   _   _   3   6   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   7   _   9   _   _   _   _  15   _  17   _   _   _
   4   _   _   _   _   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   8  11  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   0   1   _   _   3   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0G0FDGG000C00EC0D0EEED000C00DC

Seed (after)

DAEAAAAEEEACDAACADAAAAFFDACFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                              000000000000C000C0000000000C000C
Input row #  2                         000000D00000000000D0000D000000D0
Input row #  2                  000000000000000E0000EEE000000000
Input row #  2                                                     FF000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40840040)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00708000)), 13));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000023)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 121

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 3 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   _   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   8   9   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000D00EE0F0DFDC000D00CD

Seed (after)

CADAAAADCFAEEAADADAAAADCFADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D0000D0000000D0D0000D000D
Input row #  2                           000000000000000EE000000000000000
Input row #  2                                     000F00000000000000F00F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88501080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 122

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 3 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _  13  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _  11   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   _   8   9   _  12   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000D00EE0F0DECC000C00CD

Seed (after)

CADAAAADCFAEEAADAEAAAACCFADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C0000000000000CC000C00C0
Input row #  2                          0000000D0000D0000000D0000000000D
Input row #  2                           000000000000000EE0000E0000000000
Input row #  2                                     000F00000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c00101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80101080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00218000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 123

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   8   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000D00ED0F0DFDC000D00CD

Seed (after)

CADAAAADCFADEAADADAAAADCFADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                            000000000000000E0000000000000000
Input row #  2                                     000F00000000000000F00F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 124

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _  13  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   8  10  11   _   _  15   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _   _   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000D00ED0E0EFCC000E00CD

Seed (after)

CADAAAADCFADEAAEAEAAAACCEADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C0000000000000CC000000C0
Input row #  2                          0000000D0000D000D00000000000000D
Input row #  2                            000000000000000E00E0E000000E0000
Input row #  2                                     000F00000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c00101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08148000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200008)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 125

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _  13  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _   _   _   _   _   _  17   _   _   _   _   _
   2   _   _   _   _   _   8  10  11   _   _  15   _  16   _   _   _   _
   _   _   _   _   0   _   _   _   _   _   _   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FG0E0GGDC000D00ED0E0EFCC000E00ED

Seed (after)

EADAAAADCFADEAAEAEAAAACCEADEAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C0000000000000CC00000000
Input row #  2                          0000000D0000D000D00000000000000D
Input row #  2                            000E00000000000E00E0E000000E00E0
Input row #  2                                        F00000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48148008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200001)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 126

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   9   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   2   _   _   _   _   _   _  10   _  11   _   _   _   _   _   _
   _   _   _   _   8   _   _  12   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00FD0E0EFDC000C00CD

Seed (after)

CADAAAAECFADCAAFADAAAAECEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000C00C0
Input row #  2                          0000000D00000000D00000D00000000D
Input row #  2                                   000E00000000000000E0E00000000000
Input row #  2                         000000000000000F00000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 127

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   9   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   2   _   _   _   _   _   _  10   _  11   _   _   _   _   _   _
   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CD0E0EFDC000C00CD

Seed (after)

CADAAAAECFADCAACADAAAAECEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                          0000000D00000000D00000D00000000D
Input row #  2                                   000E00000000000000E0E00000000000
Input row #  2                   000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 128

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   9   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   2   _   3   _   _   _   _  10   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EFDC000C00CD0E0EGDC000C00CD

Seed (after)

CADAAAAECEADCAACADAAAAECEADCAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                          0000000D00000000D00000D00000000D
Input row #  2                                   000E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140028)), 4));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 129

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   _   _   _  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   1   _   _   _   6   _   8   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EEDF000D00FG0E0GGDC000C00CD

Seed (after)

CADAAAADFEAEEAAFADAAAAFCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000000000000000000C000C00C0
Input row #  2                          0000000D0000D000000000D00000000D
Input row #  2                                     000E0EE00000000000E0000000000000
Input row #  2                                      0F000000F000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48800001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040068)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008102)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 130

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00CD0E0FEDC000D00CD

Seed (after)

CADAAAADCEADFAACADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000D00000D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2                       00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88411080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 131

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   8   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00FD0E0DEDC000D00CD

Seed (after)

CADAAAAFCEADCAADADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000000C0
Input row #  2                          0000000D00000000D000D0D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2                       000000000000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88510080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 132

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _   _   _   _   _  16   _   _   _
   _   5   _   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   8   _   _   _   _  14   _   _  17   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00FD0E0EEDF000D00CF

Seed (after)

CADAAAAFCEADCAAFADAAAADFEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00000000000000000C0
Input row #  2                          0000000D00000000D00000D0000D0000
Input row #  2                                     000E00000000000000E0EE0000000000
Input row #  2                       000000000000000F0000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40001101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80808000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 133

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   7   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00CG0E0GGCC000C00CD

Seed (after)

CADAAAAECEAEEAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                          0000000D00000000000000000000000D
Input row #  2                                     0E0E0EE00000000000E0000000000000
Input row #  2                                    000000000000F0000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 134

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   7   _   _   _   _  13   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00CG0E0GGFC000D00CD

Seed (after)

CADAAAAECEAEEAACAFAAAADCEADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000000000000000000D000D
Input row #  2                                     0E0E0EE00000000000E0000000000000
Input row #  2                                    000000000000F000000000F000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00401000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 135

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   4   _   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EFDC000C00FG0F0GGDC000D00CD

Seed (after)

CADAAAAECEAECAAFADAAAADCFADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0E00000000000000000000000000
Input row #  2                                        000000F00000000F00F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0000002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048040)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 136

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   7   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00CG0E0GGDC000C00CD

Seed (after)

CADAAAAECEAEEAACADAAAAFCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D00000000000000D00000000D
Input row #  2                                     0E0E0EE00000000000E0000000000000
Input row #  2                                         000000000000F0000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 137

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   1   _   4   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EFDC000D00CG0E0GGCC000C00CD

Seed (after)

CADAAAADCEAEFAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                          0000000D0000D000000000000000000D
Input row #  2                                     000E0E000000000000E0000000000000
Input row #  2                                          0F0000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80001080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 138

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   4   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EFDC000C00CG0E0GGCC000C00CD

Seed (after)

CADAAAAECEAECAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                          0000000D00000000000000000000000D
Input row #  2                                     0E0E0E000000000000E0000000000000
Input row #  2                                          000000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 139

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   3   5   7   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0E0DFDC000D00CG0E0GGCC000C00CD

Seed (after)

DADAAAADCEAFFAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000000C000000CC000C00C0
Input row #  2                          00000D0D0000D000000000000000000D
Input row #  2                                     000E00000000000000E0000000000000
Input row #  2                                          FF0000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x800010a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 140

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   3   5   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   0   _   _   4   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FE0E0DFDC000C00CG0E0GGCC000C00CD

Seed (after)

DADAAAAECEAFCAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000C00C000000CC000C00C0
Input row #  2                          00000D0D00000000000000000000000D
Input row #  2                                     0E0E00000000000000E0000000000000
Input row #  2                                          F00000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x800000a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004000a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000041)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 141

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   7   _   _   9   _   _  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _  12   _   _  17   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00CD0E0EFDC000C00CF

Seed (after)

CADAAAADCEADFAACADAAAAFCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D0000D000D00000D000000000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                      000000000000000000000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00411080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 142

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10   _   _   _   _   _   _
   _   _   _   _   _  11  12   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00CE0E0FFDC000C00CD

Seed (after)

CADAAAADCEAFFAACADAAAAECEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D0000D000000000D00000000D
Input row #  2                                     000E000000000000E0E0000000000000
Input row #  2                      00000000000000000000FF0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 143

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   9   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CF0E0FEDC000D00CD

Seed (after)

CADAAAAFCEAFCAACADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2                      0000000000000000F000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 144

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   5   _   _   _   9   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CD0E0EFCC000C00CF

Seed (after)

CADAAAAFCEADCAACAFAAAACCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                          0000000D00000000D000000000000000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                 000000000000000000000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 145

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CD0E0FEDC000D00CD

Seed (after)

CADAAAAFCEADCAACADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000D00000D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2                  00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 146

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   8   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00FD0E0DEDC000D00CD

Seed (after)

CAFAAAACCEADCAADADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C0000000000C000000C0
Input row #  2                          0000000000000000D000D0D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2                  000000000000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88510000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 147

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   28 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00CG0E0GGDC000D00CD

Seed (after)

CADAAAAECEAEEAACADAAAADCEADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0EE00000000000E0000000000000
Input row #  2                                              000000000000F0000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 15));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 148

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CD0E0FEDC000D00CD

Seed (after)

CAFAAAACCEADCAACADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000000C0
Input row #  2                          0000000000000000D00000D0000D000D
Input row #  2                                     000E00000000000000E00E0000000000
Input row #  2             00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88410000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 149

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11  12   _   _   _   _
   _   _  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CE0E0EEDC000F00CF

Seed (after)

CADAAAAFCEAFCAACADAAAAECEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000000000D000000000
Input row #  2                                     000E000000000000E0E0EE0000000000
Input row #  2           000000000000000000000000000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 150

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00CD0E0EEDC000D00CF

Seed (after)

CADAAAADCEADFAACADAAAADCEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000D00000D0000D0000
Input row #  2                                     000E00000000000000E0EE0000000000
Input row #  2            0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08411080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 151

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   33 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EEDC000D00CG0E0GGCC000C00CD

Seed (after)

CADAAAADCEAEEAACAFAAAACCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                          0000000D0000D000000000000000000D
Input row #  2                                     000E0EE00000000000E0000000000000
Input row #  2                                               0F000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80001080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040068)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 152

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   33 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   4   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EFDC000C00CG0E0GGDC000C00CD

Seed (after)

CADAAAAECEAECAACADAAAAFCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                          0000000D00000000000000D00000000D
Input row #  2                                     0E0E0E000000000000E0000000000000
Input row #  2                                               000000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 153

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   37 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EEDC000D00CG0E0GGDC000C00CD

Seed (after)

CADAAAADCEAEEAACADAAAAFCEADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D0000D000000000D00000000D
Input row #  2                                     000E0EE00000000000E0000000000000
Input row #  2                                                    0F000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040068)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 154

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   37 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EFDC000C00CG0E0GGDC000D00CD

Seed (after)

CADAAAAECEAECAACADAAAADCEADFAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0E000000000000E0000000000000
Input row #  2                                                    000000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0004002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 155

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   7   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   9   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EEDC000D00CE0E0FFDC000C00CD

Seed (after)

CADAAAADCEAEEAACADAAAAECEADCAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D0000D000000000D00000000D
Input row #  2                                     000E0EE000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  2                              0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050068)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
}


===========================================================================

Solution: 156

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EGDC000C00CF0E0FEDC000D00CD

Seed (after)

CADAAAAECEAECAACADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0E000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000F00000000000
Input row #  2                              000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 1));
}


===========================================================================

Solution: 157

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   50 |   0   2 -26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   0   1   _   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EEDC000D00CF0E0FFDC000D00CD

Seed (after)

CADAAAADCEAEEAACADAAAADCEADGAACA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000000000D0000D000D
Input row #  2                                     000E0EE00000000000E0000000000000
Input row #  2                                                         0G000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000FF0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040068)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 26));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 158

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   9   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000G00CE0E0FFDC000C00CD

Seed (after)

CADAAAAECEAEEAACADAAAAECEADCAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000C00C0
Input row #  2                          0000000D00000000000000D00000000D
Input row #  2                                     0E0E0EE000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  2                   000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0005006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 12));
}


===========================================================================

Solution: 159

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000G00CF0E0FEDC000D00CD

Seed (after)

CADAAAAECEAEEAACADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000F00000000000
Input row #  2                        000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 7));
}


===========================================================================

Solution: 160

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EEDC000D00CF0E0FEDC000D00CD

Seed (after)

CADAAAADCEAEEAACADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000000000D0000D000D
Input row #  2                                     000E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000F00000000000
Input row #  2                                   0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240068)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 4));
}


===========================================================================

Solution: 161

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   78 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   9   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EGDC000C00CE0E0FFDC000C00CD

Seed (after)

CADAAAAECEAECAACADAAAAECEADCAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                          0000000D00000000000000D00000000D
Input row #  2                                     0E0E0E0000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  2                         000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0005002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 6));
}


===========================================================================

Solution: 162

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EFDC000C00CE0E0EEDC000G00CG

Seed (after)

CADAAAAECEAECAACADAAAAECEAEEAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000000000D000000000
Input row #  2                                     0E0E0E0000000000E0E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              000000F0000000000000000000000000
Input row #  2    000000000000000000000000000G000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0035002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
}


===========================================================================

Solution: 163

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0FEDC000D00CD0E0EEDC000D00CG

Seed (after)

CADAAAADCEADEAACADAAAADCEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000D00000D0000D0000
Input row #  2                                     000E00E00000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08411080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 164

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0FEDC000D00CD0E0GEDC000D00CD

Seed (after)

CADAAAADCEADEAACADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000D00000D0000D000D
Input row #  2                                     000E00E00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88411080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 15));
}


===========================================================================

Solution: 165

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0FFDC000C00GD0E0DEDC000D00CD

Seed (after)

CADAAAAECEADCAADADAAAADCEADEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000000C0
Input row #  2                          0000000D00000000D000D0D0000D000D
Input row #  2                                     0E0E00000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              00000FF0000000000000000000000000
Input row #  2                000000000000000G0000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88510080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024000a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000060)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 15));
}


===========================================================================

Solution: 166

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   _   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EEDC000D00GG0E0DEDC000D00CD

Seed (after)

CADAAAADCEAEEAADADAAAADCEADEAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D0000D0000000D0D0000D000D
Input row #  2                                     000E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000000000000000000000000000000
Input row #  2                    000000000000000GG000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88501080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240068)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 11));
}


===========================================================================

Solution: 167

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   _   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0FFDC000C00CD0E0GEDC000D00CD

Seed (after)

CADAAAAECEADCAACADAAAADCEADEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000D00000D0000D000D
Input row #  2                                     0E0E00000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              00000FF0000000000000000000000000
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024000a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000060)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 168

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   67 |   0   2  24   1 |    _   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0FFDC000C00CD0E0EEDC000D00CG

Seed (after)

CADAAAAGCEADCAACADAAAADCEAEEAACA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000D00000D0000D0000
Input row #  2                                     000E00000000000000E0EE0000000000
Input row #  2       0000000000000000000000000000000G

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 24));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 169

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   1   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0FFDC000C00CD0E0EEDC000D00CG

Seed (after)

CADAAAAECEADCAACADAAAADCEAEEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                          0000000D00000000D00000D0000D0000
Input row #  2                                     0E0E00000000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              00000FF0000000000000000000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08410080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0034000a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000060)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 170

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   75 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0FEDC000D00GD0E0DEDC000D00CD

Seed (after)

CADAAAADCEADEAADADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                                     000E00E00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                     000000000000000G0000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 10));
}


===========================================================================

Solution: 171

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   83 |   0   2  29   1 |    _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0FFCC000C00CD0E0EEDC000D00CG

Seed (after)

CAGAAAACCEADCAACADAAAADCEAEEAACA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000000C0
Input row #  2                          0000000000000000D00000D0000D0000
Input row #  2                                     000E00000000000000E0EE0000000000
Input row #  2  0000000000000000000000000000000G

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08410000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 29));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 172

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000G00CE0E0EEDC000F00CF

Seed (after)

CADAAAAECEAEEAACADAAAAECEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D00000000000000D000000000
Input row #  2                                     0E0E0EE000000000E0E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                        000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0035006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 7));
}


===========================================================================

Solution: 173

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   _   _   _  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EEDC000D00CE0E0EEDC000F00CF

Seed (after)

CADAAAADCEAEEAACADAAAAECEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D0000D000000000D000000000
Input row #  2                                     000E0EE000000000E0E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                                   0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00401080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350068)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 4));
}


===========================================================================

Solution: 174

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000G00CG0E0EEDC000D00CF

Seed (after)

CADAAAAECEAEEAACADAAAADCEAEEAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D0000
Input row #  2                                     0E0E0EE00000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     0000000000000000000000000000000F
Input row #  2                   000000000000G000G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0034006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011000)), 12));
}


===========================================================================

Solution: 175

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
 4 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000G00CG0E0FEDC000D00CD

Seed (after)

CADAAAAECEAEEAACADAAAADCEADEAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                     0E0E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                00000000000000000000F00000000000
Input row #  2                   000000000000G000G000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011000)), 12));
}


===========================================================================

Solution: 176

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
 4 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GG0E0DEDC000D00FD0E0DEDC000D00CD

Seed (after)

DADAAAADCEADEAADADAAAADCEADEAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C000000C0
Input row #  2                          00000D0D0000D000D000D0D0000D000D
Input row #  2                                     000E00E00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                000000000000000F0000000000000000
Input row #  2                                   GG000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x885110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
}


===========================================================================

Solution: 177

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
 4 |   59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00GG0E0DEDC000D00CD

Seed (after)

CADAAAAECEAEEAADADAAAADCEADEAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D000000000000D0D0000D000D
Input row #  2                                     0E0E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                   000000000000F0000000000000000000
Input row #  2                    000000000000000GG000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88500080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 12));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 11));
}


===========================================================================

Solution: 178

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   58 |   1   2  12   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
 4 |   75 |   1   2  10   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EEDC000F00GF0E0DEDC000D00CD

Seed (after)

CADAAAAECEAEEAADADAAAADCEADEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D000000000000D0D0000D000D
Input row #  2                                     0E0E0EE00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                   000000000000F000F000000000000000
Input row #  2                     000000000000000G0000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88500080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024006a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011000)), 12));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008000)), 10));
}


===========================================================================

Solution: 179

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   59 |   1   2  11   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
 4 |   78 |   1   2   6   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   9
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EGDC000C00FF0E0DEDC000D00CD

Seed (after)

CADAAAAECEAECAADADAAAADCEADEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000000C0
Input row #  2                          0000000D000000000000D0D0000D000D
Input row #  2                                     0E0E0E000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                    000000000000000FF000000000000000
Input row #  2                         000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88500080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0024002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018000)), 11));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 6));
}


===========================================================================

Solution: 180

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
 4 |   65 |   1   2  20   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0E0DEDC000D00CD0E0GEDC000D00CD

Seed (after)

DADAAAADCEADEAACADAAAADCEADEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000000C0000000C000000C0
Input row #  2                          00000D0D0000D000D00000D0000D000D
Input row #  2                                     000E00E00000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                   FF000000000000000000000000000000
Input row #  2           00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x884110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 20));
}


===========================================================================

Solution: 181

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   64 |   1   2  -4   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
 4 |   70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   9   _   _  13  15   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   4   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   1
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0E0DEDC000D00CD0E0EEDC000D00CG

Seed (after)

DADAAAADCEADEAACADAAAADCEAEEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000000C0000000C000000C0
Input row #  2                          00000D0D0000D000D00000D0000D0000
Input row #  2                                     000E00E00000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                   FF000000000000000000000000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x084110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340048)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000003)), 4));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 182

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _  13   _   _   _  15  16   _   _   _
   _   5   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   8   9  10   _   _   _   _   _
   _   _  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00EE0E0DFCF000C00CF

Seed (after)

CADAAAAFCFAECAADAFAAAACEEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C000000000C0000C00C0
Input row #  2                          0000000D000000000000D00000000000
Input row #  2                                       000E00000000000EE0E0000000000000
Input row #  2                 000000000000000000000F0F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48401101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00058008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a00000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 183

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   _   _  10  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000D00ED0F0DFDC000D00ED

Seed (after)

CADAAAADCEADFAADADAAAADCEADFAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C00000000
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                         000000000000000E00000000000000E0
Input row #  2                                        000F00000000000000F00F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240008)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 184

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   4   _   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   1   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0E0DEDC000D00EG0E0GGDC000D00CD

Seed (after)

DADAAAADCEAFEAAEADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C000000C0
Input row #  2                          00000D0D0000D000000000D0000D000D
Input row #  2                                        E00E00E00000000E00E0000000000000
Input row #  2                                         0F000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x884010a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048049)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 185

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _  11   _  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   8   _  10  12   _   _   _
   _   _   _   _  13   _   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00ED0E0DEFC000D00FD

Seed (after)

CADAAAADCFADEAADAFAAAADCEADEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C00000000
Input row #  2                          0000000D0000D000D000D000000D000D
Input row #  2                                        000E00000000000E00E00E0000000000
Input row #  2                  0000000000000000000000F0000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88111080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248008)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 186

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   24 |   0   2  13   5 |    _   8  11  12  13   _   _   _  16   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _  11   _  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _  10   _   _   _   _
   _   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDE000D00ED0E0DFFC000D00CD

Seed (after)

CADAAAADFFADEAADAEAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000000000000000000C000000C0
Input row #  2                          0000000D0000D000D000D000000D000D
Input row #  2                                        000E0000E000000E00E0000000000000
Input row #  2                  000000000000000000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88111080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048108)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00600000)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 187

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   8   _  10   _   _   _   _
   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00ED0E0DFDC000D00CD

Seed (after)

CADAAAADCFADEAADADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                                        000E00000000000E00E0000000000000
Input row #  2                   000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048008)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 188

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   _   _  13  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _   _   _   _   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   8   _  10   _   _   _   _
   _   _   _  11  12   _   _  15   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDE000D00ED0E0FFCC000F00CD

Seed (after)

CADAAAADFFADEAAFAEAAAACCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000000000000000000CC000000C0
Input row #  2                          0000000D0000D000D00000000000000D
Input row #  2                                        000E0000E000000E00E0000000000000
Input row #  2                   00000000000000000000FF00000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c00001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80011080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048108)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08300000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 189

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   8   _  10  12   _   _   _
   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000D00ED0E0DEDC000D00FD

Seed (after)

CADAAAADCFADEAADADAAAADCEADEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C00000000
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                                        000E00000000000E00E00E0000000000
Input row #  2          000000000000000000000000000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248008)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 190

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   40 |   0   2  21   3 |   12  14   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   8   _  10   _   _   _   _
  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0E0GGDC000D00ED0E0DFDC000D00CD

Seed (after)

FADAAAADCEADEAADADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C000000C0
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                                        E00E00000000000E00E0000000000000
Input row #  2          000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048009)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 191

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   43 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _  11   _  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   _   6   _   _   8   _  10  12   _   _   _
  13   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0E0GGDE000D00ED0E0DEFC000D00FD

Seed (after)

FADAAAADFEADEAADAEAAAADCEADEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000000000000000000C00000000
Input row #  2                          0000000D0000D000D000D000000D000D
Input row #  2                                        E00E0000E000000E00E00E0000000000
Input row #  2         0000000000000000000000F0000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88111080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248109)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400000)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 192

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   9   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   4   _   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0E0DEDC000D00ED0E0FFDC000D00CD

Seed (after)

DADAAAADCEADEAAEADAAAADCEADEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C000000C0
Input row #  2                          00000D0D0000D000D00000D0000D000D
Input row #  2                                        E00E00E00000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  2                              0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x884110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048049)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
}


===========================================================================

Solution: 193

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   8   _  10  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0E0DFDC000D00ED0E0DEDC000D00GD

Seed (after)

DADAAAADCEADEAADADAAAADCEADEAAEA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C00000000
Input row #  2                          00000D0D0000D000D000D0D0000D000D
Input row #  2                                        E00E00000000000E00E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2     000000000000000000000000000000G0

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x885110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248009)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 26));
}


===========================================================================

Solution: 194

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   8   _  10   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0E0DFDC000D00ED0E0DGDC000D00CD

Seed (after)

DADAAAADCEADEAADADAAAADCEADEAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C000000C0
Input row #  2                          00000D0D0000D000D000D0D0000D000D
Input row #  2                                        E00E00000000000E00E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x885110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048009)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 195

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   81 |   0   2  30   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _
   _   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   8   _  10  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EF0E0FFDC000D00ED0E0DEDC000D00GD

Seed (after)

GADAAAADCEADEAADADAAAADCEADEAAEA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C00000000000000C00000000
Input row #  2                          0000000D0000D000D000D0D0000D000D
Input row #  2                                        E00E00000000000E00E00E0000000000
Input row #  2 000000000000000000000000000000G0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88511080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248009)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 30));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 196

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   _   _   _  14   _   _   _  16   _   _   _
   _   5   _   _   _   _   _   _  13  15   _   _  17   _   _   _   _   _
   _   _   _   _   _   _   _   2   _   _   _   7   _   8   _   _   _   _
   _   _   9   _  10  11  12   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000E00EF0F0FFDC000D00CD

Seed (after)

CADAAAAFCFAFFAAEADAAAADCEADEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C00000000000000C000000C0
Input row #  2                          0000000D00000000000000D0000D000D
Input row #  2                                           000E00000000E00E0000000000000000
Input row #  2                      0000000000000000F0F0FF0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00009008)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 197

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   5   6   _   _   _   _   _  13  14   _   _   _  16   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _
   2   3   _   _   7   _   _  10   _   _   _  15   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0E0EFCC000E00FG0E0GGCC000E00CD

Seed (after)

EAEAAAACCEAFFAAEAFAAAACCEAFDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               0000000CC0000000000000CC000000C0
Input row #  2                           0000000000000000000000000000000D
Input row #  2                            000E0E000000E00000E00000000E0000
Input row #  2                                          FF0000F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08041028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 198

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 3 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   8   _   _   _   _  15   _  16  17   _   _   _   _
   _   1   4   5   6   _   _   _   _   _   _  14   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   3   _   _   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0F0FEEE000C00DG0F0GGCE000D00DD

Seed (after)

CAEAAAAEEEADCAAFAFAAAACDEADDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C000000000C000000000
Input row #  2                           000000000000000D00000000000D00DD
Input row #  2                                0E0000EEE00000000000000E00000000
Input row #  2                                           000F0F000000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00401001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8008000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x008001c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040028)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 199

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _   _
   _   _   _   7   _   _   9   _   _   _  15   _   _  17   _   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   6   _   _   8   _   _  12  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEF000D00FD0E0EFEF000D00CD

Seed (after)

CAFAAAAEDFAEDAAFAFAAAAEDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000000000000000000C0
Input row #  2                           000000000000D000D0000000000D000D
Input row #  2                                   000E000E0000000000E0E0E000000000
Input row #  2                         00000000F000000F00000F0F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08100)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 200

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   _   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00CF0E0EDEF000D00CD

Seed (after)

CAFAAAAECFAECAACADAAAAEDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000000C0
Input row #  2                           000000000000000000000D00000D000D
Input row #  2                                   000E000E0000000000E0E0E000000000
Input row #  2                 0000000000000000F000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 201

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _
   _   _   _   7   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   2   _   _   5   6   _   _  10   _  11  13   _   _   _   _   _
   _   9   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEE000D00CF0E0EDEF000D00CD

Seed (after)

CAFAAAAEDFAEEAACADAAAAEDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C00000000000000C0
Input row #  2                           000000000000D00000000D00000D000D
Input row #  2                                   000E000EE000000000E0E0E000000000
Input row #  2                 0000000000000000F000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40008001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88201000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540188)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 202

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   _   _  13   _   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _   _   _  15   _   _  17   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   8   _   _  12  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000D00FD0E0EFCF000D00CD

Seed (after)

CADAAAAEDFAEDAAFAFAAAACDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000000000000000000C0000000C0
Input row #  2                           000000D00000D000D0000000000D000D
Input row #  2                                     0E000E000000000000E0E00000000000
Input row #  2                         000000000000000F00000F0F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 203

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   _   _   _   _   _   _  13   _   _   _   _  16   _   _   _
   _   _   _   7   _   8   9   _   _   _  15   _   _  17   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   6   _   _   _   _   _  12  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCF000D00DD0E0EFCF000D00CD

Seed (after)

CAFAAAACDEADDAAFAFAAAACDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000C00000000000000C0000000C0
Input row #  2                           000000000000D00DD0000000000D000D
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                         00000000F000000000000F0F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40400081)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88019000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a00100)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 204

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000D00CD0E0EDCF000D00CD

Seed (after)

CADAAAAEDFAEDAACADAAAACDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000C0000000C0
Input row #  2                           000000D00000D000D0000D00000D000D
Input row #  2                                     0E000E000000000000E0E00000000000
Input row #  2                 00000000000000000000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 205

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _   _   _  15   _   _   _   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000D00CD0E0EECF000D00CF

Seed (after)

CADAAAAEDFAEDAACAFAAAACDEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000C0000000C0
Input row #  2                           000000D00000D000D0000000000D0000
Input row #  2                                     0E000E000000000000E0EE0000000000
Input row #  2                 00000000000000000000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08011040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80800000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 206

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   _   3   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _  13  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000C00CE0E0EDFF000D00CD

Seed (after)

CADAAAAEFFAECAACADAAAAEDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C00000000000000C0
Input row #  2                           000000D00000000000000D00000D000D
Input row #  2                                     0E000E0000000000E0E0E00000000000
Input row #  2                 0000000000000000000000FF00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 207

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _   _   _  15   _   _   _   _   _   _   _
   _   _   1   _   _   3   _   _   _   9   _  10  11  12   _   _   _   _
   _   _   _  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000C00CE0E0EEFF000D00CF

Seed (after)

CADAAAAEFFAECAACAFAAAAEDEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C00000000000000C0
Input row #  2                           000000D00000000000000000000D0000
Input row #  2                                     0E000E0000000000E0E0EE0000000000
Input row #  2                 0000000000000000000000FF0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80c00000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 208

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   _   _   7   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   _   3   4   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EEGG000D00CF0E0EDCF000D00CD

Seed (after)

CAFAAAAEDFAEEAACADAAAACDEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000C0000000C0
Input row #  2                           000000000000D00000000D00000D000D
Input row #  2                                     0E000EE00000000000E0E00000000000
Input row #  2                 0000000000000000F000000F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88201000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140062)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 209

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   _   _   7   _   _   _   _   _   _  15   _   _   _   _   _   _   _
   _   _   1   _   _   3   4   _   _   _   _  10  11  12   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EEGG000D00CF0E0EECF000D00CF

Seed (after)

CAFAAAAEDFAEEAACAFAAAACDEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000C0000000C0
Input row #  2                           000000000000D00000000000000D0000
Input row #  2                                     0E000EE00000000000E0EE0000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08001000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340062)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 210

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   _   _   _   _   _   9   _   _   _   _   _   _  17   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   7   _   _   _  12   _   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000F00CD0E0EFCC000F00CD

Seed (after)

CAFAAAACCEAFDAACAFAAAACCEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C000000CC000000C0
Input row #  2                           0000000000000000D00000000000000D
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                     000000000000F00000000F00000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08201000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 211

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11   _   _   _   _   _
   _   7   _   _   _  12  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000F00CE0E0EFFC000F00CD

Seed (after)

CAFAAAACCEAFFAACAFAAAAECEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C0000000C000000C0
Input row #  2                           0000000000000000000000000000000D
Input row #  2                                     000E000000000000E0E0E00000000000
Input row #  2                     000000000000F00000000FF0000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08601000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 212

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _  12   _   _   _   _  17   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000D00CD0E0EDCC000F00CD

Seed (after)

CADAAAAEDFAEDAACADAAAACCEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000CC000000C0
Input row #  2                           000000D00000D000D0000D000000000D
Input row #  2                                     0E000E000000000000E0E00000000000
Input row #  2             000000000000000000000000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 213

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11   _   _   _   _   _
   _  13   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CE0E0EDFC000C00CF

Seed (after)

CAFAAAACCEAFCAACADAAAAECEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000C00C0
Input row #  2                           000000000000000000000D0000000000
Input row #  2                                     000E000000000000E0E0E00000000000
Input row #  2           0000000000000000000000F00000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 214

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   34 |   0   2 -17   4 |    _   _   _   _   _   _   _   _   0   3   4   5   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   9   _   _  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   5   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFC000C00CE0G0EDGG000D00CD

Seed (after)

CADAAAAECEAECAACADAAAAEDFAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000000C0
Input row #  2                           000000D00000000000000D00000D000D
Input row #  2                                     0E0E0E0000000000E000E00000000000
Input row #  2                                                0000000F000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0011002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 215

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   39 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   _   2   3   _   _   _   9   _   _  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0E0EDCC000C00CE0G0EDGG000D00CD

Seed (after)

CADAAAACCEAECAACADAAAAEDFAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C00000000000000C0
Input row #  2                           000000D00000000000000D00000D000D
Input row #  2                                     000E0E0000000000E000E00000000000
Input row #  2                                                      0F000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 23));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 216

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   43 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   4   _   7   _   _   9   _  12   _   _   _   _   _   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000D00CD0E0EDCC000C00CF

Seed (after)

CADAAAAEDFAEDAACADAAAACCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000CC000C00C0
Input row #  2                           000000D00000D000D0000D0000000000
Input row #  2                                     0E000E000000000000E0E00000000000
Input row #  2         0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 217

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   _   2   3   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EDCC000C00CE0E0EDFF000D00CD

Seed (after)

CADAAAACCEAECAACADAAAAEDEAEDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C00000000000000C0
Input row #  2                           000000D00000000000000D00000D000D
Input row #  2                                     000E0E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             0000000000000000000000FF00000000
Input row #  2                              0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150028)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
}


===========================================================================

Solution: 218

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  14
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDGC000C00CE0E0EDFF000D00CD

Seed (after)

CADAAAAECEAECAACADAAAAEDEAEDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000000C0
Input row #  2                           000000D00000000000000D00000D000D
Input row #  2                                     0E0E0E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             0000000000000000000000FF00000000
Input row #  2                        0000000G000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0015002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 7));
}


===========================================================================

Solution: 219

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _  12   _   _   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFF000D00CD0E0EDCC000G00CD

Seed (after)

CADAAAAEDEAEDAACADAAAACCEAEDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000CC000000C0
Input row #  2                           000000D00000D000D0000D000000000D
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000FF00000000000000000000000
Input row #  2    000000000000000000000000000G0000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000180)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 27));
}


===========================================================================

Solution: 220

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   4   _   7   _   _   9   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFF000D00CD0E0EDCG000D00CD

Seed (after)

CADAAAAEDEAEDAACADAAAACDEAEDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000C0000000C0
Input row #  2                           000000D00000D000D0000D00000D000D
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000FF00000000000000000000000
Input row #  2        00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000180)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 23));
}


===========================================================================

Solution: 221

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   55 |   1   2  22   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _   _   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFC000C00CE0E0EDGC000G00CD

Seed (after)

CADAAAAECEAECAACADAAAAECEAEDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                           000000D00000000000000D000000000D
Input row #  2                                     0E0E0E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000F000000000000000000000000
Input row #  2         0000000000000000000000G0000G0000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0015002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08400000)), 22));
}


===========================================================================

Solution: 222

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   4   _   7   _   _   9   _  12   _   _   _   _   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFF000D00CD0E0EDCC000C00CG

Seed (after)

CADAAAAEDEAEDAACADAAAACCEAECAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000CC000C00C0
Input row #  2                           000000D00000D000D0000D0000000000
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000FF00000000000000000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00211040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000180)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 223

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   4   _   _   _   _   9   _  12   _   _   _   _   _   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDGC000G00CD0E0EDCC000C00CF

Seed (after)

CADAAAAECEAEDAACADAAAACCEAECAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                           000000D000000000D0000D0000000000
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    0000000000000000000000000000000F
Input row #  2                        0000000G0000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00210040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
}


===========================================================================

Solution: 224

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   4   _   _   _   _   9   _  12   _   _   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDGC000G00CD0E0EDCC000F00CD

Seed (after)

CADAAAAECEAEDAACADAAAACCEAEDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000000C0
Input row #  2                           000000D000000000D0000D000000000D
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2        000000000000000000000000000F0000
Input row #  2                        0000000G0000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 23));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
}


===========================================================================

Solution: 225

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   55 |   1   2  22   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15
 4 |   87 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   4   _   _   _   _   _   _  12   _   _   _   _  17   _   _   _   _
   _   _   _   _   2   3   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13   _  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0EDCC000C00CE0E0EDFC000F00CD

Seed (after)

CADAAAACCEAECAACADAAAAECEAEDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000000C0
Input row #  2                           000000D00000000000000D000000000D
Input row #  2                                     000E0E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2         0000000000000000000000F0000F0000
Input row #  2                                  0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150028)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08400000)), 22));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 3));
}


===========================================================================

Solution: 226

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
 4 |   66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13   _   _   _   _  16   _   _   _
   _   4   _   _   _   _   9   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0EDFC000F00CD0E0EDCG000D00CD

Seed (after)

CADAAAAECEAEDAACADAAAACDEAEDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000C0000000C0
Input row #  2                           000000D000000000D0000D00000D000D
Input row #  2                                     0E0E0E000000000000E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                        0000000F0000F0000000000000000000
Input row #  2            00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40408101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88210040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 19));
}


===========================================================================

Solution: 227

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   _   _   _   _   _   _   _  12   _   _   _   _  17   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   9  10   _   _   _   _   _
   _  11   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CE0E0FDCC000F00CD

Seed (after)

CAFAAAACCFAECAACADAAAACCEAEDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000000C0
Input row #  2                           000000000000000000000D000000000D
Input row #  2                                       000E000000000000E0E0000000000000
Input row #  2             00000000000000000000F000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 228

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   19 |   0   2 -12   6 |    _   _   _   _   _   _   0   2   3   _   _   7   _   8  10   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   _   _  13  14   _   _   _   _   _   _   _
   _   _   _   _   _   8   9   _  12   _   _   _  16  17   _   _   _   _
   _   _   _   _   _   _   _   2   _   _   _   7   _   _  10   _   _   _
   _  11   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000E00DD0E0FDCC000F00DD

Seed (after)

CAFAAAACCFADDAAEADAAAACCEADDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC0000000000000CC00000000
Input row #  2                           000000000000000DD0000D00000000DD
Input row #  2                                           000E00000000E00000E0000000000000
Input row #  2             00000000000000000000F000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0218000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00041008)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 229

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   7   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   9  10   _   _   _   _   _
   _  12   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000D00CE0E0DFCC000C00CF

Seed (after)

CAFAAAACCDAEFAACADAAAACCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C000000CC000C00C0
Input row #  2                            000000000000D0000000D00000000000
Input row #  2                                       000E000000000000E0E0000000000000
Input row #  2            000000000000000000000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00101000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00050008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 230

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   5   6   _   _   _   _   _  13  14   _   _  15  16   _   _   _
   2   3   _   _   7   _   _  10   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0DFCC000D00FG0D0GGCC000C00CE

Seed (after)

DADAAAACCDAFFAADAFAAAACCEAFCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               0000000CC0000000000000CC000C00C0
Input row #  2                            000D0D000000D00000D0000000000000
Input row #  2                        0000000000000000000000000000000E
Input row #  2                                          FF0000F00000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00041028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 231

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   5   6   _   _   _   _   _  13  14   _   _   _  16   _   _   _
   2   _   _   _   7   _   _  10  11   _   _  15   _   _   _   _   _   _
   _   _   _   _   _   0   _   _   _   _   _   _   8   9   _   _   _   _
   _  12   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGCC000D00EE0D0DFCC000D00CF

Seed (after)

DAFAAAACCDAEFAADADAAAACCDAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               0000000CC0000000000000CC000000C0
Input row #  2                            000D00000000D00000D0D000000D0000
Input row #  2                                          E00000000000000EE000000000000000
Input row #  2            000000000000000000000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08141008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018001)), 11));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80200000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 232

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   18 |   0   2 -11   6 |    _   _   _   _   _   0   1   _   4   _   7   _   8   9   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   5   6   _   _   _   _   _  13  14   _   _   _  16   _   _   _
   2   3   _   _   7   _   _  10   _   _   _  15   _   _   _   _   _   _
   _   _   _   _   _   0   1   _   4   _   _   _   8   9   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EE0D0DECC000D00EE0D0FFCC000D00CG

Seed (after)

DADAAAACCDAEEAADAEAAAACCDAEEAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               0000000CC0000000000000CC000000C0
Input row #  2                            000D0D000000D00000D00000000D0000
Input row #  2                                          EE0000E00000000EE000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c00180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08041028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018043)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 233

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _   _   _   _   _  15  16   _   _   _
   _   1   4   _   _   _   _   _   9   _  13   _   _   _   _   _   _   _
   _   _   _   3   _   _   _   _   _   _   _  12  14   _   _   _   _   _
   _   _   _   _  10  11   _   _   _  17   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0G0EDGG000C00CD0F0FEDE000C00CF

Seed (after)

CADAAAADEFAFCAACADAAAAFDEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C00000000000C00C0
Input row #  2                                0D0000D000000000D00000D000000000
Input row #  2                                  00000E000000000000000E0E00000000
Input row #  2                      000000000000000000F0F0000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00410042)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a00020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80140000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 234

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   9  12   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _  13   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CD0E0EDFC000C00CF

Seed (after)

CAFAAAACCEAFCAACADAAAADCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000C00C0
Input row #  2                                0000000000000000D0000D0000000000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2           0000000000000000000000F00000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00210000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 235

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   1   4   5   _   _   _   _   9   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0E0EDDF000C00CD0E0EECC000G00CG

Seed (after)

CADAAAADDEAECAACADAAAACCEAEEAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C000000CC000000C0
Input row #  2                                0D0000DD00000000D000000000000000
Input row #  2                                     000E0E000000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            00000000F00000000000000000000000
Input row #  2    000000000000000000000000000G000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000100c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340028)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000100)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
}


===========================================================================

Solution: 236

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0E0EFCC000C00CD0E0EECC000G00CG

Seed (after)

CADAAAACCEAECAACADAAAACCEAEEAACA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000000C0
Input row #  2                                0D00000000000000D000000000000000
Input row #  2                                     000E0E000000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              000000F0000000000000000000000000
Input row #  2    000000000000000000000000000G000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340028)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
}


===========================================================================

Solution: 237

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0E0EECC000G00CD0E0EECC000F00CF

Seed (after)

CADAAAACCEAEEAACADAAAACCEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C000000CC000000C0
Input row #  2                                0D00000000000000D000000000000000
Input row #  2                                     000E0EE00000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                        000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010002)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340068)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 7));
}


===========================================================================

Solution: 238

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   1   4   _   _   _   _   _   9   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0E0EDGC000C00CD0E0EECC000F00CF

Seed (after)

CADAAAADCEAECAACADAAAACCEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000000C0
Input row #  2                                0D0000D000000000D000000000000000
Input row #  2                                     000E0E000000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                             0000000G000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010042)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340028)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 2));
}


===========================================================================

Solution: 239

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   86 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   1   4   5   6   _   _   _   9   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0G0EDDD000C00CD0E0EECC000F00CF

Seed (after)

CADAAAADDDAECAACADAAAACCEAEEAACA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C000000CC000000C0
Input row #  2                                0D0000DDD0000000D000000000000000
Input row #  2                                     00000E000000000000E0EE0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                                 000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000101c2)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340020)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 2));
}


===========================================================================

Solution: 240

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   7   _   _   _   _   _   _   _  16   _   _   _
   _   0   _   _   5   _   _   _   8   _  12   _   _   _   _   _   _   _
   _   _   2   _   _   _   _   _   _  10   _  11  13  14   _   _   _   _
   9   _   _   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGDC000C00DF0E0EDEE000F00CF

Seed (after)

FADAAAAECDAFCAAFADAAAAEDEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000C00000000000000000C0
Input row #  2                                 D000000D0000000D00000D0000000000
Input row #  2                                   000E00000000000000E0E0EE00000000
Input row #  2               0000000000000000F0000000000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40001100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00d40008)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88010000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 241

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00CF0E0EDEF000C00CF

Seed (after)

CAFAAAAECFAECAACAFAAAAEDEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000C00C0
Input row #  2                                 000000000000000000000D0000000000
Input row #  2                                   000E000E0000000000E0E0E000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 242

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   _   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   _   _   _   _   8   _   _  13   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   9   _   _  11  12   _   _   _   _
   _  10   _   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00DE0F0EEDC000F00CF

Seed (after)

CAFAAAACCEAFCAAFADAAAAECDAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C0000000000C000000C0
Input row #  2                                 000000000000000D000000D000000000
Input row #  2                                     000E000000000000E000EE0000000000
Input row #  2               000000000000000000F00000000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40801181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00408000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88040000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 243

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   5   6   _   _   7   _   _  13  14   _   _   _  16   _   _   _
   _   0   _   _   _   _   _   _   8   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   9   _   _   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGCC000C00DF0E0EECC000F00CF

Seed (after)

FADAAAACCEAFCAAFADAAAACCEAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               0000000CC000C000000000CC000000C0
Input row #  2                                 D00000000000000D0000000000000000
Input row #  2                                     000E00000000000000E0EE0000000000
Input row #  2               0000000000000000F0000000000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c01180)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008001)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88010000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 244

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   8   _  13   _   _   _  15  16   _   _   _
   _   _   _   4   _   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   1   _   _   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EDGG000C00CF0E0EDCF000C00CF

Seed (after)

CAFAAAAEDFAECAACAFAAAACDEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00C000000C0000C00C0
Input row #  2                                 000000D00000000000000D0000000000
Input row #  2                                     0E000E000000000000E0E00000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48409001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140022)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 245

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   6   _   _   7   _   _   _   _   _   _  15  16   _   _   _
   _   0   _   _   5   _   _   _   8  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _
   9   _  14   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGDC000C00DF0E0DDDF000C00CF

Seed (after)

FADAAAAFCDAECAAFADAAAADDDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               00000000C000C00000000000000C00C0
Input row #  2                                 D000000D0000000D0000DDD000000000
Input row #  2                                       000E00000000000000E0000000000000
Input row #  2               0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001100)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00708081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 246

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _  11  12  13   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CF0E0DDDF000C00CF

Seed (after)

CAFAAAACCFAECAACAFAAAADDDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C00000000000C00C0
Input row #  2                                 00000000000000000000DDD000000000
Input row #  2                                       000E00000000000000E0000000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00700000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 247

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   5   _   _   _   _  11   _  13   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CF0E0DFDC000C00CF

Seed (after)

CAFAAAAFCDAECAACAFAAAADCDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                                 0000000D000000000000D0D000000000
Input row #  2                                       000E00000000000000E0000000000000
Input row #  2                 0000000000000000F0000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500080)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 248

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _  11   _  13   _   _   _   _   _   _
   _   _   _   _   _   2   _   5   _   _   8   _  10   _   _   _   _   _
   _   9  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00EF0E0DFDF000C00CF

Seed (after)

CAFAAAAFCFAECAAEAFAAAADEDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00000000000000C00C0
Input row #  2                                 00000000000000000000D0D000000000
Input row #  2                                       000E000E0000000E00E0000000000000
Input row #  2                 0000000000000000F0000F0F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048088)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 249

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 2 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _   _  11  12   _   _   _   _   _   _
   _   _   2   _   _   5   _   _   _  10   _   _  13   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00CF0E0DDEF000C00CF

Seed (after)

CAFAAAAECFAECAACAFAAAAEDDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000C00C0
Input row #  2                                  00000000000000000000DD0000000000
Input row #  2                                   000E000E0000000000E000E000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00440088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 250

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _   _  11  12   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGCC000C00CF0E0DDCF000C00CF

Seed (after)

CAFAAAACCFAECAACAFAAAACDDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000C0000C00C0
Input row #  2                                  00000000000000000000DD0000000000
Input row #  2                                       000E00000000000000E0000000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48409181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 251

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   _   5   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CF0E0EFCC000C00CF

Seed (after)

CAFAAAAFCEADCAACAFAAAACCEAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                                   0000000D000000000000000000000000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                 0000000000000000F0000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 252

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   _   _   _   2   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000C00CF0D0DFDC000C00CF

Seed (after)

CAFAAAAFCEADCAACAFAAAADCDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                                   0000000D0000000000D0D0D000000000
Input row #  2                                     000E0000000000000000000000000000
Input row #  2                 0000000000000000F0000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 253

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _  13   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   2   _   5   _   _   8   _  10   _   _   _   _   _
   _   9  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00EF0E0DFCF000C00CF

Seed (after)

CAFAAAAFCFAECAAEAFAAAACEDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C000000000C0000C00C0
Input row #  2                                   00000000000000000000D00000000000
Input row #  2                                       000E000E0000000E00E0000000000000
Input row #  2                 0000000000000000F0000F0F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48401101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00048088)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 254

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _  10   _  11  13   _   _   _   _   _
   _   _   _   _   _   2   _   5   _   _   8   _   _   _   _   _   _   _
   _   9  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00EF0D0DFDF000C00CF

Seed (after)

CAFAAAAFCFAECAAEAFAAAADEDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00000000000000C00C0
Input row #  2                                   000000000000000000D0D0D000000000
Input row #  2                                       000E000E0000000E0000000000000000
Input row #  2                 0000000000000000F0000F0F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008088)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 255

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   7   _   _   _   _   _   _  15  16   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   _   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _
   _   6   _   _   8   _   _  12  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGDF000C00FE0D0DFDF000C00CE

Seed (after)

CAFAAAADEFADCAAFAFAAAADEDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000C00000000000000C00C0
Input row #  2                                   000D000D0000000000D0D0D000000000
Input row #  2                       0000000000000000E00000000000000E
Input row #  2                         00000000F000000F00000F0F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a08100)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 256

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _   _  14   _   _  15  16   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   _   _   _   8   _   _  12   _   _   _   _   _   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGDC000C00EF0D0DEDC000C00CF

Seed (after)

CAFAAAADCEADCAAEAFAAAADCDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C0000000000C000C00C0
Input row #  2                                   000D000D0000000000D0D0D000000000
Input row #  2                         000000000000000E00000E0000000000
Input row #  2                 0000000000000000F00000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48801101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 257

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13   _   _   _  15  16   _   _   _
   _   _   2   _   _   5   _   _   _   _   _  11   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _  10   _  12   _   _   _   _   _
   _   9   _   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGDC000C00CF0E0DECF000C00CF

Seed (after)

CAFAAAADCFADCAACAFAAAACEDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000C0000C00C0
Input row #  2                                   000D000D000000000000D00000000000
Input row #  2                                    000000000000000000E00E0000000000
Input row #  2                 0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48409101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 258

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   2   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGDC000C00CE0D0DFDC000C00CE

Seed (after)

CAEAAAADCFADCAACAEAAAADCDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                                   000D000D0000000000D0D0D000000000
Input row #  2                 0000000000000000E00000000000000E
Input row #  2                   000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 259

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   42 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   _   2   _   4   5   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _   _   _   _  15  16   _   _   _
   _   _   _   _   _   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000C00CE0D0DEDE000C00CE

Seed (after)

CAEAAAAECEADCAACAEAAAADFDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C00000000000C00C0
Input row #  2                                   0000000D0000000000D0D0D000000000
Input row #  2                 0000000000000000E0000E0E0000000E
Input row #  2                                                   000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00540080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 260

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   2   _   3   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0D0DFDC000C00CE0D0DGDC000C00CE

Seed (after)

CAEAAAADCDADCAACAEAAAADCDADCAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                                   000D0D0D0000000000D0D0D000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x005400a8)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 261

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   85 |   1   2  -1   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   3   5   _   _   _  10   _  11  13   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0G0DFDC000C00CE0D0DEDC000C00CE

Seed (after)

CAEAAAAECDADCAACAEAAAADCDADCAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000C00C0
Input row #  2                                   00000D0D0000000000D0D0D000000000
Input row #  2                 0000000000000000E0000E000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2                                000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x005400a0)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 1));
}


===========================================================================

Solution: 262

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _  13   _   _   _  15  16   _   _   _
   _   _   _   _   _   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   2   _   5   _   _   8   _   _   _   _   _   _   _
   _   9  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGEC000C00EF0D0DFCF000C00CF

Seed (after)

CAFAAAAFCFAECAAEAFAAAACEDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C000000000C0000C00C0
Input row #  2                                     000000000000000000D0D00000000000
Input row #  2                                       000E000E0000000E0000000000000000
Input row #  2                 0000000000000000F0000F0F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48401101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008088)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a10000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 263

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   _   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   _   1   _   _   3   4   _   _   _   _   _  11  12   _   _   _   _
   _   _   _   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _
   _   7   _  10   _   _   _   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0G0DDGG000F00CE0F0DDCC000F00CE

Seed (after)

CAFAAAADFEADDAACAFAAAACCEADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C00000000000000C000000CC000000C0
Input row #  2                                     0D000DD0000000000000DD0000000000
Input row #  2                        0000000000000000E00000000000000E
Input row #  2                     000000000000F00000F00000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08001)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00300062)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08041000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 264

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _   _  11  12   _   _   _   _
   _   _   _   _   _  10   _   _   _   _   _  17   _   _   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000F00CD0E0DDFC000F00CE

Seed (after)

CAFAAAACCDAEFAACAFAAAADCEADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C0000000C000000C0
Input row #  2                                     000D000000000000D000DD0000000000
Input row #  2                        000000000000000000E000000000000E
Input row #  2                     000000000000F000000000F0000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80040000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 265

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   5   _   7   _   _   _   _   _   _   _   _   _
   _  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGEC000E00CD0D0DDFC000F00CF

Seed (after)

CAFAAAAFCDAFEAACAEAAAADCDADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                                     000D000000000000D0D0DD0000000000
Input row #  2                                    0000000E0000E0000000000000000000
Input row #  2           0000000000000000000000F0000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 266

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   17 |   0   2 -10   6 |    _   _   _   _   _   1   _   3   5   7   _   _   9   _  11   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _   5   _   _   _   _   _   _   _   _   _
   _  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGEC000C00CD0D0DDFC000F00CF

Seed (after)

CAFAAAAFCDAFCAACAEAAAADCDADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C0000000C000000C0
Input row #  2                                     000D000000000000D0D0DD0000000000
Input row #  2                                         0000000E000000000000000000000000
Input row #  2           0000000000000000000000F0000F000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 267

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 3 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _
   _   _   _   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000C00CF0D0DDCC000E00CF

Seed (after)

CAFAAAACCDAECAACAFAAAACCDADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000000C0
Input row #  2                                     000D00000000000000D0DD0000000000
Input row #  2               000000000000000000000000000E0000
Input row #  2                 0000000000000000F00000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 16));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 268

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000C00CE0D0DFCC000C00CE

Seed (after)

CAEAAAACCDAFCAACAEAAAACCDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000C00C0
Input row #  2                                     000D00000000000000D0D00000000000
Input row #  2                 0000000000000000E00000000000000E
Input row #  2                     000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 269

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _   _  14   _   _  15  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   7   _   _   _  12  13   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000F00CD0D0DFFC000C00CE

Seed (after)

CAFAAAACCDAFFAACAEAAAADCDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C0000000C000C00C0
Input row #  2                                     000D000000000000D0D0D00000000000
Input row #  2                 0000000000000000000000000000000E
Input row #  2                     000000000000F00000000FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48808181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00150008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00601000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 270

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0DGFC000C00CE0D0DECC000C00CE

Seed (after)

CAEAAAAECDADCAACAEAAAACCDADCAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                                     000D0D000000000000D0D00000000000
Input row #  2                 0000000000000000E0000E000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000F000000000000000000000000
Input row #  2                              0G0000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
}


===========================================================================

Solution: 271

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0D0DFCC000C00CE0D0DDCC000G00CE

Seed (after)

CAEAAAACCDADCAACAEAAAACCDADDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000000C0
Input row #  2                                     000D0D000000000000D0DD0000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2        000000000000000000000000000G0000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00340028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 23));
}


===========================================================================

Solution: 272

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0D0DFCC000C00CE0D0DGCC000C00CE

Seed (after)

CAEAAAACCDADCAACAEAAAACCDADCAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C000000CC000C00C0
Input row #  2                                     000D0D000000000000D0D00000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 273

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0D0DGGC000C00CE0D0DECC000C00CE

Seed (after)

CAEAAAAECDADCAACAEAAAACCDADCAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                                     000D0D000000000000D0D00000000000
Input row #  2                 0000000000000000E0000E000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000000000000000000000000000000
Input row #  2                             000000GG000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
}


===========================================================================

Solution: 274

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _   _  16   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11  12   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0D0DGGC000C00CE0D0DDCC000F00CE

Seed (after)

CAEAAAADCDADCAACAEAAAACCDADDAACA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000000C0
Input row #  2                                     0D0D0D000000000000D0DD0000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F0000
Input row #  2                             000000GG000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0034002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
}


===========================================================================

Solution: 275

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   54 |   1   2  23   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _   _  16   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10  11  12   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0D0DDGC000G00CE0D0DDCC000F00CE

Seed (after)

CAEAAAADCDADDAACAEAAAACCDADDAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000000C0
Input row #  2                                     0D0D0DD00000000000D0DD0000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2        000000000000000000000000000F0000
Input row #  2                        0000000G0000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0034006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 23));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
}


===========================================================================

Solution: 276

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   56 |   1   2  17   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   _   1   _   2   3   4   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0D0DDGC000G00CE0D0DFCC000C00CE

Seed (after)

CAEAAAADCDADDAACAEAAAACCDADCAACA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                                     0D0D0DD00000000000D0D00000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2              000000000000000000000F0000000000
Input row #  2                        0000000G0000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014006a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 17));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
}


===========================================================================

Solution: 277

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
 4 |   87 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _  13  14   _   _  15  16   _   _   _
   _   _   _   _   2   3   4   _   _   _   _  10  11   _   _   _   _   _
   _   9  12   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0DDFC000F00CE0D0DECC000C00CE

Seed (after)

CAEAAAAECDADDAACAEAAAACCDADCAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C000000CC000C00C0
Input row #  2                                     000D0DD00000000000D0D00000000000
Input row #  2                 0000000000000000E0000E000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                        0000000F0000F0000000000000000000
Input row #  2                                  0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c08101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00140068)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80210000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 3));
}


===========================================================================

Solution: 278

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
 4 |   88 |   1   2  21   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
   _   _   1   _   2   3   _   _   _   _   _  10  11   _   _   _   _   _
   _   9   _   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0D0DFFC000C00CE0D0DGCC000C00CE

Seed (after)

CAEAAAADCDADCAACAEAAAACCDADCAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C00C000000CC000C00C0
Input row #  2                                     0D0D0D000000000000D0D00000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                             000000FF000000000000000000000000
Input row #  2          000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48c09101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0014002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200000)), 21));
}


===========================================================================

Solution: 279

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11  12   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000E00CD0D0DDEC000E00CF

Seed (after)

CAEAAAACCDAFEAACAEAAAADCDADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C0000000C000000C0
Input row #  2                                     000D000000000000D0D0DD0000000000
Input row #  2                     000000000000E000000000E0000E0000
Input row #  2           0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 280

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   7   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   _   _   _   _   9   _  10  11  12   _   _   _   _
   _   _   _   _   _   _   _   _  15   _   _   _   _   _   _   _   _   _
   _  13   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGCC000C00CD0D0DDFC000E00CF

Seed (after)

CAFAAAACCDAFCAACAEAAAADCDADDAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000C00C0000000C000000C0
Input row #  2                                     000D000000000000D0D0DD0000000000
Input row #  2                     000000000000000000000000000E0000
Input row #  2           0000000000000000000000F00000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40809181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08000000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 281

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   5   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   _   _   2   3   _   _   _   9   _  10  11  12   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CF0D0DFCC000E00CD0D0DDEC000E00CG

Seed (after)

CAEAAAACCDADEAACAEAAAADCDADDAACA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C000000CC000000C0000000C000000C0
Input row #  2                                     000D0D0000000000D0D0DD0000000000
Input row #  2                     000000000000E000000000E0000E0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2    0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808181)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00350028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 27));
}


===========================================================================

Solution: 282

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 3 |   62 |   1   2   2   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
 4 |   70 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   _   8   _   _  14   _   _   _  16   _   _   _
   _   _   1   _   2   3   _   _   _   9   _  10  11  12   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CD0D0DFFC000E00CD0D0DDEC000E00CG

Seed (after)

CAEAAAADCDADEAACAEAAAADCDADDAACA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000000C0000000C000000C0
Input row #  2                                     0D0D0D0000000000D0D0DD0000000000
Input row #  2                     000000000000E000000000E0000E0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                             000000FF000000000000000000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x40808101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0035002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000000c0)), 2));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 283

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   0   9 |    0   _   5   6   _   _   7   8   _  13  14   _   _  15  16   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   23 |   0   2  14   5 |    _   9  12  13  14   _   _   _  17   _   _   _   _   _   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   0   _   _   6   _   _   7   _   _  13   _   _   _  15  16   _   _   _
   _   _   _   _   _   2   _   5   _   _   8   9  10   _   _   _   _   _
   _   _  12   _  14   _   _   _  17   _   _   _   _   _   _   _   _   _
   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0D0GGDC000C00DD0D0FECE000C00CE

Seed (after)

CAFAAAAECEADCAADAEAAAACDDADCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                               C0000000C000C000000000C0000C00C0
Input row #  2                                       000D000D0000000DD0D0000000000000
Input row #  2                 000000000000000000000E0E0000000E
Input row #  2             00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x48401101)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00058088)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80a00000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 284

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   3   _   7   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   4   _   _   _   8   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   0   1   _   _   _   _   _   _   9  10   _  13   _   _   _
   _   _   _   _   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EE0G0CDGG000C00DE0E0FDEF000D00FD

Seed (after)

CADAAAACEEADFAAFADAAAAFDEAEDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          00000C000000C0000000000000000000
Input row #  2                           000000D00000000D00000D00000D000D
Input row #  2                                       EE00000000000000E0E000E000000000
Input row #  2                       00000000000000000000F00F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88208040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00450003)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40900000)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 285

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 3 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   5   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   2   _   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   _   _   _   4   6   _   7   _   _   _  12   _   _  15   _   _   _
   _   _   0   1   _   _   3   _   _   8   9   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FF0D0FECE000E00FF0G0DEGG000E00DC

Seed (after)

DACAAAAFFEAEFAAEADAAAAFFEACDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          0000000C00000000000000000000000C
Input row #  2                            000D0000000000000000D000000000D0
Input row #  2                                  000000E0E000E00000000E00000E0000
Input row #  2                                      FF000F000000000FF000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40100008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08201140)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00018023)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 286

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   5   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   2   _   _   _   7   _   _   _   _   _   _  15   _  16   _   _   _   _
   _   _   0   1   _   _   3   6   _   8   _   _   _   _  14   _   _   _
   _   _   _   _   _   4   _   _   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EE0D0EFCE000D00EG0F0GGCE000D00DC

Seed (after)

DACAAAAEEDAFEAAEACAAAAEFDACDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          0000000C00000000000000C00000000C
Input row #  2                            000D00000000D00000000000000D00D0
Input row #  2                                      EE000E00E000000E0000000E00000000
Input row #  2                                    000000F00000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00808123)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040040)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 287

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   _   _  13   _   _   _  17   _   _   _   _   _
   2   3   _   _   7   _   _   _   _   _   _  15   _  16   _   _   _   _
   _   _   0   1   _   _   _   6   _   8   _   _   _   _  14   _   _   _
   _   _   _   _   _   4   5   _   _   _  10   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EE0D0DFFE000D00EG0F0GGCE000D00DC

Seed (after)

DADAAAAEEDAFFAAEACAAAAEFDACDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          0000000000000000000000C00000000C
Input row #  2                            000D0D000000D00000000000000D00D0
Input row #  2                                      EE000000E000000E0000000E00000000
Input row #  2                                    000000FF0000000000F0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80400000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00808103)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000400c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 288

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 2 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   5   _   _   _   _   _   _   _   _   _   _  17   _   _   _   _   _
   2   _   _   _   7   _   _   _  11   _   _  15   _  16   _   _   _   _
   _   _   0   _   _   _   _   6   _   8   9   _   _   _  14   _   _   _
   _   _   _  10   _  12  13   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0D0GGCE000D00EE0F0DFFE000D00DC

Seed (after)

DACAAAAEFDAFFAAEADAAAAEEDACDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          0000000C00000000000000000000000C
Input row #  2                            000D00000000D0000000D000000D00D0
Input row #  2                                      E0000000E000000EE000000E00000000
Input row #  2                     000000000000000000F00FF000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000080)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48101008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00818101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00640000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 289

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |    5 |   0   2  -1   8 |    _   1   4   5   6   _   _   _   9  12  13  14   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   57 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   3   _   7   _   _   9   _   _   _  15   _   _  17   _   _   _   _   _
   _   1   _   5   _   _   _   _   _   _  13  14   _   _   _   _   _   _
   _   _   _   _   0   _   2   4   6   _   _   _   _  10  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  11
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
ED0E0CEDE000C00GC0E0GEDD000C00FC

Seed (after)

CADAAAACDEACEAAEAEAAAACDDACEAAEA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          00000C000000C000C0000000000C000C
Input row #  2                                0D00000D00000000000000DD00000000
Input row #  2                                        E00E00E0E000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000F0
Input row #  2                000000000000000G0000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88011020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c00082)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240149)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00108000)), 15));
}


===========================================================================

Solution: 290

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   3   5   7   _   _   9   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   _   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   4   6   _   _   8   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FD0F0CFCF000C00FC0G0DFGG000C00EC

Seed (after)

CACAAAACDFACFAAFAFAAAACEFACDAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          00000C0C0000C000C0000000000C000C
Input row #  2                                      0D000000000000000000D00000000000
Input row #  2                        000000000000000000000000000000E0
Input row #  2                                        F00F00F0F000000F00000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x880110a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100002)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208149)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 291

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   31 |   0   2  19   4 |    _  12   _  15   _  16  17   _   _   _   _   _   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   3   5   7   _   _   _   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _  11   _   _   _   _
   _   _   _   _   0   _   2   4   6   _   _   8   _   _  12   _   _   _
   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
ED0E0CECE000C00ED0G0DEGG000C00FC

Seed (after)

CACAAAACDEAFEAAEAEAAAACDEACDAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          00000C0C0000C00000000000000C000C
Input row #  2                                      0D00000000000000D000D00000000000
Input row #  2                                        E00E00E0E000000E00000E0000000000
Input row #  2            000000000000000000000000000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x880010a0)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00110002)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00208149)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 292

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   37 |   0   2 -21   4 |    _   _   _   _   _   _   _   _   _   1   _   2   3   4   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   3   _   7   _   _   _   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   _   0   1   2   _   5   _   _   8   _   _   _  13   _   _   _
   _   6   _   _   _   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0D0CFDE000C00DG0E0GGDE000C00EC

Seed (after)

CAEAAAACDDADEAADAEAAAACDEACFAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          00000C000000C00000000000000C000C
Input row #  2                                       DD0D000D0000000D000000D000000000
Input row #  2                         00000000E000000000E0000E000000E0
Input row #  2                                                    000000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001020)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0040808b)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40840100)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000040)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 293

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   38 |   0   2 -22   4 |    _   _   _   _   _   _   _   _   _   0   1   _   _   3   6   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   7   _   _   _   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   _   0   1   2   _   5   _   _   8   _   _   _  13   _   _   _
   4   6   _   _   _   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0D0FEDE000C00DG0E0GGDE000C00EC

Seed (after)

EAEAAAACDDADEAADAEAAAACDEACFAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          000000000000C00000000000000C000C
Input row #  2                                       DD0D000D0000000D000000D000000000
Input row #  2                         000000E0E000000000E0000E000000E0
Input row #  2                                                     00000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0040808b)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40840140)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000020)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 294

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   5   8 |    3   5   7   _   _   9   _  11  13  15   _   _  17   _   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   38 |   0   2 -22   4 |    _   _   _   _   _   _   _   _   _   0   1   _   _   3   6   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   7   _   _   _   _   _   _  15   _   _  17   _   _   _   _   _
   _   _   _   0   _   2   _   5   _   _   _   _   _   _  13   _   _   _
   4   6   _   _   8   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   1   _   _   3   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DF0D0FEDE000C00EG0E0GGDE000C00EC

Seed (after)

EAEAAAACDEADEAADAEAAAACFEACFAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                          000000000000C00000000000000C000C
Input row #  2                                       D00D000D00000000000000D000000000
Input row #  2                         000000E0E000000E00E0000E000000E0
Input row #  2                                                     0F000F00000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400089)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40848140)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000022)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 295

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   0   _   _   5   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   9  10   _  13   _   _   _
   6   _   8   _   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGDF000C00FE0E0FCEF000C00FC

Seed (after)

FADAAAAFCDAEFAAFACAAAAFCEAECAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C00000000C00000C000C
Input row #  2                                 D000000D000000000000000000000000
Input row #  2                                       000E000000000000E0E000E000000000
Input row #  2                       00000000F000000F0000F00F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88201000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00450008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40908100)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 296

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   8   9   _   _   _  15   _   _  17   _   _   _   _
   _   0   3   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   _  10   _  13   _   _   _
   4   _   _   _   _   _   _  12  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DE0G0DFGG000C00CC0E0DFEF000C00FC

Seed (after)

FADAAAADCEACCAAFAFAAAADCFAECAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C00CC0000000000C000C
Input row #  2                                 D0000D00000000000000D00000000000
Input row #  2                                       0E0000000000000000E000E000000000
Input row #  2                         000000F00000000000000F0F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88019000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100021)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00440002)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40a00040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 297

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   8   _   _   _   _  15   _  16  17   _   _   _   _
   _   0   3   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   9   _   _  13   _   _   _
   4   _   _   _   _   _  10  12  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DE0G0DFGG000C00CE0F0DFEF000C00CC

Seed (after)

FADAAAADCEACFAAFAFAAAADCEACCAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C00C00000000000C00CC
Input row #  2                                 D0000D00000000000000D00000000000
Input row #  2                                       0E00000000000000E00000E000000000
Input row #  2                         000000F00000000000F00F0F00000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8009000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00100021)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00410002)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00a40040)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 298

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   8   _   _   _   _  15   _  16   _   _   _   _   _
   _   0   _   _   5   _   _   _   _  11   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   6   _   _   _   _  10  12   _   _   _
   9   _  14   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0E0GGDE000C00CF0E0DEDF000C00CF

Seed (after)

FADAAAAFCDACEAAFAEAAAADCDACEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C00C00000000000C00C0
Input row #  2                                 D000000D000000000000D0D000000000
Input row #  2                                        000E0000E000000000E00E0000000000
Input row #  2               0000000000000000F000000F0000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48009000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500081)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240108)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80810000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 299

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   28 |   0   2 -15   5 |    _   _   _   _   _   _   _   0   _   5   6   _   _   7   8   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   _   9   _  12   _  15   _   _  17   _   _   _   _
   _   _   1   _   2   3   _   _   _   _   _   _  11   _   _   _   _   _
   4   6   _   _   _   _   _   _   _   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   0   _   5   _   _   _   _   8   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FD0D0DEFE000C00FC0G0DCGG000C00EC

Seed (after)

EAEAAAADCDADCAAFACAAAAFCEADCAAFA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C000C0000C00000C000C
Input row #  2                                     0D0D0D00000000000000D00000000000
Input row #  2                         000000E0E000000000000000000000E0
Input row #  2                                              F000000F0000000F0000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88211000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0010002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40000140)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008081)), 15));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 300

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 3 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   7   _   _   _   _   _   _  15   _   _  17   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _   _   _   _   _   _
   _   _   _   _   1   2   _   5   _   _   _   _  10   _  13   _   _   _
   4   6   _   _   _   _   _   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DE0E0DFEF000C00DG0E0GGEF000C00FC

Seed (after)

FAFAAAADCEAEDAAEAFAAAADCFAECAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000000000C00000000000000C000C
Input row #  2                                      D0000D000000000D0000000000000000
Input row #  2                                       0E0E000E0000000000E000E000000000
Input row #  2                         000000F0F00000000000000F000000F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88001000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008021)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0044008a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40800140)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 301

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   25 |   0   2  12   5 |    7   _   _  11  12  14   _  15   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   _   _   _   _   _  12   _  15   _  16   _   _   _   _   _
   _   _   0   1   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   _   _   _   _   9  10   _  13   _   _   _  17   _   _   _   _   _   _
   7   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0G0DCGG000F00DE0E0DCED000C00CE

Seed (after)

FACAAAADDEAEDAAEACAAAADCEACDAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000000000000C00000C00C0
Input row #  2                                      DD000D000000000D0000D00D00000000
Input row #  2                        0000000000000000E0E000E00000000E
Input row #  2                   000000000000F0000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80450000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 302

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   60 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   _   _   _   _   _  12   _  15   _  16   _   _   _   _   _
   _   _   0   1   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9  10   _  13   _   _   _  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0F0DCEF000G00DE0E0DCED000C00CE

Seed (after)

EACAAAADDEAEDAAEACAAAADCEACDAADA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000000000000C00000C00C0
Input row #  2                                      DD000D000000000D0000D00D00000000
Input row #  2                        0000000E00000000E0E000E00000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000F00000000000000000000000
Input row #  2                       000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80450080)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 8));
}


===========================================================================

Solution: 303

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   87 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   7   _   _   _   _  12   _  15   _  16   _   _   _   _   _
   _   _   0   _   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9  10   _  13   _   _   _  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   6
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0F0DCEF000C00DE0E0DCED000C00CE

Seed (after)

EACAAAADCEAEDAAEACAAAADCEACDAADA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000C00000000C00000C00C0
Input row #  2                                      D0000D000000000D0000D00D00000000
Input row #  2                        0000000E00000000E0E000E00000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000F0000F00000000000000000000000
Input row #  2                                  0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48201040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908021)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80450080)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000108)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000002)), 3));
}


===========================================================================

Solution: 304

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   60 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _
 4 |   86 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   _   _   _   _   _  12   _  15   _  16   _   _   _   _   _
   _   _   0   1   _   _   3   _   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9  10   _  13   _   _   _  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0G0DCEF000F00DE0E0DCED000C00CE

Seed (after)

EACAAAADDEAEDAAEACAAAADCEACDAADA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000000000000C00000C00C0
Input row #  2                                      DD000D000000000D0000D00D00000000
Input row #  2                        0000000E00000000E0E000E00000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                       00000000F000F0000000000000000000
Input row #  2                                 000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908023)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80450080)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001100)), 8));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 2));
}


===========================================================================

Solution: 305

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
 4 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   7   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   _   1   2   _   _   _   _   _   9  10   _  13   _   _   _
   6   _   8   _   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
GD0D0GCFE000C00ED0D0ECDE000C00EC

Seed (after)

EACAAAAECDADEAAEACAAAAECDADCAADA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000C00000000C00000C000C
Input row #  2                                       0D0D000000000000D0D000D000000000
Input row #  2                       00000000E000000E0000E00E000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            0000000F000000000000000000000000
Input row #  2                               G0000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88201040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0045000a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40908100)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000080)), 3));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
}


===========================================================================

Solution: 306

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   _   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   0   1   2   _   _   _   _   _   9  10   _  13   _   _   _
   6   _   8   _   _   _  11  14   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0D0FCGE000G00ED0D0ECDE000C00EC

Seed (after)

EACAAAAEDDADEAAEACAAAAECDADCAADA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000000000000C00000C000C
Input row #  2                                       DD0D000000000000D0D000D000000000
Input row #  2                       00000000E000000E0000E00E000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              00000F00000000000000000000000000
Input row #  2                        0000000G0000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0045000b)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40908100)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000020)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001080)), 7));
}


===========================================================================

Solution: 307

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   4   8 |    _   4   _   7   _   8   9   _  12   _  15   _  16  17   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 3 |   63 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
 4 |   66 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   4   _   7   _   _   _   _  12   _  15   _   _  17   _   _   _   _
   _   _   _   _   1   2   _   5   _   _   _   9  10   _  13   _   _   _
   6   _   8   _   _   _  11   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
FD0D0FCDE000C00ED0D0ECDG000C00EC

Seed (after)

EACAAAAECDADEAADACAAAAECDADCAADA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                           000000C00000C00000000C00000C000C
Input row #  2                                       0D0D000D00000000D0D000D000000000
Input row #  2                       00000000E000000E0000E000000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               F0000F00000000000000000000000000
Input row #  2            00000000000000000000000G00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88201040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0045008a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40108100)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000021)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800000)), 19));
}


===========================================================================

Solution: 308

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   27 |   0   2 -14   5 |    _   _   _   _   _   _   _   1   2   6   _   _   7   _   9   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   _   _   _   _   _   8   _  11   _   _  15   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   6   _   _   7   _   9   _   _   _
   _   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DE0C0DDDE000E00CE0G0CDGG000C00CF

Seed (after)

CADAAAADDDAFCAAEACAAAAEDCAECAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C00000000000C0000C000000C00C0
Input row #  2                                 D0000DDD0000000000000D0000000000
Input row #  2                                             0E000000E000E000E000000000000000
Input row #  2           0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48108008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00011102)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 309

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 2 |   27 |   0   2 -14   5 |    _   _   _   _   _   _   _   1   2   6   _   _   7   _   9   _   _   _
 3 |   30 |   0   2  20   4 |   11  13  15   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   _   8   _   _   _   _  15   _  16   _   _   _   _
   _   0   3   4   5   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   2   6   _   _   7   _   9   _   _   _
  11   _   _   _   _  17   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DE0E0DDDE000E00CE0G0FDGG000C00CF

Seed (after)

FADAAAADDDAFCAAEAEAAAAEDCAECAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000000000000000C00000000000C00C0
Input row #  2                                 D0000DDD0000000000000D0000000000
Input row #  2                                             0E0E0000E000E000E000000000000000
Input row #  2           00000000000000000000F0000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48008000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000e1)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0001110a)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80100000)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 310

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   3   _   _   7   _   _   _  11   _   _  15   _  16   _   _   _   _
   _   _   0   1   _   _   _   6   _   8   9   _   _   _  14   _   _   _
   _   _   _   _   _   4   5   _   _   _   _   _  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0CEED000C00DD0F0CEFD000C00CG

Seed (after)

CACAAAADDCAEEAADACAAAADDCAECAADA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C0C000000C0000000C000000C00C0
Input row #  2                                      DD000000D000000DD000000D00000000
Input row #  2                                    000000EE0000000000000E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000F000F000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48101028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00818103)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x002000c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00440000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 311

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   3   _   _   7   _   _   _  11   _   _  15   _   _   _   _   _   _
   _   _   0   1   _   _   _   6   _   8   9   _   _   _  14   _   _   _
   _   _   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0CEED000C00DD0F0CEED000C00GG

Seed (after)

CACAAAADDCAEEAADACAAAADDCAEEAADA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C0C000000C0000000C000000C0000
Input row #  2                                      DD000000D000000DD000000D00000000
Input row #  2                                    000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000F0000000000000
Input row #  2     000000000000000000000000000000GG

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08101028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00818103)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00040000)), 18));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
}


===========================================================================

Solution: 312

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
 4 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   3   _   _   7   _   _   _  11   _   _  15   _   _   _   _   _   _
   _   _   0   1   _   _   _   6   _   8   _   _   _   _  14   _   _   _
   _   _   _   _   _   4   5   _   _   _  10   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0CEED000C00DF0E0CEED000C00GG

Seed (after)

CACAAAADDCAEEAADACAAAADECAEEAADA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C0C000000C0000000C000000C0000
Input row #  2                                      DD000000D000000D0000000D00000000
Input row #  2                                    000000EE0000000000E00EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000000000000000
Input row #  2     000000000000000000000000000000GG

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08101028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00808103)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006400c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00010000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
}


===========================================================================

Solution: 313

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   53 |   1   2  26   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
 4 |   60 |   1   2   8   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7   _
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   3   _   _   7   _   _  10  11   _   _  15   _   _   _   _   _   _
   _   _   0   1   _   _   _   _   _   8   9   _   _   _  14   _   _   _
   _   _   _   _   _   4   5   _   _   _   _   _  12  13   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16  17
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   _
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DD0C0CEEG000C00DD0C0CEED000C00FF

Seed (after)

CACAAAADDCAEEAACACAAAADDCAEEAADA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C0C000000C00000C0C000000C0000
Input row #  2                                      DD0000000000000DD000000D00000000
Input row #  2                                    000000EE0000000000000EE000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2     000000000000000000000000000000FF
Input row #  2                       00000000G00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08141028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00818003)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x006000c0)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000000)), 26));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000100)), 8));
}


===========================================================================

Solution: 314

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   20 |   0   2   9   5 |    _   _   9   _  10  11  12   _   _  17   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   _   _   _   7   _   _   _   _   _   _  15   _  16   _   _   _   _
   _   _   _   0   _   _   _   5   _   _   8   _  10   _  13   _   _   _
   _   6   _   _   _   _   _   _  14   _   _   _   _   _   _   _   _   _
   _   _   9   _   _  11  12   _   _  17   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0C0GGDE000C00DF0D0FFDE000C00CF

Seed (after)

CAEAAAAFDCAFFAADAEAAAAFDCADCAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C00000000C00000000000000C00C0
Input row #  2                                       D000000D0000000D00D000D000000000
Input row #  2                         00000000E00000000000000E00000000
Input row #  2                      0000000000000000F000FF000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48001008)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00448081)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800100)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80310000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 315

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    4 |   0   2   3   8 |    2   3   _   _   7   _   8  10  11   _   _  15   _  16   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   21 |   0   2  16   5 |    9  10  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
 3 |   33 |   0   2 -16   4 |    _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _
 4 |   46 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   2   3   _   _   7   _   8   _   _   _   _   _   _  16   _   _   _   _
   _   _   _   0   _   _   _   _   _   _   _   _  10   _  13   _   _   _
   _   _  14   _   _  15   _  17   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   1   4   5   6   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9  11  12
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DF0C0CFFF000C00CG0D0GGDE000E00CE

Seed (after)

CACAAAAEDCAECAAEAFAAAAFFFADCAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                            000C0C000000C00C00000000000000C0
Input row #  2                                       D00000000000000000D000D000000000
Input row #  2               00000000000000000000000E000E000E
Input row #  2                                               0F0000FFF00000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40009028)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00440001)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88800000)), 16));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x000001c2)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 316

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 1 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 4 |   45 |   1   2  18   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   0   _   _   _   _   _   _   8   _   _   _   _   _   _   _   _   _
   _   _   _   3   _   6   _   7   _   _   _   _   _   _  15   _   _   _
   _   _   1   _   2   _   4   _   _   9   _   _  11  12   _   _   _   _
   5   _   _   _   _   _   _   _   _   _  16  17   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  13  14
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0E0DEFD000D00CE0G0EEGG000D00FF

Seed (after)

FACAAAAEDEADEAADACAAAAEFFAEEAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                 C00000000000000C0000000000000000
Input row #  2                                  00000D00D000D00000000000000D0000
Input row #  2                                     0E0E00E000000000E000EE0000000000
Input row #  2                        0000000F0000000000000000000000FF

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2             000000000000000000G000GG00000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008001)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08001120)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0031004a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0000080)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00c40000)), 18));
}


===========================================================================

Solution: 317

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    6 |   0   2  -2   8 |    _   0   3   4   5   _   _   _   8  11  12  13   _   _   _   _   _   _
 1 |    7 |   0   2  -3   8 |    _   _   _   3   4   6   _   7   _   _  11  12  14   _  15   _   _   _
 2 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 3 |   43 |   0   2  22   3 |   13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   47 |   1   2   3   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   0   _   _   _   _   _   _   8   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   7   _   _  11   _  14   _  15   _   _   _
   _   _   1   _   _   3   4   _   _   9   _  10   _  12   _   _   _   _
  13   _   _  16  17   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   5   6
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CE0G0EEGG000D00CE0E0DEFD000D00FF

Seed (after)

FACAAAAEFFAEEAADACAAAAEDEADEAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                 C00000000000000C0000000000000000
Input row #  2                                  000000000000D0000000D00D000D0000
Input row #  2                                     0E000EE000000000E0E00E0000000000
Input row #  2         0000000000000000000000F0000000FF

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                            000G000GG00000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00008001)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08901000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00250062)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0400000)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000188)), 3));
}


===========================================================================

Solution: 318

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 1 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   2   _   _   5   _   _   _   _   _   _  13   _   _   _   _   _
   6   _   _   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
   _   _   _   _   0   _   _   _   _   _   _   8   _  10  12   _   _   _
   _   7   _   _   _   _   _   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0C0GGCD000F00ED0E0DECD000F00DD

Seed (after)

DAFAAAACDEACDAADAFAAAADDEACEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                   000C000C00000000000000C000000000
Input row #  2                       00000000D0000000D000D00D000000DD
Input row #  2                                        E00000000000000E00E00E0000000000
Input row #  2                     000000000000F00000000000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00400088)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0910100)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00248001)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08001000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 319

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -4   8 |    _   _   2   _   3   5   6   _   _  10   _  11  13  14   _   _   _   _
 1 |   12 |   0   2   8   7 |    6   _   8   9   _   _  11  14   _  16  17   _   _   _   _   _   _   _
 2 |   16 |   0   2  -9   7 |    _   _   _   _   0   _   2   4   6   _   _   8   _  10  12   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   _   5   _   _   _   _   _  11  13   _   _   _   _   _
   6   _   8   9   _   _   _  14   _  16  17   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   _   _  10  12   _   _   _
   _   7   _   _   _   _   _   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
EG0E0GGCD000F00DD0E0CECD000F00DD

Seed (after)

DAFAAAADDEACEAADAFAAAADDCACEAAEA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                   0000000C000000000000C0C000000000
Input row #  2                       00000000D000000DD000000D000000DD
Input row #  2                                        E00E00000000000000E00E0000000000
Input row #  2                     000000000000F00000000000000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00500080)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0818100)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00240009)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08001000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 320

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 1 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 2 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   _   _   2   _   _   _   _   9   _   _  11  12   _   _   _   _
   _   _   0   _   _   _   _   6   _   _   _   _   _   _  14   _   _   _
   5   _   _   8   _  10   _   _   _   _  16  17   _   _   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DG0C0GGED000F00EC0E0CCFD000F00EE

Seed (after)

EAFAAAADECAEFAADAFAAAACEEACCAADA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                     000C000000000000C000CC0000000000
Input row #  2                                      D0000000D00000000000000D00000000
Input row #  2                        0000000E0000000E00E00000000000EE
Input row #  2                     000000000000F000000000F0000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00310008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00800101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0048080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 321

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |    9 |   0   2  -6   8 |    _   _   1   _   2   3   4   _   _   9   _  10  11  12   _   _   _   _
 1 |   11 |   0   2  -8   8 |    _   _   _   0   1   2   _   5   _   _   8   9  10   _  13   _   _   _
 2 |   14 |   0   2   6   7 |    4   6   _   _   8   _  10  12  14   _   _  16   _   _   _   _   _   _
 3 |   52 |   1   2  27   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
 4 |   61 |   1   2   7   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   _   7
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   1   _   2   3   _   _   _   9   _   _  11  12   _   _   _   _
   _   _   _   0   _   _   _   5   _   _   8   _   _   _  13   _   _   _
   4   6   _   _   _   _  10   _  14   _   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15  17   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
DC0C0CEDE000G00DC0E0CCDE000F00EF

Seed (after)

EAEAAAACDCACEAADAEAAAACDEACCAADA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                     0C0C0C0000000000C000CC0000000000
Input row #  2                                       D000000D0000000D000000D000000000
Input row #  2                         000000E0E000000000E0000E000000E0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2    000000000000000000000000000F000F
Input row #  2                        000000000000G0000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x0031002a)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00408081)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x40840140)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x88000000)), 27));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00001000)), 7));
}


===========================================================================

Solution: 322

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 1 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   0   _   _   _   _   6   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9  10   _   _   _   _  16  17   _   _   _   _   _   _
   _   _   _   2   _   _   _   _   _   _   _   _  12   _   _   _   _   _
   _   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000F00CD0D0CEFC000F00DD

Seed (after)

DAFAAAACEDADFAACAFAAAACDDAECAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                      C0000000C000000C0000C00C00000000
Input row #  2                        0000000D00000000D0D00000000000DD
Input row #  2                                    000E00000000000000000E0000000000
Input row #  2                     000000000000F000000000F0000F0000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0050080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00200008)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08401000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 323

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 1 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 2 |   15 |   0   2  -5   7 |    _   _   _   2   _   4   5   _   7   _  10   _  12  13   _   _   _   _
 3 |   29 |   0   2  18   4 |   10  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   0   _   _   _   _   6   _   8   9   _   _   _  14   _   _   _
   5   _   _   _   _  10   _   _   _   _   _  17   _   _   _   _   _   _
   _   _   _   2   _   _   _   _   7   _   _   _  12  13   _   _   _   _
   _  11   _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0E0GGDC000E00CC0D0FEEC000F00FD

Seed (after)

DAFAAAACEFADFAACAEAAAACCDAEEAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                      C0000000C000000CC000000C00000000
Input row #  2                        0000000D0000000000D000000000000D
Input row #  2                                    000E00000000E00000000EE000000000
Input row #  2             00000000000000000000F000000F00F0

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00818101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x80040080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00601008)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x48100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 324

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------------------------------------
 0 |   10 |   0   2  -7   8 |    _   _   0   1   _   _   3   6   _   8   9   _   _  11  14   _   _   _
 1 |   13 |   0   2   7   7 |    5   _   _   8   9  10   _  13   _   _  16  17   _   _   _   _   _   _
 2 |   26 |   0   2  10   5 |    _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
 3 |   39 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   _   0   1   2   _   5   _   _   _
 4 |   48 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
------------------------------------------------------------------------
   _   _   0   _   _   _   _   6   _   8   _   _   _  11  14   _   _   _
   5   _   _   _   9   _   _   _   _   _  16  17   _   _   _   _   _   _
   _   7   _  10   _  12  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   3   4
------------------------------------------------------------------------

Seed (before)

0A0AAAA000A00AA0A0AAAA000A00AA0A
0BBB0000000000000000000000000000
CG0F0GGDC000E00CD0E0CEEC000E00DD

Seed (after)

DAEAAAACEDAEEAACAEAAAACDDAFCAACA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               0A0AAAA000A00AA0A0AAAA000A00AA0A
Input row #  2                                      C0000000C000000C0000C00C00000000
Input row #  2                        0000000D00000000D0000000000000DD
Input row #  2                     000000000000E00000E00EE0000E0000
Input row #  2                                                      000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[1], _mm_set1_epi32(0xb23d647a));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00908101)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0xc0010080)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x08641000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000008)), 23));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[0], _mm_set1_epi32(0x00000062)), 1));
}

