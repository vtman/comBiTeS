Original seed
11010111100010011010111100010011010111100010011010111100010011010111

11010111100010011010111100010011
01011110001001101011110001001101
0111

Length (original seed): 68

Weight: 38

Total number of rows: 3

Number of rows: 3

Indices of rows (new: original):
0: 0
1: 2
2: 1

11010111100010011010111100010011
01110000000000000000000000000000
01011110001001101011110001001101

Number of variables (gaps/ones): 17

Positions of gaps:
1: 2
2: 4
3: 9
4: 10
5: 11
6: 13
7: 14
8: 17
9: 19
10: 24
11: 25
12: 26
13: 28
14: 29
15: 32
16: 36
17: 37

Positions of ones:
1: 65
2: 67
3: 68
4: 69
5: 70
6: 74
7: 77
8: 78
9: 80
10: 82
11: 83
12: 84
13: 85
14: 89
15: 92
16: 93
17: 95

Original matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16	One              	Gap              
---------------------------------------------------------------------------------------------
   0 |   0   2  29   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000001	10000000000000000
   1 |   0   2  27   2 |   15  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000011	11000000000000000
   2 |   0   2  26   1 |   14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000100	10000000000000000
   3 |   0   2  25   1 |    _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000010	01000000000000000
   4 |   0   2  24   1 |    _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000100	01000000000000000
   5 |   0   2  23   1 |   13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000001000	10000000000000000
   6 |   0   2  22   1 |    _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000001	00100000000000000
   7 |   0   2  21   2 |    _  13   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000001001	01010000000000000
   8 |   0   2  20   2 |    _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000011	00101000000000000
   9 |   0   2  19   3 |   12   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000010110	10110000000000000
  10 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _	00000000000100111	10011100000000000
  11 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _	00000000001010101	11001010000000000
  12 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _	00000000010101010	11100100000000000
  13 |   0   2  15   4 |    _  10   _  13   _  14  15   _   _   _   _   _   _   _   _   _   _	00000000001001110	01010110000000000
  14 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _	00000000110001101	11001011000000000
  15 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _	00000001100011011	11100101100000000
  16 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _	00000010000111100	10110011000000000
  17 |   0   2  10   5 |    _   7  10  11  12   _   _   _  15   _   _   _   _   _   _   _   _	00000001001110010	01111000100000000
  18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _	00000010011100100	01111000100000000
  19 |   0   2   8   5 |    5   _   _   9  10  12   _  13   _   _   _   _   _   _   _   _   _	00000100011011000	10011101000000000
  20 |   0   2   7   5 |    _   _   8   _   9  11  12   _   _  16   _   _   _   _   _   _   _	00000000110110001	00101110010000000
  21 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _	00000100101101001	01010110101000000
  22 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _	00000001111000011	00101110010100000
  23 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _	00001011010010110	10110011011000000
  24 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _	00010011100100111	10011101001110000
  25 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _	00101010101010101	11001011100101000
  26 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _	01010101010101010	11100101110010000
  27 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _	00100111001001110	01010110101011000
  28 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _	11000110110001100	11001011100101000
  29 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _	10001101100011000	01100101110010000
  30 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _	00011110000111000	00110011011001000
  31 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _	00111001001110000	00111000111100000
  32 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _	01110010011100000	00111000111100000
  33 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _	01101100011010000	00011101001110000
  34 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _	11011000110110000	00101110010111000
  35 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _	10110100101100000	00010110101011000
  36 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _	11100001111000000	00001110010111000
  37 |   0   2 -11   5 |    _   _   _   _   _   _   1   4   _   6   7   _   _   9   _   _   _	01001011010000000	00000011011001000
  38 |   0   2 -12   5 |    _   _   _   _   _   0   _   3   _   _   6   7   8   _   _   _   _	10010011100000000	00000101001110000
  39 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _	10101010100000000	00000011100101000
  40 |   0   2 -14   4 |    _   _   _   _   _   _   _   1   3   5   _   _   7   _   _   _   _	01010101000000000	00000001110010000
  41 |   0   2 -15   4 |    _   _   _   _   _   _   _   _   2   _   5   _   6   7   _   _   _	00100111000000000	00000000101011000
  42 |   0   2 -16   4 |    _   _   _   _   _   _   _   0   1   _   _   5   _   6   _   _   _	11000110000000000	00000001100101000
  43 |   0   2 -18   3 |    _   _   _   _   _   _   _   _   0   4   _   _   5   _   _   _   _	10001100000000000	00000000110010000
  44 |   0   2 -19   3 |    _   _   _   _   _   _   _   _   _   3   4   _   _   5   _   _   _	00011100000000000	00000000011001000
  45 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   2   3   4   _   _   _   _   _	00111000000000000	00000000011100000
  46 |   0   2 -21   3 |    _   _   _   _   _   _   _   _   _   1   2   3   _   _   _   _   _	01110000000000000	00000000011100000
  47 |   0   2 -22   3 |    _   _   _   _   _   _   _   _   _   _   1   2   4   _   _   _   _	01101000000000000	00000000001110000
  48 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   0   _   1   3   4   _   _   _	11011000000000000	00000000010111000
  49 |   0   2 -24   3 |    _   _   _   _   _   _   _   _   _   _   0   _   2   3   _   _   _	10110000000000000	00000000001011000
  50 |   0   2 -25   3 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _	11100000000000000	00000000000111000
  51 |   0   2 -26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _	01000000000000000	00000000000001000
  52 |   0   2 -27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _	10000000000000000	00000000000010000
  53 |   0   2 -28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	10000000000000000	00000000000001000
  54 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _	00000000000000001	00000000000000100
  55 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _	00000000000000010	00000000000000100
  56 |   1   2  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _	00000000000000100	00000000000000100
  57 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _	00000000000000001	00000000000000010
  58 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	00000000000000001	00000000000000001
  59 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _	00000000000001010	00000000000000110
  60 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	00000000000000110	00000000000000011
  61 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	00000000000000100	00000000000000001
  62 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _	00000000000011000	00000000000000110
  63 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _  13	00000000000101000	00000000000000101
  64 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _   _	00000000001000000	00000000000000100
  65 |   1   2  18   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _	00000000010000000	00000000000000100
  66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	00000000000010000	00000000000000010
  67 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12	00000000100110000	00000000000000111
  68 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11	00000000001100000	00000000000000011
  69 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10	00000001011000000	00000000000000111
  70 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9	00000010010000000	00000000000000101
  71 |   1   2  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _	00000000100000000	00000000000000010
  72 |   1   2  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	00000000100000000	00000000000000001
  73 |   1   2  10   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7   _	00000101000000000	00000000000000110
  74 |   1   2   9   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7	00000011000000000	00000000000000011
  75 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6	00000010000000000	00000000000000001
  76 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _	00001100000000000	00000000000000110
  77 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   5	00010100000000000	00000000000000101
  78 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _	00100000000000000	00000000000000100
  79 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _	01000000000000000	00000000000000100
  80 |   1   2   2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _	00001000000000000	00000000000000010
  81 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4	10011000000000000	00000000000000111
  82 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3	00110000000000000	00000000000000011
  83 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2	01100000000000000	00000000000000011
  84 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	01000000000000000	00000000000000001
  85 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _	10000000000000000	00000000000000010
  86 |   1   2  -4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	10000000000000000	00000000000000001
---------------------------------------------------------------------------------------------
Sorted matrix


 Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16	One              	Gap              
---------------------------------------------------------------------------------------------
   0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _	00010011100100111	10011101001110000
   1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _	00101010101010101	11001011100101000
   2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _	01010101010101010	11100101110010000
   3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _	00100111001001110	01010110101011000
   4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _	11000110110001100	11001011100101000
   5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _	11011000110110000	00101110010111000
   6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _	00001011010010110	10110011011000000
   7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _	10001101100011000	01100101110010000
   8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _	00011110000111000	00110011011001000
   9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _	00111001001110000	00111000111100000
  10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _	01110010011100000	00111000111100000
  11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _	01101100011010000	00011101001110000
  12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _	10110100101100000	00010110101011000
  13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _	11100001111000000	00001110010111000
  14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _	00000001100011011	11100101100000000
  15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _	00000100101101001	01010110101000000
  16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _	00000001111000011	00101110010100000
  17 |   0   2  10   5 |    _   7  10  11  12   _   _   _  15   _   _   _   _   _   _   _   _	00000001001110010	01111000100000000
  18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _	00000010011100100	01111000100000000
  19 |   0   2   8   5 |    5   _   _   9  10  12   _  13   _   _   _   _   _   _   _   _   _	00000100011011000	10011101000000000
  20 |   0   2   7   5 |    _   _   8   _   9  11  12   _   _  16   _   _   _   _   _   _   _	00000000110110001	00101110010000000
  21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _	00000000110001101	11001011000000000
  22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _	00000010000111100	10110011000000000
  23 |   0   2 -11   5 |    _   _   _   _   _   _   1   4   _   6   7   _   _   9   _   _   _	01001011010000000	00000011011001000
  24 |   0   2 -12   5 |    _   _   _   _   _   0   _   3   _   _   6   7   8   _   _   _   _	10010011100000000	00000101001110000
  25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _	10101010100000000	00000011100101000
  26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _	00000000000100111	10011100000000000
  27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _	00000000001010101	11001010000000000
  28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _	00000000010101010	11100100000000000
  29 |   0   2  15   4 |    _  10   _  13   _  14  15   _   _   _   _   _   _   _   _   _   _	00000000001001110	01010110000000000
  30 |   0   2 -14   4 |    _   _   _   _   _   _   _   1   3   5   _   _   7   _   _   _   _	01010101000000000	00000001110010000
  31 |   0   2 -15   4 |    _   _   _   _   _   _   _   _   2   _   5   _   6   7   _   _   _	00100111000000000	00000000101011000
  32 |   0   2 -16   4 |    _   _   _   _   _   _   _   0   1   _   _   5   _   6   _   _   _	11000110000000000	00000001100101000
  33 |   0   2 -23   4 |    _   _   _   _   _   _   _   _   _   0   _   1   3   4   _   _   _	11011000000000000	00000000010111000
  34 |   0   2  19   3 |   12   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000010110	10110000000000000
  35 |   0   2 -18   3 |    _   _   _   _   _   _   _   _   0   4   _   _   5   _   _   _   _	10001100000000000	00000000110010000
  36 |   0   2 -19   3 |    _   _   _   _   _   _   _   _   _   3   4   _   _   5   _   _   _	00011100000000000	00000000011001000
  37 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   2   3   4   _   _   _   _   _	00111000000000000	00000000011100000
  38 |   0   2 -21   3 |    _   _   _   _   _   _   _   _   _   1   2   3   _   _   _   _   _	01110000000000000	00000000011100000
  39 |   0   2 -22   3 |    _   _   _   _   _   _   _   _   _   _   1   2   4   _   _   _   _	01101000000000000	00000000001110000
  40 |   0   2 -24   3 |    _   _   _   _   _   _   _   _   _   _   0   _   2   3   _   _   _	10110000000000000	00000000001011000
  41 |   0   2 -25   3 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _	11100000000000000	00000000000111000
  42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12	00000000100110000	00000000000000111
  43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10	00000001011000000	00000000000000111
  44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4	10011000000000000	00000000000000111
  45 |   0   2  27   2 |   15  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000011	11000000000000000
  46 |   0   2  20   2 |    _   _  15   _  16   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000011	00101000000000000
  47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _	00000000000001010	00000000000000110
  48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15	00000000000000110	00000000000000011
  49 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _	00000000000011000	00000000000000110
  50 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _  13	00000000000101000	00000000000000101
  51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11	00000000001100000	00000000000000011
  52 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9	00000010010000000	00000000000000101
  53 |   1   2  10   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7   _	00000101000000000	00000000000000110
  54 |   1   2   9   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7	00000011000000000	00000000000000011
  55 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _	00001100000000000	00000000000000110
  56 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   5	00010100000000000	00000000000000101
  57 |   0   2  21   2 |    _  13   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000001001	01010000000000000
  58 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3	00110000000000000	00000000000000011
  59 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2	01100000000000000	00000000000000011
  60 |   0   2  25   1 |    _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000010	01000000000000000
  61 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14	00000000000000100	00000000000000001
  62 |   0   2  29   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000001	10000000000000000
  63 |   0   2  23   1 |   13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000001000	10000000000000000
  64 |   1   2  19   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  10   _   _	00000000001000000	00000000000000100
  65 |   1   2  18   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _	00000000010000000	00000000000000100
  66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _	00000000000010000	00000000000000010
  67 |   0   2  26   1 |   14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000100	10000000000000000
  68 |   0   2 -26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _	01000000000000000	00000000000001000
  69 |   0   2  24   1 |    _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000100	01000000000000000
  70 |   0   2 -27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _   _	10000000000000000	00000000000010000
  71 |   1   2  12   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _	00000000100000000	00000000000000010
  72 |   1   2  11   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8	00000000100000000	00000000000000001
  73 |   0   2 -28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _   _	10000000000000000	00000000000001000
  74 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _	00000000000000001	00000000000000100
  75 |   1   2   8   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6	00000010000000000	00000000000000001
  76 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _	00000000000000010	00000000000000100
  77 |   1   2  28   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _   _	00000000000000100	00000000000000100
  78 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _	00100000000000000	00000000000000100
  79 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _	01000000000000000	00000000000000100
  80 |   1   2   2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _	00001000000000000	00000000000000010
  81 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _	00000000000000001	00000000000000010
  82 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16	00000000000000001	00000000000000001
  83 |   0   2  22   1 |    _   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _	00000000000000001	00100000000000000
  84 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1	01000000000000000	00000000000000001
  85 |   1   2  -3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _	10000000000000000	00000000000000010
  86 |   1   2  -4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0	10000000000000000	00000000000000001
---------------------------------------------------------------------------------------------

===========================================================================

Solution: 1

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 3 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _   _
   _   4   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0EFFD000E00DG0F0GGCD000E00DE0D

Seed (after)

AAEADAAAAEFDAFFAACADAAAAEFDAEDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000000000000000000C00000000000
Input row #  2                             000000D000000D0000000D000000D00D
Input row #  2                              000E000000E00000000000000E000E00
Input row #  2                                        0F00FF0000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 2

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 3 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14   _   _   _   _   _   _
   _   4   _   _   _   _   _   _  12   _   _   _   _  16   _   _   _
   _   _   5   _   _   _   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   _   0   1   2   _   _   _   _   8   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0FFCD000E00CG0F0GGCD000E00CE0D

Seed (after)

AACADAAAAECFAFFAACADAAAAECFAEDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000C000
Input row #  2                             000000D00000000000000D000000000D
Input row #  2                              0000000000E00000000000000E000E00
Input row #  2                                         0F0FF00000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80200040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0001001a)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 3

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 3 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15   _   _   _   _   _
   _   _   _   _   _   _   _   _  12   _   _   _   _  16   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _  14   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0FECF000E00EG0F0GGCD000E00EC0D

Seed (after)

AACAEAAAAFEFAEFAACADAAAAFECAEDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C00
Input row #  2                             000000000000000000000D000000000D
Input row #  2                               0000E00000E00E00000000000E00E000
Input row #  2                                       0F0F00F000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80200000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0001004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 4

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 3 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   _   _   _   _   _   _   _  12   _   _  14   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _   _  15   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0FECF000E00EG0F0GGCD000E00DE0C

Seed (after)

AACAEAAAAFEFAEFAACADAAAAFEDACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000000C
Input row #  2                             000000000000000000000D000000D000
Input row #  2                               0000E00000E00E00000000000E000E00
Input row #  2                                       0F0F00F000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10200000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0001004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 5

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   _   _  11   _   _  14  15  16   _   _   _   _
   2   4   _   _   _   _   _   _  12   _   _   _   _   _   _   _   _
   _   _   0   _   1   3   _   _   _   8   _   _   _   _   _   _   _
   _   _   _   _   _   _   5   _   _   _   _   _   _  13   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDED000F00CG0E0GGCD000F00CC0C

Seed (after)

AADADAAAAECEAEFAACADAAAAECCACFAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C000000C0000000CC0C
Input row #  2                             0000D0D00000000000000D0000000000
Input row #  2                                       0E0E0E0000000000E000000000000000
Input row #  2                                   0000000000F00000000000000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0102000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0001002a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000400)), 4));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 6

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   _   _  11   _   _  14  15  16   _   _   _   _
   2   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   0   _   1   3   4   _   _   8   _   _   _  12   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDEE000F00CG0E0GGCE000F00CC0C

Seed (after)

AADAFAAAAECEAEEAACAFAAAAECCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C000000C0000000CC0C
Input row #  2                             0000D000000000000000000000000000
Input row #  2                                       0E0E0EE000000000E0000E0000000000
Input row #  2                         0000000000F00000000000000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0102000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021006a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 7

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   8   _   _   _   _  14  15  16   _   _   _   _
   1   3   _   _   _   _   _   _  11  13   _   _   _   _   _   _   _
   _   _   0   _   _   _   4   _   _   _   _   _   _  12   _   _   _
   _   _   _   _   2   _   _   5   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DFDE000F00CG0C0GGDE000D00CC0C

Seed (after)

AADADAAAAECFACEAAFADAAAADCCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C00C00000000000CC0C
Input row #  2                              000D0D00000000000000D0000D000000
Input row #  2                                       0E0000E00000000000000E0000000000
Input row #  2                                      0000F00000F000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0012000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02100028)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200042)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000410)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 8

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   17 |   0   2  10   5 |    _   7  10  11  12   _   _   _  15   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   8   _   _   _   _  14  15  16   _   _   _   _
   1   _   5   _   _   _   _   9  11  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _
   _   7   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00CF0C0DEDF000D00CC0C

Seed (after)

AADAFAAAADCFACEAADADAAAADCCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C00C00000000000CC0C
Input row #  2                              000D000000D0000000D0D0000D000000
Input row #  2                                         0000E00000000000000E000000000000
Input row #  2                     00000000000000F000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0012000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02140408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00204000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 9

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14  15  16   _   _   _   _
   1   3   5   _   _   7   _   9   _  13   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   4   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEDF000D00CD0G0DEGG000D00CC0C

Seed (after)

AADADAAAADCEADEAADAFAAAADCCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C00000000000000CC0C
Input row #  2                              000D0D0000D000D000D000000D000000
Input row #  2                                         0E00E00000000000000E000000000000
Input row #  2                                            000000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0002000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02044428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080012)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 10

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   7   8   _   _   _   _  14  15  16   _   _   _   _
   1   _   5   _   _   _   _   9  11  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _
   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00CC0C0DEDF000D00CC0C

Seed (after)

AADAFAAAADCCACEAADADAAAADCCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000CC0C00000000000CC0C
Input row #  2                              000D000000D0000000D0D0000D000000
Input row #  2                                         0000E00000000000000E000000000000
Input row #  2              000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0016000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02140408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 11

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   80 |   1   2   2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   _   _   _   _   _  14  15  16   _   _   _   _
   1   3   5   _   _   7   _   9  11  13   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEDG000D00CD0F0DEDF000D00CC0C

Seed (after)

AADADAAAADCEADEAADADAAAADCCACEAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C00000000000000CC0C
Input row #  2                              000D0D0000D000D000D0D0000D000000
Input row #  2                                         0E00E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F0000F0000000000
Input row #  2                             000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0002000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02144428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080012)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 2));
}


===========================================================================

Solution: 12

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   49 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   _   8   _   _   _   _  14  15  16   _   _   _   _
   1   3   5   _   _   _   _   9  11   _   _   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   7   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEDF000D00CE0C0DEDG000G00CC0C

Seed (after)

AADADAAAADCEACEAADADAAAAECCACEAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000C00C00000000000CC0C
Input row #  2                              000D0D0000D0000000D0D00000000000
Input row #  2                                         0E00E000000000E0000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              000000F0000000000000000000000000
Input row #  2          000000000000000000000G000G000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0012000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084012)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02200000)), 21));
}


===========================================================================

Solution: 13

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   7   8   _   _   _   _  14  15  16   _   _   _   _
   1   3   5   _   _   _   _   9  11  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   2   _   _   _   _   _   _  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEDF000D00CC0C0DEDG000D00CC0C

Seed (after)

AADADAAAADCCACEAADADAAAADCCACEAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000CC0C00000000000CC0C
Input row #  2                              000D0D0000D0000000D0D0000D000000
Input row #  2                                         0000E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0016000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02140428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 14

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   2 -25   3 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   6   7   8   _   _   _   _  14  15   _   _   _   _   _
   _   _   5   _   _   _   _   9  11  13   _   _   _   _   _   _   _
  10  12   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   1   2   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FFGG000D00CC0C0DEDE000D00CC0E

Seed (after)

AAEAEAAAADCCACEAADADAAAADCCAFFAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            0000000000000CC0C00000000000CC00
Input row #  2                              0000000000D0000000D0D0000D000000
Input row #  2              0000000000000000000E0E000000000E
Input row #  2                                                        000FF000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30016000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02140400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80280000)), 17));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000018)), 25));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 15

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _  14   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0GGCE000D00DC0F

Seed (after)

AACADAAAAEDEADEAACAFAAAAEDCADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C00
Input row #  2                               0000D00000D00D00000000000D00D000
Input row #  2                                       0E0E00E000000000E0000E0000000000
Input row #  2                   0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 16

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   2   _   5   _   6   _   _   _   _   _   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0GGCE000F00CC0C

Seed (after)

AACADAAAAEDEADEAACAFAAAAECCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000CC0C
Input row #  2                               0000D00000D00D000000000000000000
Input row #  2                                       0E0E00E000000000E0000E0000000000
Input row #  2                         0000000000000000000000000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 17

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _   _   _  14   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _  13   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0GGCE000F00DC0F

Seed (after)

AACADAAAAEDEADEAACAFAAAAEFCADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C00
Input row #  2                               0000D00000D00D00000000000000D000
Input row #  2                                       0E0E00E000000000E0000E0000000000
Input row #  2                         0000000000000000000000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000000)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 18

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15  16   _   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _  14   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0GGCE000D00FC0C

Seed (after)

AACADAAAAEDEADEAACAFAAAAEDCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C0C
Input row #  2                               0000D00000D00D00000000000D000000
Input row #  2                                       0E0E00E000000000E0000E0000000000
Input row #  2                      0000000000000000000000000000F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 19

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   2   _   5   _   6   7   _  10   _   _   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   _   _  12   _   _   _
   9   _  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EDGG000D00DD0E0FDCE000F00CC0C

Seed (after)

AAFADAAAAFDEADDAACADAAAAECCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000000000000000000C0000000CC0C
Input row #  2                               0000D00000D00DD0000D000000000000
Input row #  2                                       000E000000000000E0000E0000000000
Input row #  2               000000000000000000F000000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0100000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02040000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 20

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   34 |   0   2  19   3 |   12   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   2   _   5   _   6   7   _  10   _  13   _   _  15   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   9   _   _   _   _   _
  12   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EDGG000D00DD0E0EDCF000D00FD0C

Seed (after)

AAFADAAAAFDEADDAACADAAAAEDEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000000000000000000C0000000000C
Input row #  2                               0000D00000D00DD0000D00000D000D00
Input row #  2                                       000E000000000000E0E0000000000000
Input row #  2            000000000000000000000F000000F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80100000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10200000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 21

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _  13   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DF0E0EDCE000D00GG0C

Seed (after)

AACADAAAAEDEADEAACADAAAAEDEACEAA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000000C
Input row #  2                               0000D00000D00D00000D00000D000000
Input row #  2                                       0E0E00E000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F00000000000000000
Input row #  2       0000000000000000000000000000GG00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
}


===========================================================================

Solution: 22

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   50 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _  13
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _   _   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DF0E0FDCE000G00CC0C

Seed (after)

AACADAAAAEDEADEAACADAAAAECCACEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000CC0C
Input row #  2                               0000D00000D00D00000D000000000000
Input row #  2                                       0E0E00E000000000E0000E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2           0000000000000000000000000G000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000000)), 20));
}


===========================================================================

Solution: 23

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   61 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _  13   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DF0E0FDCE000D00GC0C

Seed (after)

AACADAAAAEDEADEAACADAAAAEDCACEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C0C
Input row #  2                               0000D00000D00D00000D00000D000000
Input row #  2                                       0E0E00E000000000E0000E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2        0000000000000000000000000000G000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000000)), 23));
}


===========================================================================

Solution: 24

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   82 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _  15   _   _   _   _   _
   _   2   _   5   _   6   _   _  10   _  13   _  14   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DF0E0FDCE000D00DC0G

Seed (after)

AACADAAAAEDEADEAACADAAAAEDCADEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C00000000C00
Input row #  2                               0000D00000D00D00000D00000D00D000
Input row #  2                                       0E0E00E000000000E0000E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 25

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   7   _  10   _   _   _   _   _   _   _   _
   _   _   0   _   1   _   _   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCF000D00DD0E0EDCE000G00CG0C

Seed (after)

AACADAAAAEDEADDAACADAAAAECEACEAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000C00C
Input row #  2                               0000D00000D00DD0000D000000000000
Input row #  2                                       0E0E000000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              000000F0000000000000000000000000
Input row #  2      0000000000000000000000000G000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025000a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000000)), 25));
}


===========================================================================

Solution: 26

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   49 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   7   _  10   _   _   _   _  15   _   _   _
   _   _   0   _   1   _   _   _   _   8   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCF000D00DD0E0EDCG000G00CD0C

Seed (after)

AACADAAAAEDEADDAACADAAAAECEACDAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000C00C
Input row #  2                               0000D00000D00DD0000D000000000D00
Input row #  2                                       0E0E000000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              000000F0000000000000000000000000
Input row #  2          000000000000000000000G000G000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x20086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0005000a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02200000)), 21));
}


===========================================================================

Solution: 27

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
 4 |   54 |   1   2   9   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _   _   _   _   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0EDCE000F00CF0C

Seed (after)

AACADAAAAEDEADEAACADAAAAECEACEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000C00C
Input row #  2                               0000D00000D00D00000D000000000000
Input row #  2                                       0E0E00E000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2      0000000000000000000000000F000F00
Input row #  2                      00000000000000G00000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000000)), 25));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004000)), 9));
}


===========================================================================

Solution: 28

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
 4 |   84 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   7   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _   _   _   _   _   _   _   _
   _   _   0   _   _   _   4   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0GDCE000D00DC0E0EDCE000F00CF0C

Seed (after)

AACADAAAAEDCADEAACADAAAAECEACEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000C00000C0000000C00C
Input row #  2                               0000D00000D00D00000D000000000000
Input row #  2                                       0E0000E000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2      0000000000000000000000000F000F00
Input row #  2                                 000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90104020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00250042)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000000)), 25));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 2));
}


===========================================================================

Solution: 29

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   55 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _   _   _  16   _   _   _   _
   _   2   _   5   _   6   7   _  10   _  13   _   _   _   _   _   _
   _   _   0   _   1   _   _   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCG000D00DD0E0EDCE000D00FF0C

Seed (after)

AACADAAAAEDEADDAACADAAAAEDEACEAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000000C
Input row #  2                               0000D00000D00DD0000D00000D000000
Input row #  2                                       0E0E000000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  2                         000000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025000a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000040)), 6));
}


===========================================================================

Solution: 30

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   79 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   7   _   _  11   _   _   _   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _  13   _   _   _   _   _   _
   _   _   0   _   _   _   4   _   _   8   _   9   _  12   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0GDCE000D00DC0E0EDCE000D00FF0C

Seed (after)

AACADAAAAEDCADEAACADAAAAEDEACEAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000C00000C0000000000C
Input row #  2                               0000D00000D00D00000D00000D000000
Input row #  2                                       0E0000E000000000E0E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  2                            000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80104020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00250042)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 3));
}


===========================================================================

Solution: 31

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   49 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
 4 |   54 |   1   2   9   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   7
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   _   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _   _   _   _  15   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0EDCE000D00DG0E0EDCF000F00CD0C

Seed (after)

AACADAAAAEDEADEAACADAAAAECEACDAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000000000C0000000C00C
Input row #  2                               0000D00000D00D00000D000000000D00
Input row #  2                                       0E0E00E000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2          000000000000000000000F000F000000
Input row #  2                      00000000000000G00000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90100020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x20082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0005004a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02200000)), 21));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004000)), 9));
}


===========================================================================

Solution: 32

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   49 |   1   2  21   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
 4 |   84 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   _   7   _   _  11   _   _  14   _  16   _   _   _   _
   _   2   _   5   _   6   _   _  10   _   _   _   _  15   _   _   _
   _   _   0   _   _   _   4   _   _   8   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12  13   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0GDCE000D00DC0E0EDCF000F00CD0C

Seed (after)

AACADAAAAEDCADEAACADAAAAECEACDAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C00000000C00000C0000000C00C
Input row #  2                               0000D00000D00D00000D000000000D00
Input row #  2                                       0E0000E000000000E0E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2          000000000000000000000F000F000000
Input row #  2                                 000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90104020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x20082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050042)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02200000)), 21));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 2));
}


===========================================================================

Solution: 33

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |   23 |   0   2 -11   5 |    _   _   _   _   _   _   1   4   _   6   7   _   _   9   _   _   _
 3 |   34 |   0   2  19   3 |   12   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   7   8   _  11   _   _   _  15  16   _   _   _   _
   _   2   _   5   _   _   _   _  10   _  13   _   _   _   _   _   _
   _   _   _   _   _   _   1   _   _   6   _   _   _   9   _   _   _
  12   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EDGG000D00EC0C0EDCF000D00FC0C

Seed (after)

AAFADAAAAFDCACEAACADAAAAEDCACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000000000000C0C000C00000000C0C
Input row #  2                               0000D00000D00000000D00000D000000
Input row #  2                                          000E000000000E0000E0000000000000
Input row #  2            000000000000000000000F000000F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0114000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042008)), 11));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10200000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 34

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   2   _   _   _   _   _   _   _   _   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DECD000F00CG0D0GGCD000F00CC0C

Seed (after)

AACAFAAAADCDAEDAACAFAAAADCCACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000CC0C
Input row #  2                                       0D0D00D000000000D0000D0000000000
Input row #  2                                        0000E000000000000000000000000000
Input row #  2                         0000000000F00000000000000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 35

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   57 |   0   2  21   2 |    _  13   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   _   _   _   _   2   _   _   5   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
   _  13   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DECD000E00CF0D0FFCD000G00CC0C

Seed (after)

AACAGAAAADCDAEDAACAEAAAADCCACDAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000CC0C
Input row #  2                                       0D0D00D000000000D0000D0000000000
Input row #  2                                        0000E00000E000000000000000000000
Input row #  2          0000000000000000000000000G000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000FF000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000410)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 36

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   37 |   0   2 -20   3 |    _   _   _   _   _   _   _   _   _   2   3   4   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   8   _  11   _   _  14  15  16   _   _   _   _
   _   _   0   _   1   _   4   _   _   _   _   _   _  12   _   _   _
   _   5   _   _   _   _   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DFCD000E00CG0C0GGCD000E00CC0C

Seed (after)

AACAEAAAADCDACDAACAEAAAAFCCACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C00C000C0000000CC0C
Input row #  2                                       0D0D00D00000000000000D0000000000
Input row #  2                         0000000000E00000000000000E000000
Input row #  2                                                   0000F000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0112020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0020004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000400)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 20));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 37

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   59 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14  15  16   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   _   _  12   _   _   _
   _   5   _   _   _  10   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DGCD000E00CF0D0FECD000E00CC0C

Seed (after)

AACAEAAAADCDAEDAACAEAAAADCCACDAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000CC0C
Input row #  2                                       0D0D00D000000000D0000D0000000000
Input row #  2                         0000000000E00000000E00000E000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2                                0000G000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0021004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 1));
}


===========================================================================

Solution: 38

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   59 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2
 4 |   65 |   1   2  18   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   7   _   _  11   _   _  14  15  16   _   _   _   _
   _   _   0   _   _   _   4   _   _   8   _   _   _  12   _   _   _
   _   5   _   _   _  10   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   9   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0FFCD000E00CC0D0GECD000E00CC0C

Seed (after)

AACAEAAAADCCAEDAACAEAAAADCCACDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000CC00000C0000000CC0C
Input row #  2                                       0D0000D000000000D0000D0000000000
Input row #  2                         0000000000E00000000E00000E000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                000FF000000000000000000000000000
Input row #  2             000000000000000000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0106020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210042)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000018)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040000)), 18));
}


===========================================================================

Solution: 39

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   59 |   1   2  -1   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2
 4 |   76 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   7   _   _  11   _   _  14   _  16   _   _   _   _
   _   _   0   _   _   _   4   _   _   8   _   9   _  12   _   _   _
   _   5   _   _   _  10   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   2
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0FFCD000E00CC0D0DECD000E00CG0C

Seed (after)

AACAEAAAADCCAEDAACAEAAAADCDACDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000CC00000C0000000C00C
Input row #  2                                       0D0000D000000000D0D00D0000000000
Input row #  2                         0000000000E00000000E00000E000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                                000FF000000000000000000000000000
Input row #  2  00000000000000000000000000000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90106020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00250042)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000018)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 29));
}


===========================================================================

Solution: 40

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   7   8   _  11   _   _  14  15  16   _   _   _   _
   _   _   _   _   _   _   5   _   _   _   _   _   _  13   _   _   _
   _   _   1   2   _   _   _   _   6   9   _   _   _   _   _   _   _
  10  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EEGG000D00EC0C0EFCF000D00CC0C

Seed (after)

AAFAFAAAAEECACDAACAEAAAAECCACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000000000000C0C000C0000000CC0C
Input row #  2                                   0000000000D00000000000000D000000
Input row #  2                                     000EE00000000E0000E0000000000000
Input row #  2              0000000000000000000F0F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0114000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000400)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042018)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 41

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   50 |   1   2  20   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _  13
 4 |   55 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14  15   _   _   _   _   _
   _   _   _   _   0   1   2   _   _   7   _   _   9  10   _   _   _
   _   8  12   _   _   _   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  13
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DDCG000G00CD0E0DDCE000F00CC0E

Seed (after)

AACAEAAAAECDADDAACAEAAAADCCADDAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000CC00
Input row #  2                                         0D0DD000000000D000DD000000000000
Input row #  2                   0000000000000000E0000E000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2           0000000000000000000000000F000000
Input row #  2                         000000G000G000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c401a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80210000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000000)), 20));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000440)), 6));
}


===========================================================================

Solution: 42

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    0 |   0   2   3   8 |    3   _   _   6   7   8   _  11   _   _  14  15  16   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   55 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
 4 |   84 |   1   2  -2   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   3   _   _   6   _   _   _  11   _   _  14  15   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   7   _   _   9  10   _   _   _
   _   8  12   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0GDCF000F00CD0E0DDCE000E00CC0E

Seed (after)

AACAEAAAAECDAEDAACAEAAAADCCADDAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                            00000C0000000C000000C0000000CC00
Input row #  2                                         0D00D000000000D000DD000000000000
Input row #  2                   0000000000000000E0000E000E00000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                         000000F000F000000000000000000000
Input row #  2                                 000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30102020)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4012)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82210000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000440)), 6));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 2));
}


===========================================================================

Solution: 43

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 3 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DFFC000D00CG0F0GGDE000D00CD0C

Seed (after)

AADACAAAADFCAFFAAEADAAAADFCADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00000000000000C00C
Input row #  2                              000D000000D000000000D0000D000D00
Input row #  2                           000000000000000000000E0000000000
Input row #  2                                        0F00FF0000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90002040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22100408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 44

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 3 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   8   _   _   _   _  14   _  16   _   _   _
   _   3   5   _   _   _   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   4   _   _   _   6   _   _  12   _   _   _   _   _   _
   _   _   _   _   0   1   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0FCDE000D00EG0C0GGDE000D00CD0C

Seed (after)

AACADAAAADEFAFCAAEADAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000C00000000000C00C
Input row #  2                              00000D0000D000000000D0000D000D00
Input row #  2                                   000000E000000E0000000E0000000000
Input row #  2                                         0F0F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90010010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22100420)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00202040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0000000a)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 45

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   _   _   _   _   _  14   _  16   _   _   _
   _   _   _   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   1   _   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   0   _   _   3   _   5   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECFC000F00CD0G0DEGG000D00CD0C

Seed (after)

AACACAAAAEFCADFAADAFAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C00000000000000C00C
Input row #  2                              00000000000000D000D000000D000D00
Input row #  2                                     000E000000000000000E000000000000
Input row #  2                                        0F000F0000F000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90002050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000422)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 46

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   _   _   _   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   1   _   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   5   _   8   _   _  11   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000F00CD0F0DEFC000D00CD0C

Seed (after)

AACAFAAAAEFCADFAADACAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C0000000C000000C00C
Input row #  2                              00000000000000D000D000000D000D00
Input row #  2                                     000E000000000000000E000000000000
Input row #  2                         0000000000F00000F000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00110400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 47

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   8   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   6   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00FD0C0DEFC000D00CD0C

Seed (after)

AADAFAAAADEFADCAADACAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000000C0000C000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000E000000000000
Input row #  2                      0000000000000F000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90210000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00102000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 48

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   _   _   _   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   3   _   _   _   6   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEEC000D00ED0G0DEGG000D00CD0C

Seed (after)

AADACAAAADEEADFAADAEAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000000000000000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000EE0000000E00000E000000000000
Input row #  2                                            0F000000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90000040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082030)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000002)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 49

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   _   _   _   _   _  14   _  16   _   _   _
   1   3   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   4   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEDF000D00CD0G0DEGG000D00CD0C

Seed (after)

AADADAAAADECADFAADAFAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00000000000000C00C
Input row #  2                              000D0D0000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000E000000000000
Input row #  2                                            0F0000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90002000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 50

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00CD0C0DEDF000D00CD0C

Seed (after)

AADAFAAAADECADCAADADAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C00000000000C00C
Input row #  2                              000D000000D000D000D0D0000D000D00
Input row #  2                                     0000E00000000000000E000000000000
Input row #  2              000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90012000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22144408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 51

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   6   _  10  11   _   _   _   _   _
   _  12   _   _  14   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00ED0C0DEEF000D00FD0C

Seed (after)

AADAFAAAADEFADCAADAEAAAADEEADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000000C00000000000000C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000E00000EE00000000000
Input row #  2              000000000000000000000F000000F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 52

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00CD0C0DEFC000D00CD0C

Seed (after)

AADAFAAAADECADCAADACAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000E000000000000
Input row #  2               00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 53

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   8   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGC000D00CD0C0DEDF000D00CD0C

Seed (after)

AADACAAAADECADCAADADAAAADECADCAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00C00000000000C00C
Input row #  2                              000D000000D000D000D0D0000D000D00
Input row #  2                                     0000E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               000000000000000000000F0000000000
Input row #  2                              0G000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90012040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22144408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
}


===========================================================================

Solution: 54

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   _   _   8   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   3   _   _   _   6   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEEC000D00ED0C0DEFF000D00CD0C

Seed (after)

AADACAAAADEEADCAADAEAAAADECADCAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000000C00000000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000EE0000000E00000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000FF0000000000
Input row #  2                              0G000000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90010040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00082030)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00300000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000002)), 1));
}


===========================================================================

Solution: 55

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _  14   _  16   _   _   _
   1   3   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEDG000D00CD0C0DEFC000D00CD0C

Seed (after)

AADADAAAADECADCAADACAAAADECADCAA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000C00C
Input row #  2                              000D0D0000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                              0G0000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
}


===========================================================================

Solution: 56

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _   _   _  16   _   _   _
   1   3   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEDF000D00CD0C0DEEC000D00GD0C

Seed (after)

AADADAAAADECADCAADACAAAADEEADCAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000000C
Input row #  2                              000D0D0000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000EE00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2       0000000000000000000000000000G000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000000)), 24));
}


===========================================================================

Solution: 57

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   8   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEFC000D00CD0C0DEGC000D00CD0C

Seed (after)

AADACAAAADECADCAADACAAAADECADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00C0000C000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90212040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 15));
}


===========================================================================

Solution: 58

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   61 |   1   2  23   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   8   _  12   _   _   _   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEFC000D00CD0C0DEEC000D00GD0C

Seed (after)

AADACAAAADECADCAADACAAAADEEADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00C0000C000000000C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000EE00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2        0000000000000000000000000000G000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80212040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000000)), 23));
}


===========================================================================

Solution: 59

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _   _   _   _  14   _  16   _   _   _
   1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEDF000D00CD0C0DEDG000D00CD0C

Seed (after)

AADADAAAADECADCAADADAAAADECADCAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C00000000000C00C
Input row #  2                              000D0D0000D000D000D0D0000D000D00
Input row #  2                                     0000E00000000000000E000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90012000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22144428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 60

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   69 |   0   2  24   1 |    _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _   _   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DEFF000D00CD0C0DEEC000D00GD0C

Seed (after)

AADAGAAAADECADCAADACAAAADEEADCAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000000C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                     0000E00000000000000EE00000000000
Input row #  2       0000000000000000000000000000G000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000000)), 24));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 61

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   8  10  12   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   6   _   _  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000D00FD0C0ECFC000D00CD0C

Seed (after)

AACAFAAAADEFADCAACACAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000C00C0C000000C00C
Input row #  2                              0000000000D000D0000000000D000D00
Input row #  2                                      000E00000000000000E0000000000000
Input row #  2                      0000000000000F000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90290010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00102000)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 62

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   _  10   _   _   _  14   _  16   _   _   _
   _   3   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   0   _   4   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECDF000D00CD0G0ECGG000D00CD0C

Seed (after)

AACADAAAADECADFAACAFAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00000C00000000C00C
Input row #  2                              00000D0000D000D0000000000D000D00
Input row #  2                                      000E00000000000000E0000000000000
Input row #  2                                            0F0000F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90082010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004420)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 13));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 63

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000D00CD0C0ECDF000D00CD0C

Seed (after)

AACAFAAAADECADCAACADAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C00000000C00C
Input row #  2                              0000000000D000D00000D0000D000D00
Input row #  2                                      000E00000000000000E0000000000000
Input row #  2              000000000000000000000F0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 64

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _  11   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000D00CD0C0ECFC000D00CD0C

Seed (after)

AACAFAAAADECADCAACACAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C0C000000C00C
Input row #  2                              0000000000D000D0000000000D000D00
Input row #  2                                      000E00000000000000E0000000000000
Input row #  2               00000000000000000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90292010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 65

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGC000D00CD0C0ECDF000D00CD0C

Seed (after)

AACACAAAADECADCAACADAAAADECADCAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C00C00C00000000C00C
Input row #  2                              0000000000D000D00000D0000D000D00
Input row #  2                                      000E00000000000000E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               000000000000000000000F0000000000
Input row #  2                              0G000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
}


===========================================================================

Solution: 66

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
   _   3   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECDG000D00CD0C0ECFC000D00CD0C

Seed (after)

AACADAAAADECADCAACACAAAADECADCAA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C0C000000C00C
Input row #  2                              00000D0000D000D0000000000D000D00
Input row #  2                                      000E00000000000000E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                              0G0000G0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90292010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004420)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
}


===========================================================================

Solution: 67

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   3   5   _   _   7   _   _  11  13   _   _   _   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECDF000D00CD0C0ECDE000D00CG0C

Seed (after)

AACADAAAADECADCAACADAAAADECAECAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C00000000C00C
Input row #  2                              00000D0000D000D00000D0000D000000
Input row #  2                                      000E00000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2      00000000000000000000000000000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104420)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00240008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 25));
}


===========================================================================

Solution: 68

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _  11  13   _   _   _   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECFC000D00CD0C0ECDE000D00CG0C

Seed (after)

AACACAAAADECADCAACADAAAADECAECAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C00C00C00000000C00C
Input row #  2                              0000000000D000D00000D0000D000000
Input row #  2                                      000E00000000000000E00E0000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2       00000000000000000000000000000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00240008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 24));
}


===========================================================================

Solution: 69

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECFC000D00CD0C0ECGC000D00CD0C

Seed (after)

AACACAAAADECADCAACACAAAADECADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C00C00C0C000000C00C
Input row #  2                              0000000000D000D0000000000D000D00
Input row #  2                                      000E00000000000000E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000F00000000000000000000000000
Input row #  2                00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90292050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000022)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 15));
}


===========================================================================

Solution: 70

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   60 |   0   2  25   1 |    _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   _  11  13   _   _   _   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
   _  15   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECFF000D00CD0C0ECDE000D00CG0C

Seed (after)

AACAGAAAADECADCAACADAAAADECAECAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C00000000C00C
Input row #  2                              0000000000D000D00000D0000D000000
Input row #  2                                      000E00000000000000E00E0000000000
Input row #  2      00000000000000000000000000000G00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00240008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 25));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 71

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10   _   _   _  14   _  16   _   _   _
   _   3   5   _   _   7   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0ECDF000D00CD0C0ECDG000D00CD0C

Seed (after)

AACADAAAADECADCAACADAAAADECADCAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C00000000C00C
Input row #  2                              00000D0000D000D00000D0000D000D00
Input row #  2                                      000E00000000000000E0000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90092010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22104420)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 72

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _  12   _   _  14   _   _   _   _   _
   1   _   5   _   _   _   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _  11   _   _   _
   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CG0E0GGEC000D00CD0F

Seed (after)

AADACAAAADECAEEAAFACAAAADECADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C0000000C000000C000
Input row #  2                              000D000000D00000000000000D000D00
Input row #  2                                        0E00EE0000000000E000E00000000000
Input row #  2                 0000000000000000000000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00110032)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 73

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _  10   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CG0E0GCDF000D00CD0C

Seed (after)

AADACAAAADECAEEAACADAAAADECADCAA
GBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00000C00000000C00C
Input row #  2                              000D000000D000000000D0000D000D00
Input row #  2                                        0E00EE0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               000000000000000000000F0000000000
Input row #  2                 00000000000000G000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90082040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22100408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
}


===========================================================================

Solution: 74

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CG0E0DGFC000D00CD0C

Seed (after)

AADACAAAADECAEEAADACAAAADECADCAA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C0000000C000000C00C
Input row #  2                              000D000000D0000000D000000D000D00
Input row #  2                                        0E00EE0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               00000000000000000000F00000000000
Input row #  2                 00000000000000G0000G000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22040408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 16));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084000)), 14));
}


===========================================================================

Solution: 75

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _  10  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  11
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CF0E0FCGC000D00CD0C

Seed (after)

AADACAAAADECAEEAACACAAAADECADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00000C0C000000C00C
Input row #  2                              000D000000D00000000000000D000D00
Input row #  2                                        0E00EE0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2                00000000000000000000G00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90282040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 15));
}


===========================================================================

Solution: 76

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CF0E0DGGC000D00CD0C

Seed (after)

AADACAAAADECAEEAADACAAAADECADCAA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C0000000C000000C00C
Input row #  2                              000D000000D0000000D000000D000D00
Input row #  2                                        0E00EE0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F00000000000000000
Input row #  2                0000000000000000000GG00000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22040408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180000)), 15));
}


===========================================================================

Solution: 77

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _   _   _   _  14   _  16   _   _   _
   1   _   5   _   _   _   _   9  11  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _  10
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CF0E0DFDG000D00CD0C

Seed (after)

AADACAAAADECAEEAADADAAAADECADCAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00000000000000C00C
Input row #  2                              000D000000D0000000D0D0000D000D00
Input row #  2                                        0E00EE0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F0000F000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90002040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22140408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 78

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   81 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _  12   _   _  14   _   _   _   _   _
   1   _   5   _   _   _   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _  11   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   _  10
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CF0E0DFEC000D00CD0G

Seed (after)

AADACAAAADECAEEAADACAAAADECADEAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C0000000C000000C000
Input row #  2                              000D000000D0000000D000000D000D00
Input row #  2                                        0E00EE0000000000E000E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F0000F000000000000
Input row #  2    0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22040408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00110032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 27));
}


===========================================================================

Solution: 79

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
 4 |   82 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _  10  12   _   _  14   _   _   _   _   _
   1   _   5   _   _   _   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   2   3   _   _   _   8   _   _  11   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DEEC000D00CF0E0FCEC000D00CD0G

Seed (after)

AADACAAAADECAEEAACACAAAADECADEAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C00000C0C000000C000
Input row #  2                              000D000000D00000000000000D000D00
Input row #  2                                        0E00EE0000000000E000E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000F000F0000000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10282040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22000408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00110032)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00044000)), 14));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 80

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
 4 |   78 |   1   2   4   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   4   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   _   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0DGEC000D00CD0E0DFFC000D00CD0C

Seed (after)

AADACAAAADECADEAADACAAAADECADCAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000C000000C0000000C000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                                        0E000E0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                0000000000000000000FF00000000000
Input row #  2                           0000G000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202040)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010022)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 4));
}


===========================================================================

Solution: 81

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
 4 |   79 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   _   _  12   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   0   _   _   3   _   _   _   8   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0GCEC000D00CD0E0DFFC000D00CD0C

Seed (after)

AACACAAAADECADEAADACAAAADECADCAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C0000000C000000C00C
Input row #  2                              0000000000D000D000D000000D000D00
Input row #  2                                        0E000E0000000000E000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                0000000000000000000FF00000000000
Input row #  2                            000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90202050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010022)), 9));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 3));
}


===========================================================================

Solution: 82

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _
 3 |   38 |   0   2 -21   3 |    _   _   _   _   _   _   _   _   _   1   2   3   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   8   _  12   _   _  14   _  16   _   _   _
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   6   _  10  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   2   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DFGG000D00ED0C0DEEC000D00CD0C

Seed (after)

AADAEAAAADEEADCAADACAAAADFCADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000000C0000C000000C00C
Input row #  2                              000D000000D000D000D000000D000D00
Input row #  2                      0000000000000E00000EE00000000000
Input row #  2                                                    0000F000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90210000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182000)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000010)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 83

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 2 |   18 |   0   2   9   5 |    _   6   9  10  11   _   _   _  14   _   _   _   _   _   _   _   _
 3 |   39 |   0   2 -22   3 |    _   _   _   _   _   _   _   _   _   _   1   2   4   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   8   _  12   _   _  14   _  16   _   _   _
   _   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   6   _  10  11   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FCGG000D00ED0C0DEEC000D00CD0C

Seed (after)

AACAEAAAADEEADCAADACAAAADFCADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000C0000C000000C00C
Input row #  2                              0000000000D000D000D000000D000D00
Input row #  2                      0000000000000E00000EE00000000000
Input row #  2                                                     000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90210010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182000)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 84

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   47 |   1   2  25   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  13  15   _
 4 |   52 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   _   _   _  10  12   _   _  14   _  16   _   _   _
   _   _   _   5   _   _   7   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   1   3   _   _   _   8   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0ECEC000D00GD0E0GCEC000D00CF0C

Seed (after)

AACACAAAAEDEAEDAACACAAAAEDCAECAA
GBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000000000C0C000000C00C
Input row #  2                               0000000000D000D0000000000D000000
Input row #  2                                       0E0E0E0000000000E000E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2      00000000000000000000000000000F00
Input row #  2                  0000000000000G0000G0000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90280050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02004400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0011002a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 25));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042000)), 13));
}


===========================================================================

Solution: 85

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   52 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   _   _   _  10  12   _   _   _   _  16   _   _   _
   _   _   _   5   _   _   7   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   1   3   _   _   _   8   _   9  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0ECEC000D00GD0E0ECEC000D00FF0C

Seed (after)

AACACAAAAEDEAEDAACACAAAAEDEAECAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000000000C0C000000000C
Input row #  2                               0000000000D000D0000000000D000000
Input row #  2                                       0E0E0E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  2                  0000000000000G000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80280050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02004400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0015002a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00002000)), 13));
}


===========================================================================

Solution: 86

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   56 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   5
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   _   _   _  10  12   _   _   _   _  16   _   _   _
   _   _   _   5   _   6   7   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   1   _   _   _   _   8   _   9  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0ECGC000D00DD0E0ECEC000D00FF0C

Seed (after)

AACACAAAAEDEADDAACACAAAAEDEAECAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000000000C0C000000000C
Input row #  2                               0000000000D00DD0000000000D000000
Input row #  2                                       0E0E000000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  2                          00000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80280050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02006400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0015000a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000020)), 5));
}


===========================================================================

Solution: 87

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   79 |   1   2   3   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   6   _   _  10  12   _   _   _   _  16   _   _   _
   _   _   _   5   _   _   7   _   _   _  13   _   _   _   _   _   _
   _   _   0   _   _   3   _   _   _   8   _   9  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0GCEC000D00CD0E0ECEC000D00FF0C

Seed (after)

AACACAAAAEDCAEDAACACAAAAEDEAECAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000C00000C0C000000000C
Input row #  2                               0000000000D000D0000000000D000000
Input row #  2                                       0E000E0000000000E0E0E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  2                            000G0000000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80282050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02004400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00150022)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 3));
}


===========================================================================

Solution: 88

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   52 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
 4 |   81 |   1   2  27   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   4   _   _   _   _   _  10  12   _   _  14   _   _   _   _   _
   _   _   _   5   _   _   7   _   _   _  13   _   _  15   _   _   _
   _   _   0   _   1   3   _   _   _   8   _   _  11   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0ECEC000D00FD0E0FCEC000D00CD0G

Seed (after)

AACACAAAAEDEAEDAACACAAAAEDCAEDAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C0C000000000000C0C000000C000
Input row #  2                               0000000000D000D0000000000D000D00
Input row #  2                                       0E0E0E0000000000E000E00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                  0000000000000F0000F0000000000000
Input row #  2    0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10280050)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0011002a)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00042000)), 13));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 27));
}


===========================================================================

Solution: 89

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   _   _  12   _   _   _   _  16   _   _   _
   _   _   _   5   _   _   7   _   _   _   _   _  14   _   _   _   _
   _   _   1   _   _   _   _   _   _   9  10  11   _   _   _   _   _
   _   8   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000D00CD0F0EEEC000F00DF0C

Seed (after)

AACAFAAAAEDCAFDAAFACAAAAEEEADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C0000000C000000000C
Input row #  2                               0000000000D000D0000000000000D000
Input row #  2                                     000E00000000000000EEE00000000000
Input row #  2                   0000000000000000F00000000F000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80202010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10004400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22010000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 90

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _   _   _  16   _   _   _
   _   2   _   5   _   _   _   _   _   _   _   _  14   _   _   _   _
   _   _   1   _   _   _   _   _   _   9  10  11   _   _   _   _   _
   7   _   _   _   _  13   _  15   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EDGG000D00CF0C0EEEC000F00DF0C

Seed (after)

AAFADAAAAEDCAFCAAFACAAAAEEEADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000000C
Input row #  2                               0000D00000D00000000000000000D000
Input row #  2                                     000E00000000000000EEE00000000000
Input row #  2                   00000000000000F0000000000F000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 91

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   17 |   0   2  10   5 |    _   7  10  11  12   _   _   _  15   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   8  10   _   _   _   _   _  16   _   _   _
   _   _   _   5   _   6   _   _   _   _  13   _  14   _   _   _   _
   _   _   1   _   _   _   _   _   _   9   _  11   _   _   _   _   _
   _   7   _   _  12   _   _   _  15   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000D00DF0C0ECEF000D00DF0C

Seed (after)

AACAFAAAAEDFADCAACAFAAAAEDEADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000C00C00000000000C
Input row #  2                               0000000000D00D00000000000D00D000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                     00000000000000F000000F0000000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80090010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12002400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20204000)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 92

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _   _
   _   2   _   5   _   6   7   _   _   _   _   _  14  15   _   _   _
   _   _   1   _   _   _   _   _   _   9  10  11   _   _   _   _   _
   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EDGG000D00DD0F0EEEC000F00DD0F

Seed (after)

AAFADAAAAEDFADDAAFACAAAAEEEADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             000000000000000000000C0000000000
Input row #  2                               0000D00000D00DD0000000000000DD00
Input row #  2                                     000E00000000000000EEE00000000000
Input row #  2                 0000000000000000F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30006410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 93

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   9  11   _   _   _   _
   _   _   6   7   _   _   _  12   _  14  15   _   _   _   _   _   _
   _   5   _   _   _  10   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000F00EE0C0DFDE000F00EE0C

Seed (after)

AACAFAAAAEEDAFCAAEAFAAAAEEDADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000C00000000000000C
Input row #  2                                       000D00000000000000D0D00000000000
Input row #  2                           0000000000000EE000000E000000EE00
Input row #  2                         0000000000F00000000F00000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30206000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 94

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   _   _   _   _   _   _   _  14   _  16   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   _  11   _   _   _   _
   _   _   6   7   _   _   9  12   _   _  15   _   _   _   _   _   _
   _   5   _   _   _  10   _   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000F00EE0D0EFDE000F00CE0C

Seed (after)

AACAFAAAAEEDAFEAAEAFAAAADECADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000000000000000000C00C
Input row #  2                                       000D000000000000D000D00000000000
Input row #  2                           0000000000000EE000E00E0000000E00
Input row #  2                         0000000000F00000000F00000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90000010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00110008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20246000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02080400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 95

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 2 |    7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _
 3 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   8   _   _   _   _   _   _  16   _   _   _
   4   _   _   _   _   _   _  12   _  14  15   _   _   _   _   _   _
   _   0   _   _   _   5   _   _   _   _   _   _  13   _   _   _   _
   _   _   1   2   3   _   _   _   6   _   _  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0FFFD000E00FG0C0GGFD000E00DD0C

Seed (after)

AADAEAAAAFFFAECAADAFAAAADDFAECAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000000C00000000000000C
Input row #  2                           000000D00000000000000D000000DD00
Input row #  2                                  0E00000000E00000000000000E000000
Input row #  2                                     000FFF0000000F000000F00000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30200040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02000402)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00102038)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 96

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8   _   _   _   _  14   _  16   _   _   _
   _   _   _   _   _   _   _   _   7  10   _   _   _   _   _   _   _
   _   _   _   1   _   _   _   5   _   _   9   _  12   _   _   _   _
   _  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000E00CD0C0EDFE000F00CF0C

Seed (after)

AACAFAAAAFECAFCAAEADAAAADECAECAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00000000000C00C
Input row #  2                                    00000000000000D0000D000000000000
Input row #  2                                      000E000000E0000000E00E0000000000
Input row #  2               00000000000000000000F0000F000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90012010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00084000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00240408)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22100000)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 97

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 3 |   30 |   0   2 -14   4 |    _   _   _   _   _   _   _   1   3   5   _   _   7   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   6   _   8   _  12   _   _  14   _  16   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   5   _   _   7   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000F00CF0C0EDEC000E00CE0C

Seed (after)

AAEAEAAAAEDCAECAAFACAAAAFDCAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000000000000C00C0000C000000C00C
Input row #  2                                     0000D00000000000000D000000000000
Input row #  2               000000000000000000E0E0000E000E00
Input row #  2                                             000F000000F000F00000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90212000)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22140000)), 16));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004408)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 98

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 2 |   28 |   0   2  16   4 |    9  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
 3 |   30 |   0   2 -14   4 |    _   _   _   _   _   _   _   1   3   5   _   _   7   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _  11  13   _   _  15   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   5   _   _   7   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000F00CF0C0DCEC000E00CE0C

Seed (after)

AACAEAAAAEDCAECAACACAAAAFDCAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00C00C0C000000C00C
Input row #  2                                      000D00000000000000D0000000000000
Input row #  2               00000000000000000000E0000E000E00
Input row #  2                                             0000000000F000F00000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90292010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22100000)), 16));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004400)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 99

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    1 |   0   2   2   8 |    2   4   _   _   6   _   8  10  12   _   _  14   _  16   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   2   _   _   _   6   _   _   _   _   _   _  14   _   _   _   _   _
   _   _   _   _   _   1   _   _   _   7   _   _   9  10   _   _   _
   _   _  12   _   _   _   _  15   _   _   _   _   _   _   _   _   _
   _   5   _   8   _   _  11   _  13   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000F00CD0F0DDFE000F00CE0F

Seed (after)

AACAFAAAAEFCADFAAEAFAAAADFCADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                             0000C00000000C00000000000000C000
Input row #  2                                         000D0000000000D000DD000000000000
Input row #  2                   000000000000000000000E0000000E00
Input row #  2                         0000000000F00000F000F0000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002010)), 2));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4008)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20200000)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82110400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 100

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   9  11   _   _   _   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _  14   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _   _
   _   _   7   _   8   _  10   _   _  15   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00DF0F0CFCE000D00DF0F

Seed (after)

AACADAAAAFDFADFAACACAAAAFDFADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C00000000000000C0C00000000000
Input row #  2                               0000D00000D00D00000000000D00D000
Input row #  2                                       000000000000000000000E0000000000
Input row #  2                          00000000000000F0F00F000000000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0094000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 101

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   9  11   _   _   _   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _  13   _  14  15   _   _   _
   _   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _   _
   _   _   7   _   8   _  10   _   _   _   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00DF0F0CFCE000D00DD0F

Seed (after)

AACADAAAAFDFADFAACACAAAAEDFADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C00000000000000C0C00000000000
Input row #  2                               0000D00000D00D00000000000D00DD00
Input row #  2                                  000000000000000000000E0000000000
Input row #  2                          00000000000000F0F00F00000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80094000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 102

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   9  11  13   _   _   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _   _   _  14  15   _   _   _
   _   _   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _
   _   _   7   _   8   _  10   _   _   _   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00DF0F0CFCE000C00DD0F

Seed (after)

AACADAAAAFDFADFAACACAAAACEFADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C00000000000000C0C0000C000000
Input row #  2                               0000D00000D00D00000000000000DD00
Input row #  2                                   000000000000000000000E0000000000
Input row #  2                          00000000000000F0F00F00000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02140008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80094000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 103

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   9  11   _   _   _   _   _   _   _   _
   _   2   _   5   _   6   _   _   _   _   _   _  14   _   _   _   _
   _   _   _   _   _   _   _   _   _   _  12   _   _  13   _   _   _
   _   _   7   _   8   _  10   _   _  15   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00DF0F0CFCE000E00DF0F

Seed (after)

AACADAAAAFDFADFAACACAAAAFEFADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C00000000000000C0C00000000000
Input row #  2                               0000D00000D00D00000000000000D000
Input row #  2                                   000000000000000000000E000E000000
Input row #  2                          00000000000000F0F00F000000000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0094000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 104

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   _  11  13   _   _   _   _   _   _   _
   _   2   _   5   _   _   _   _   _   _   _   _  14  15   _   _   _
   _   _   _   _   _   _   _   6   _   _  12   _   _   _   _   _   _
   _   _   7   _   8   9  10   _   _   _   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00EF0F0FFCE000C00DD0F

Seed (after)

AACADAAAAFDFAFFAAEACAAAACEFADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C0000000000000000C0000C000000
Input row #  2                               0000D00000D00000000000000000DD00
Input row #  2                                   0000000000000E0000000E0000000000
Input row #  2                          00000000000000F0F0FF00000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02100008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00202000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x800d4000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 105

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 2 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   _   _   _  11   _   _   _   _   _   _   _   _
   _   2   _   5   _   _   _   _   _   _   _   _  14   _   _   _   _
   _   _   _   _   _   _   _   6   _   _  12   _   _  13   _   _   _
   _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000D00EF0F0FFCE000E00DF0F

Seed (after)

AACADAAAAFDFAFFAAEACAAAAFEFADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C0000000000000000C00000000000
Input row #  2                               0000D00000D00000000000000000D000
Input row #  2                                   0000000000000E0000000E000E000000
Input row #  2                          00000000000000F0F0FF000000000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10000410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02202000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa00d4000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 106

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   57 |   0   2  21   2 |    _  13   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   7   _   _   _   _   _   _  15   _   _   _   _
   _   _   _   _   5   _   6   8   9   _   _   _   _  14   _   _   _
   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
   _  13   _  16   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0CEFF000D00DC0D0DEEE000G00DC0G

Seed (after)

AACAGAAAAEGDACDAADADAAAAEEEACDAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C0000000000C00000000000000C00
Input row #  2                                0000000000D00D00D0D000000000D000
Input row #  2                                    0000E00000000000000EEE0000000000
Input row #  2          0000000000000000000000000G00000G

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20004008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10052400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00380010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000000)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 107

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   _   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   _   2   _   _   _   _   _   _  10  11   _   _   _   _   _
   _   8  12   _   _   _   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CEGG000D00DC0F0CEEF000C00DC0F

Seed (after)

AACAFAAAAFEDACDAACAFAAAACEEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C0000000000C000C000000C000C00
Input row #  2                                0000000000D00D00000000000000D000
Input row #  2                                     0000E00000000000000EE00000000000
Input row #  2                   0000000000000000F0000F000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80210000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 108

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _   _   _
   _   1   _   _   5   _   6   8   _   _   _   _   _  14   _   _   _
   _   _   _   2   _   _   _   _   _   9  10  11   _   _   _   _   _
   7   _  12   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00DF0D0EEEF000F00DC0F

Seed (after)

AAFADAAAAFEDAFDAADAFAAAAEEEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              00000000000000000000000000000C00
Input row #  2                                000D000000D00D00D00000000000D000
Input row #  2                                     0000E0000000000000EEE00000000000
Input row #  2                   00000000000000F000000F000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10012408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82204000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 109

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   45 |   0   2  27   2 |   15  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   5   _   _   7   _   _  11  13   _   _   _   _   _   _   _
   _   _   _   _   _   _   6   8   _   _   _   _   _  14   _   _   _
   _   _   _   1   2   _   _   _   _   _   9  10  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
  15  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0EEFF000C00DC0D0EECE000C00DG0G

Seed (after)

AAGAGAAAACEEACDAADACAAAACEEAEDAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              0000000000C000C00000C0000C000000
Input row #  2                                0000000000000D00D00000000000D000
Input row #  2                                      000EE0000000000000EE0E0000000000
Input row #  2    00000000000000000000000000000G0G

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000FF0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10012000)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0018)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 27));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 110

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   5   _   _   7   _   _   _   _   _   _  15   _   _   _   _
   _   _   _   _   _   _   _   _   _   8   _   _   _  12   _   _   _
   _   _   _   2   _   _   _   _   6   _  10  11   _   _   _   _   _
   _   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CEGG000C00EC0D0FEED000F00FC0F

Seed (after)

AACAFAAAACEFACFAAFAEAAAADEEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C000000C000C00000000000000C00
Input row #  2                                       0000000000000000D0000D0000000000
Input row #  2                                     0000E00000000E00000EE00000000000
Input row #  2                 000000000000000000F000000F00F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20004408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92040000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 111

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   5   _   _   7   _   _   _  13   _   _  15   _   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   _   _  12   _   _   _
   _   _   _   2   _   _   _   _   6   _  10  11   _   _   _   _   _
   8   9   _   _   _   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000C00EC0F0FEED000C00FC0F

Seed (after)

AAFAFAAAACEDACFAAFAEAAAACEEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              0000000000C000C0000000000C000C00
Input row #  2                                       000D00000000000000000D0000000000
Input row #  2                                     0000E00000000E00000EE00000000000
Input row #  2                 0000000000000000F0F000000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22004400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90050000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 112

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 3 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
 4 |   74 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   3   5   _   _   7   _   _  11  13   _   _   _   _   _   _   _
   _   _   _   4   _   _   _   6   _   _  12   _   _   _   _   _   _
   _   _   _   _   0   _   2   _   _   _   _   8   9  10   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0E0CECD000C00DC0E0EECD000C00FF0G

Seed (after)

AACACAAAACDEACEAADACAAAACDEAEEAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C0C0000C000C00000C0000C000000
Input row #  2                                   000000D000000D0000000D0000000000
Input row #  2                                         0E00E00000000000E0EE000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2       0000000000000000000000000000FF00
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02104428)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00202040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d0012)), 10));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 113

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   6   _   8   _   _   _
   _  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000C00EC0E0CDCF000C00FC0F

Seed (after)

AACAFAAAACDFACFAACACAAAACDEACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C000000C000C000C0C0000C000C00
Input row #  2                                     0000D00000000000000D000000000000
Input row #  2                                            0000000000000E00E000000000000000
Input row #  2              000000000000000000000F000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22144408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00012000)), 13));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 114

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   1   _   5   _   _   7   _   9   _  13   _   _  15   _   _   _   _
   _   _   _   2   _   _   _   _   6   _  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   8   _   _   _
   _  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000C00DC0E0CDDF000C00FC0F

Seed (after)

AACAFAAAACDFACFAACADAAAACDDACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              000C000000C000C000C000000C000C00
Input row #  2                                     0000D00000000D00000DD00000000000
Input row #  2                                            0000000000000000E000000000000000
Input row #  2              000000000000000000000F000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22044408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010000)), 13));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90200000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 115

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    2 |   0   2   1   8 |    1   3   5   _   _   7   _   9  11  13   _   _  15   _   _   _   _
 1 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 2 |   25 |   0   2 -13   5 |    _   _   _   _   _   _   0   2   4   _   _   6   _   8   _   _   _
 3 |   27 |   0   2  17   4 |   10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   5   _   _   7   _   _  11  13   _   _  15   _   _   _   _
   _   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _
   _   _   _   _   _   _   _   2   _   _   _   6   _   8   _   _   _
  10  12   _   _  14   _  16   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000C00EC0E0DFCF000C00FC0F

Seed (after)

AAFAFAAAACDFACFAAEACAAAACDEACEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                              0000000000C000C00000C0000C000C00
Input row #  2                                      000D00000000000000D0000000000000
Input row #  2                                            0000E00000000E00E000000000000000
Input row #  2              0000000000000000000F0F000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x22104400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00012010)), 13));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90280000)), 17));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 116

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   7   _   _   _   _   _  14  15   _   _   _
   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _   _   _
   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _   _
   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000C00CC0F0DEEE000F00CC0F

Seed (after)

AAFADAAAAECFACCAAFADAAAAEEEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00CC0000000000000CC00
Input row #  2                                000D00000000000000D0000000000000
Input row #  2                                    0000E00000000000000EEE0000000000
Input row #  2                 0000000000000000F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30006400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00380010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 117

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _   _   _
   _   1   _   _   5   _   6   8   _   _   _   _   _   _   _   _   _
   _   _   _   2   _   _   _   _   _   9  10  11   _   _   _   _   _
   7   _  12   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000D00DF0D0EEEF000F00CC0F

Seed (after)

AAFADAAAAFEDAFDAADAFAAAAEEEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000000000000000000000CC00
Input row #  2                                000D000000D00D00D000000000000000
Input row #  2                                     0000E0000000000000EEE00000000000
Input row #  2                   00000000000000F000000F000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00012408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82204000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 118

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 3 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   _   7   _  10   _  13   _  14  15   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   9   _   _   _   _   _
   _   _   6   _   _   _   _  12   _   _   _   _   _   _   _   _   _
  11   _   _   _   _  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00EC0D0DCFE000C00CC0F

Seed (after)

AAFACAAAAECDAFCAAEACAAAADCDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C000C0000C00000C00CC00
Input row #  2                                       000D000000000000D0D0000000000000
Input row #  2                           0000000000000E0000000E0000000000
Input row #  2             00000000000000000000F0000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32084410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00050008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00202000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 119

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   _   _   _   _  13   _   _  15   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   _  11   _   _   _   _
   _   _   2   _   _   _   _   _   7  10   _  12   _   _   _   _   _
   8   9   _   _   _   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DEGG000C00CE0F0FEDE000C00FC0F

Seed (after)

AAFAFAAAAECDACFAAFAEAAAAECEADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00C00000000000C000C00
Input row #  2                                       000D0000000000000000D00000000000
Input row #  2                                    0000E000000000E0000E0E0000000000
Input row #  2                 0000000000000000F0F000000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22002400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00284010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90050000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 120

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   _   _  10   _  13   _   _  15   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   9  11   _   _   _   _
   7   _  12   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00CE0D0DCDE000C00FC0F

Seed (after)

AAEACAAAAECDACFAAFACAAAADCDADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00C00000C00000C000C00
Input row #  2                                       000D000000000000D0D0D00000000000
Input row #  2                   00000000000000E000000E0000000000
Input row #  2                 0000000000000000000000000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00150008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00204000)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90000000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 121

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
 4 |   52 |   1   2  13   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   9
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   _   _   _   _   _  13   _  14   _   _   _   _
   _   _   0   _   1   3   4   _   _   8   _   9   _  12   _   _   _
   7   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   6   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DCDD000C00GE0D0DFFD000C00CE0E

Seed (after)

AAEACAAAADCDADDAAEAEAAAADCDACDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00000000000000C00C000
Input row #  2                                       0D0D0DD000000000D0D00D0000000000
Input row #  2                   00000000000000E00000000000000E0E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                0000000000000000000FF00000000000
Input row #  2                  0000000000000G000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12000410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025006a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0004000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00002000)), 13));
}


===========================================================================

Solution: 122

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   51 |   1   2  15   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
 4 |   56 |   1   2   5   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   5
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   _   _   _   _  13   _  14   _   _   _   _
   _   _   0   _   1   _   4   _   _   8   _   9   _  12   _   _   _
   7   _   _   _   _   _   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  10  11
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DCGD000C00CE0D0DFFD000C00CE0E

Seed (after)

AAEACAAAADCDACDAAEAEAAAADCDACDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00C00000000000C00C000
Input row #  2                                       0D0D00D000000000D0D00D0000000000
Input row #  2                   00000000000000E00000000000000E0E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                0000000000000000000FF00000000000
Input row #  2                          00000G00000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x12002410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0025004a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0004000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00180000)), 15));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000020)), 5));
}


===========================================================================

Solution: 123

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   _   _  10   _  13   _   _   _   _   _   _
   _   _   _   _   1   _   _   _   _   _   _   9  11  12   _   _   _
   _   _   7   _   _   _   _   _   _  15   _   _   _   _   _   _   _
   8   _   _   _   _   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00CE0F0DCDD000C00FE0F

Seed (after)

AAFACAAAAECDACFAAFACAAAAECDADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00C00000C00000C000000
Input row #  2                                       000D00000000000000D0DD0000000000
Input row #  2                          00000000000000E00000000000000E00
Input row #  2                 0000000000000000F00000000000F00F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x02082410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00340008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20004000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x90010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 124

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   34 |   0   2  19   3 |   12   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   7   _  10   _  13   _   _  15   _   _   _
   _   _   _   _   1   _   _   _   _   8   _   9  11   _   _   _   _
   _   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _
  12   _  14   _   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00CC0D0DCDF000C00FC0E

Seed (after)

AAFACAAAAFCDACCAAEACAAAADCDADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00CC0000C00000C000C00
Input row #  2                                       000D000000000000D0D0D00000000000
Input row #  2                 0000000000000000000000000000000E
Input row #  2            000000000000000000000F000000F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00150008)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10200000)), 19));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 125

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 3 |   53 |   1   2  10   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7   _
 4 |   82 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   _   _   _   _   _  10   _  13   _   _  15   _   _   _
   _   _   0   _   1   3   4   _   _   8   _   9  11   _   _   _   _
   6   _   _  12   _   _   _  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   5   7   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DCDD000F00EF0D0DCDE000C00EC0G

Seed (after)

AAEACAAAADEDADDAAEACAAAADCDADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000000000000C00000C000C00
Input row #  2                                       0D0D0DD000000000D0D0D00000000000
Input row #  2                    0000000000000E0000000E000000E000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                     0000000000F000F00000000000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22080010)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0015006a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10202000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00004400)), 10));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 126

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 3 |   55 |   1   2   6   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
 4 |   82 |   1   2  26   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   _   _   _   7   _  10   _  13   _   _  15   _   _   _
   _   _   0   _   1   3   _   _   _   8   _   9  11   _   _   _   _
   6   _   _  12   _   _   _  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   4   5   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DCDF000F00EC0D0DCDE000C00EC0G

Seed (after)

AAEACAAAADEDADCAAEACAAAADCDADCAA
FBBBFG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C000000000C0000C00000C000C00
Input row #  2                                       0D0D0D0000000000D0D0D00000000000
Input row #  2                    0000000000000E0000000E000000E000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                         000000F000F000000000000000000000
Input row #  2     0000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x22084010)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0015002a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10202000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000440)), 6));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 26));
}


===========================================================================

Solution: 127

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   23 |   0   2 -11   5 |    _   _   _   _   _   _   1   4   _   6   7   _   _   9   _   _   _
 3 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
 4 |   62 |   0   2  29   1 |   16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   _   7   _  10   _  13   _  14  15   _   _   _
   _   _   0   _   1   3   _   _   _   _   _   9   _   _   _   _   _
   _   _   _   _   _   _   _   4   _   6   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
  16   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DCDE000C00EC0F0DCFF000C00CC0G

Seed (after)

AAGACAAAADCDADCAAEACAAAAECDACCAA
FBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C000C0000C00000C00CC00
Input row #  2                                       0D0D0D000000000000D0000000000000
Input row #  2                                          000000E000000E000000000000000000
Input row #  2  0000000000000000000000000000000G

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000F000FF0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32084410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x0004002a)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00002040)), 11));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 29));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 128

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   7   _   _   _   _   _  14  15   _   _   _
   _   _   _   _   _   5   _   _   _  12   _   _   _   _   _   _   _
   _   _   1   2   _   _   _   _   6   _  10  11   _   _   _   _   _
   8   9   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EEGG000D00EC0F0FEED000F00CC0F

Seed (after)

AAFAFAAAAEEFADCAAFAEAAAADEEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               00000000000000C0000000000000CC00
Input row #  2                                  0000000000D0000000000D0000000000
Input row #  2                                     000EE00000000E00000EE00000000000
Input row #  2                 0000000000000000F0F000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30004000)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200400)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00182018)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82050000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 129

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   7   _  10   _   _   _  14  15   _   _   _
   _   _   _   _   _   _   _   _   _   _  12   _   _   _   _   _   _
   _   _   1   _   _   _   _   _   _   9   _  11   _   _   _   _   _
   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000C00CC0F0ECED000F00CC0F

Seed (after)

AAFACAAAAECFACCAAFACAAAAEDEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00CC0000C00000000CC00
Input row #  2                                   000000000000000000000D0000000000
Input row #  2                                     000E00000000000000E0E00000000000
Input row #  2                 0000000000000000F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 130

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   6   _   _   _   _   _   _  14   _   _   _   _
   _   _   _   _   _   _   5   _   _  11   _   _   _  13   _   _   _
   _   _   _   1   2   _   _   _   _   _   9  10   _   _   _   _   _
   7   8  12   _   _   _   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EEGG000D00CF0F0EEDF000D00CF0F

Seed (after)

AAFAFAAAAFEEACDAAFAFAAAADEEACDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000000C00000000000000C000
Input row #  2                                   0000000000D000000000D0000D000000
Input row #  2                                      000EE0000000000000EE000000000000
Input row #  2                   00000000000000F0F0000F0000000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002000)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02100400)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c0018)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0214000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 131

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _  14  15   _   _   _
   _   _   _   _   _   _   5   6   _  11   _   _   _   _   _   _   _
   _   _   _   1   2   _   _   _   _   _   9  10   _   _   _   _   _
   7   8  12   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EEGG000D00DF0F0EEDF000F00CC0F

Seed (after)

AAFAFAAAAFEEAFDAADAFAAAADEEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000000000000000000000CC00
Input row #  2                                   0000000000D00D000000D00000000000
Input row #  2                                      000EE0000000000000EE000000000000
Input row #  2                   00000000000000F0F0000F000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00102400)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c0018)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82214000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 132

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   7   _  10   _   _   _  14  15   _   _   _
   _   _   _   _   _   _   _   _   _   _  11  12   _   _   _   _   _
   _   _   1   _   _   _   _   _   _   9   _   _   _   _   _   _   _
   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0ECGG000C00CC0F0ECDD000F00CC0F

Seed (after)

AAFACAAAAECFACCAAFACAAAAEDDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00CC0000C00000000CC00
Input row #  2                                    00000000000000000000DD0000000000
Input row #  2                                     000E00000000000000E0000000000000
Input row #  2                 0000000000000000F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00300000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 133

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   23 |   0   2 -11   5 |    _   _   _   _   _   _   1   4   _   6   7   _   _   9   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   _   _   _   _   _   _  14  15   _   _   _
   _   _   2   _   _   _   _   _   7  10  11  12   _   _   _   _   _
   8   9   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   1   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000C00CD0E0EDDD000E00CC0E

Seed (after)

AAEAEAAAADCEACFAAEADAAAADDDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00C00000000000000CC00
Input row #  2                                    0000D000000000D0000DDD0000000000
Input row #  2                 0000000000000000E0E000000E00000E
Input row #  2                                          000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30002400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00384010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82050000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 134

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   32 |   0   2 -16   4 |    _   _   _   _   _   _   _   0   1   _   _   5   _   6   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   7   _   _   _   _   _  14  15   _   _   _
   _   _   2   _   _   _   _   _   _  10  11  12   _   _   _   _   _
   8   9   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000C00CC0E0EDDD000E00CC0E

Seed (after)

AAEAEAAAADCEACCAAEAFAAAADDDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00CC0000000000000CC00
Input row #  2                                    0000D00000000000000DDD0000000000
Input row #  2                 0000000000000000E0E000000E00000E
Input row #  2                                               000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30006400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00380010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82050000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 16));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 135

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   38 |   0   2 -21   3 |    _   _   _   _   _   _   _   _   _   1   2   3   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   7   _  10   _   _   _  14  15   _   _   _
   _   _   2   _   _   _   _   _   _   _  11  12   _   _   _   _   _
   8   9   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   1   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000C00CC0E0ECDD000E00CC0E

Seed (after)

AAEAEAAAADCEACCAAEACAAAAFDDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00CC0000C00000000CC00
Input row #  2                                    0000D000000000000000DD0000000000
Input row #  2                 0000000000000000E0E000000E00000E
Input row #  2                                                    000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30086400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00300010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82050000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 21));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 136

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |    9 |   0   2  -5   7 |    _   _   2   3   4   _   _   _   7  10  11  12   _   _   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   41 |   0   2 -25   3 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   5   _   6   _   _   _   _   _   _   _  15   _   _   _
   _   _   2   _   _   _   _   _   7  10  11  12   _   _   _   _   _
   8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000C00CD0E0EDDD000E00EC0E

Seed (after)

AAEAEAAAADCEACEAAEADAAAADDDAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000000000C00C000000000000000C00
Input row #  2                                    0000D000000000D0000DDD0000000000
Input row #  2                 0000000000000000E0E000000E00E00E
Input row #  2                                                        000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x20002400)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00384010)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x92050000)), 14));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 25));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 137

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   19 |   0   2   8   5 |    5   _   _   9  10  12   _  13   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   _   _   _   7   _   _   _   _   _  14  15   _   _   _
   _   _   1   _   _   _   _   _   6   9   _  11   _   _   _   _   _
   _   _   _   8   _   _   _   _   _   _  16   _   _   _   _   _   _
   5   _   _   _  10  12   _  13   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000F00DC0E0DFDF000F00CC0E

Seed (after)

AAFACAAAADEFAFCAAFADAAAADEDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C000000000C0000000000000CC00
Input row #  2                                     000D000000000D0000D0D00000000000
Input row #  2                         0000000000000000E00000000000000E
Input row #  2                       0000000000F00000000F0F000F000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30004010)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00142008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02280400)), 8));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 138

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   17 |   0   2  10   5 |    _   7  10  11  12   _   _   _  15   _   _   _   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
   _   _   1   _   _   _   _   _   _   9   _  11   _   _   _   _   _
   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _   _
   8   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00CC0F0DCDE000C00CC0F

Seed (after)

AAFACAAAADCEACCAAFACAAAADCDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00CC0000C00000C00CC00
Input row #  2                                     000D00000000000000D0D00000000000
Input row #  2                     000000000000000000000E0000000000
Input row #  2                 0000000000000000F00000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 139

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   19 |   0   2   8   5 |    5   _   _   9  10  12   _  13   _   _   _   _   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   _   7   _   _   _  13   _  14  15   _   _   _
   _   _   1   _   _   _   _   _   6   9   _  11   _   _   _   _   _
   _   _   _   _  10  12   _   _   _   _   _   _   _   _   _   _   _
   8   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00DC0F0DEDE000C00CC0F

Seed (after)

AAFACAAAADCEAECAAFADAAAADCDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C000C0000000000C00CC00
Input row #  2                                     000D000000000D0000D0D00000000000
Input row #  2                       0000000000000000000E0E0000000000
Input row #  2                 0000000000000000F00000000000000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32004410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00142008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 140

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   19 |   0   2   8   5 |    5   _   _   9  10  12   _  13   _   _   _   _   _   _   _   _   _
 3 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   _   7   _   _   _   _   _  14  15   _   _   _
   _   _   1   _   _   _   _   _   6   9  10  11   _   _   _   _   _
   _   _   _   _   _  12   _   _   _   _   _   _   _   _   _   _   _
   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DCGG000C00DC0F0DDDE000F00CC0F

Seed (after)

AAFACAAAADCFAECAAFADAAAADDDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C000C0000000000000CC00
Input row #  2                                     000D000000000D0000DDD00000000000
Input row #  2                       000000000000000000000E0000000000
Input row #  2                 0000000000000000F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x30004410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c2008)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 141

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   21 |   0   2  14   5 |    8   9   _   _  13   _  14  16   _   _   _   _   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   66 |   1   2  17   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
   _   _   1   _   3   _   _   _   _   9   _  11   _   _   _   _   _
   8   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  12   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DCDF000C00CC0E0DCDG000C00CC0E

Seed (after)

AAEACAAAADCDACCAAEACAAAADCDACCAA
FBBBGF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C00000C00CC0000C00000C00CC00
Input row #  2                                     000D0D000000000000D0D00000000000
Input row #  2                 0000000000000000E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F0000F0000000000000000000000000
Input row #  2              000000000000000000000G0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32086410)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140028)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80010000)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000042)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 17));
}


===========================================================================

Solution: 142

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    3 |   0   2   0   8 |    _   2   _   5   _   6   7   _  10   _  13   _  14  15   _   _   _
 1 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 2 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 3 |   30 |   0   2 -14   4 |    _   _   _   _   _   _   _   1   3   5   _   _   7   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   2   _   _   _   _   7   _  10   _  13   _  14  15   _   _   _
   _   _   _   _   8   9   _   _   _   _   _  16   _   _   _   _   _
   6   _  11  12   _   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   1   _   5   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FCGG000F00EC0D0DCEE000C00CC0D

Seed (after)

AAEACAAAAEEDADCAAFACAAAAFCDACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                               0000C000000000C0000C00000C00CC00
Input row #  2                          0000000000000000D0D000000000000D
Input row #  2                    0000000000000E000000EE0000000000
Input row #  2                                             000F000000F000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x32084010)));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80050000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00302000)), 11));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000408)), 14));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 143

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   1   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   _   _   _   _   _   _   _   8   _   9  11   _   _   _   _
   _   _   _   2   _   _   _   _   _   _  10   _   _   _   _   _   _
   7   _  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CEGG000C00CF0D0DEDF000F00CF0F

Seed (after)

AAFACAAAAFECAFCAAFAFAAAADEDADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                000C000000C00C00000000000000C000
Input row #  2                                       0000000000000000D0D0D00000000000
Input row #  2                                     0000E00000000000000E000000000000
Input row #  2                   00000000000000F000000F000F000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00150000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2204000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 144

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |    7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _
 2 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 3 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 4 |   42 |   1   2  16   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   0   1   _   _   _   _   6   _   9   _   _   _   _  14   _   _   _
   _   _   4   _   _   5   _   7   _   _   _   _  13   _   _   _   _
   _   _   _   2   3   _   _   _   _   _  10   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _  15   _  16   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   8  11  12
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0C0CEED000D00CD0G0CEGG000D00CF0F

Seed (after)

AACACAAAADEEADCAADACAAAAFEFADCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                0C0C000000000C0000C000000000C000
Input row #  2                                  000000D000D000D0000000000D000000
Input row #  2                                     0000EE0000000000000E000000000000
Input row #  2                          00000000000000000000000000000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2               0000000000000000G000GG0000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x1004200a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02004440)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080030)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 5));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00310000)), 16));
}


===========================================================================

Solution: 145

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 3 |   31 |   0   2 -15   4 |    _   _   _   _   _   _   _   _   2   _   5   _   6   7   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   0   1   _   _   _   _   _   8   _   _   _  13   _  14   _   _   _
   _   _   3   4   _   _   5   _   _  11  12   _   _   _   _   _   _
   _   _   _   _  15  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   2   _   _   _   6   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0C0CFDD000D00FG0C0GGDD000C00CE0E

Seed (after)

AACACAAAADDEAEDAACAFAAAADDCAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                0C0C000000000000C00000000C00C000
Input row #  2                                   00000DD000D000000000DD0000000000
Input row #  2             00000000000000000000000000000E0E
Input row #  2                                              0000F00000000F000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x1201000a)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00300460)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0000000)), 18));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00002010)), 15));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 146

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   1   2   _   _   _   _   _   9  10  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _  12   _   _   _   _
   7   8   _   _   _  13   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DDGG000C00CF0F0DDDE000F00CF0F

Seed (after)

AAFAFAAAADDCAFCAAFAFAAAADDDAECAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                0000000000C00C00000000000000C000
Input row #  2                                     000DD0000000000000DDD00000000000
Input row #  2                                      000000000000000000000E0000000000
Input row #  2                   00000000000000F0F00000000F000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0018)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00200000)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2014000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 147

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   1   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   _   2   _   _   _   _   _   9   _  11   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   8   _  10   _   _   _   _
   7   _  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000C00CF0E0DEDF000F00CF0F

Seed (after)

AAFACAAAAFDCAFCAAFAFAAAADEDAECAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                000C000000C00C00000000000000C000
Input row #  2                                     0000D0000000000000D0D00000000000
Input row #  2                                        0000000000000000E00E000000000000
Input row #  2                   00000000000000F000000F000F000F0F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00140010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00090000)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2204000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 148

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   24 |   0   2 -12   5 |    _   _   _   _   _   0   _   3   _   _   6   7   8   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   1   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   _   2   _   _   _   _   _   9  10  11   _   _   _   _   _
   7   _  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   8   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000C00CE0F0DDDE000E00CE0E

Seed (after)

AAEACAAAAEDCAECAAEAEAAAADDDAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                000C000000C00C00000000000000C000
Input row #  2                                     0000D0000000000000DDD00000000000
Input row #  2                   00000000000000E000000E000E000E0E
Input row #  2                                           0000000000000000F000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2204000)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00010000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 149

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |   10 |   0   2  -6   7 |    _   _   1   2   3   _   _   _   6   9  10  11   _   _   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   41 |   0   2 -25   3 |    _   _   _   _   _   _   _   _   _   _   _   0   1   2   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   5   _   6   _   _   _   _   _   _  14   _   _   _
   _   _   _   2   _   _   _   _   _   9  10  11   _   _   _   _   _
   7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   1   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0FDGG000C00CE0E0DDDE000E00CE0E

Seed (after)

AAEAEAAAAEDCAECAAEAEAAAADDDAFCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                0000000000C00C00000000000000C000
Input row #  2                                     0000D0000000000000DDD00000000000
Input row #  2                   00000000000000E0E0000E000E000E0E
Input row #  2                                                        000F0000000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10002400)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x001c0010)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa2214000)), 12));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000008)), 25));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 150

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    4 |   0   2  -1   8 |    0   1   _   _   5   _   6   8   9   _   _  13   _  14   _   _   _
 1 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 2 |   16 |   0   2   5   6 |    _   _   7   _   8   9  10   _   _  15   _  16   _   _   _   _   _
 3 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   1   _   _   5   _   _   _   9   _   _   _   _   _   _   _   _
   _   _   _   _   _   2   _   _   _   _   8   _  10  11   _   _   _
   _   _   7   _   _   _   _   _   _  15   _  16   _   _   _   _   _
   6   _   _  12   _   _  13  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CDGG000C00FE0D0CDDF000F00FE0E

Seed (after)

AAFACAAAAEFCADFAAFACAAAAEDEADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                000C000000C0000000C0000000000000
Input row #  2                                        0000D00000000000D00DD00000000000
Input row #  2                          00000000000000E00000000000000E0E
Input row #  2                    0000000000000F0000000F000F00F000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00040408)), 1));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00190010)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xa0004000)), 5));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x12202000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 151

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    5 |   0   2  -8   8 |    _   _   0   _   1   3   4   _   _   8   _   9  11  12   _   _   _
 1 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 2 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   _   _   _   _   _   _   _  11  12   _   _   _
   _   _   6   _   _   _   9   _   _  14  15   _   _   _   _   _   _
   _   _   _   1   2   _   _   5   _   _   _  10   _   _   _   _   _
   7   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0EEGG000E00DF0F0DECC000F00DD0F

Seed (after)

AAFAFAAAADEEAFDAAEAFAAAADDEACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                       00000000000000000000CC0000000000
Input row #  2                           0000000000000D0000D000000000DD00
Input row #  2                                      000EE00000E00000000E000000000000
Input row #  2                   00000000000000F0F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00300000)), 8));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30042000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00080418)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82014000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 152

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 1 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 2 |   12 |   0   2  -9   7 |    _   _   _   0   _   2   3   _   5   _   8   _  10  11   _   _   _
 3 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   6   _   _   _   9   _   _  14  15   _   _   _   _   _   _
   _   _   _   1   2   _   _   5   _   _   _  10  12   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _  11   _   _   _
   7   8   _   _   _  13   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DDGG000D00CF0F0CDED000F00CC0F

Seed (after)

AAFAFAAAACDDAFCAADAFAAAACCDADEAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                           0000000000000C0000C000000000CC00
Input row #  2                                      000DD00000D00000000D0D0000000000
Input row #  2                                        00000000000000000000E00000000000
Input row #  2                   00000000000000F0F00000000F00000F

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30042000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00280418)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00100000)), 9));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82014000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 153

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   6   7   _   _   _  12   _  14   _   _   _   _   _   _   _
   _   _   _   _   _   1   2   _   _   _   _   8   9  10   _   _   _
   _   5   _   _   _   _   _   _  13   _  16   _   _   _   _   _   _
  11   _   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DDGG000E00CC0D0DDFC000E00CF0E

Seed (after)

AAFAEAAAACCFADDAACAEAAAACEDADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                           0000000000000CC000000C000000C000
Input row #  2                                         000DD00000000000D0DD000000000000
Input row #  2                         0000000000E00000000000000E00000E
Input row #  2             00000000000000000000F00000000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10206000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d0018)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000400)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 154

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   6   _   _   _   _  12   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   1   2   _   _   7   _   8   9  10   _   _   _
   _   5   _   _   _   _   _   _  13   _  16   _   _   _   _   _   _
  11   _   _  14  15   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0DDGG000E00CD0D0DDFC000E00FF0E

Seed (after)

AAFAEAAAACFFADDAACAEAAAADEDADDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                           0000000000000C0000000C0000000000
Input row #  2                                         000DD000000000D0D0DD000000000000
Input row #  2                         0000000000E00000000000000E00000E
Input row #  2             00000000000000000000F0000000FF00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00202000)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d4018)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000400)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30100000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 155

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   58 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3
 4 |   74 |   1   2  31   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   4   _   6   7   _   _   _  12   _  14  15   _   _   _   _   _   _
   _   _   _   _   0   1   _   _   _   _   _   8   9  10   _   _   _
   _   5   _   _   _   _  11   _  13   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  16   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DFFC000E00CC0D0DDEC000E00CC0G

Seed (after)

AACAEAAAACCDADEAACAEAAAACCDADDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                           000000C000000CC000000C000000CC00
Input row #  2                                         0D0D000000000000D0DD000000000000
Input row #  2                         0000000000E000000000E0000E000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               0000FF00000000000000000000000000
Input row #  20000000000000000000000000000000G

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30206040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d000a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02100400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000030)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80000000)), 31));
}


===========================================================================

Solution: 156

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    6 |   0   2   4   7 |    4   _   6   7   _   _   9  12   _  14  15   _   _   _   _   _   _
 1 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 2 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 3 |   58 |   1   2   0   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3
 4 |   76 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   4   _   6   7   _   _   _  12   _  14   _   _   _   _   _   _   _
   _   _   _   _   0   1   _   _   _   _   _   8   9  10   _   _   _
   _   5   _   _   _   _  11   _  13   _  16   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   2   3
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0D0DFFC000E00CC0D0DDEC000E00CG0E

Seed (after)

AACAEAAAACCDADEAACAEAAAACEDADDAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                           000000C000000CC000000C000000C000
Input row #  2                                         0D0D000000000000D0DD000000000000
Input row #  2                         0000000000E000000000E0000E00000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                               0000FF00000000000000000000000000
Input row #  2  00000000000000000000000000000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10206040)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d000a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82100400)), 6));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000030)));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 29));
}


===========================================================================

Solution: 157

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    7 |   0   2  -3   7 |    _   0   4   _   _   5   _   7   8  12   _   _  13   _   _   _   _
 1 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 2 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 3 |   39 |   0   2 -22   3 |    _   _   _   _   _   _   _   _   _   _   1   2   4   _   _   _   _
 4 |   43 |   1   2  14   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   0   _   _   _   _   _   _   8  12   _   _   _   _   _   _   _
   _   _   3   _   _   _   5   6   _   _   _   _   _  13   _   _   _
  11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   1   2   4   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   7   9  10
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0C0FFDF000D00DG0C0GGEC000D00EE0E

Seed (after)

AAEACAAAADEEAEDAADACAAAACFFAFDAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                  0C00000000000000C0000C0000000000
Input row #  2                                   00000D0000D00D00000000000D000000
Input row #  2             00000000000000000000E0000000EE0E
Input row #  2                                                     000FF0F0000000000000000000000000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                 00000000000000G000GG000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00210002)), 3));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02002420)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0xb0100000)), 18));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000058)), 22));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000c4000)), 14));
}


===========================================================================

Solution: 158

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |    8 |   0   2  -4   7 |    _   _   3   4   _   _   5   6   _  11  12   _   _  13   _   _   _
 1 |   11 |   0   2  -7   7 |    _   _   _   1   2   4   _   5   _   _   9  10  12   _   _   _   _
 2 |   14 |   0   2  12   6 |    7   8  12   _   _  13   _  15  16   _   _   _   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   48 |   1   2  24   2 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   3   _   _   _   5   6   _  11   _   _   _  13   _   _   _
   _   _   _   1   2   4   _   _   _   _   9  10  12   _   _   _   _
   7   8   _   _   _   _   _   _  16   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _  14  15
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0F0DDCD000C00CE0E0DDCD000C00GG0E

Seed (after)

AAEAEAAAACDDADCAACAEAAAACDDADCAA
FBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                   00000C0000C00C000000C0000C000000
Input row #  2                                      000DD0D00000000000DD0D0000000000
Input row #  2                   00000000000000E0E00000000000000E

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0F000000000000000000000000000000
Input row #  2       0000000000000000000000000000GG00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x02102420)), 4));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x002c0058)), 7));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x80014000)), 12));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000002)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x30000000)), 24));
}


===========================================================================

Solution: 159

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 1 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 2 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 3 |   26 |   0   2  18   4 |   11   _   _  14  15  16   _   _   _   _   _   _   _   _   _   _   _
 4 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   _   1   2   _   _   7   _   8   9  10   _   _   _
   _   5   _   _   _   _   _   _  13   _  16   _   _   _   _   _   _
   6   _  11  12   _   _   _  14   _   _   _   _   _   _   _   _   _
   _   _   _   _  15   _   _   _   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0G0CCGG000D00EC0C0CCEE000D00EF0D

Seed (after)

AAEADAAAAEEFACCAAEADAAAACDCACCAA
GBBBGG

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                         000CC000000000C0C0CC000000000000
Input row #  2                         0000000000D00000000000000D00000D
Input row #  2                    0000000000000E000000EE000000E000
Input row #  2             00000000000000000000000000000F00

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              0G000GG0000000000000000000000000

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d4018)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000400)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10302000)), 11));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 18));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000062)), 1));
}


===========================================================================

Solution: 160

Original submatrix

 # |  Ind | RoG RoO Sft Tot |    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------------------------------------
 0 |   13 |   0   2 -10   7 |    _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
 1 |   15 |   0   2   6   6 |    _   5   _   8   _  10  11   _  13   _  16   _   _   _   _   _   _
 2 |   22 |   0   2  11   5 |    6   _  11  12   _   _  13  14   _   _   _   _   _   _   _   _   _
 3 |   44 |   1   2   1   3 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _   0   3   4
 4 |   76 |   1   2  29   1 |    _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------------------------------------

Submatrix after correction

   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
--------------------------------------------------------------------
   _   _   _   _   0   1   2   _   _   7   _   8   9  10   _   _   _
   _   5   _   _   _   _   _   _  13   _  16   _   _   _   _   _   _
   6   _  11  12   _   _   _  14   _   _   _   _   _   _   _   _   _
   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   3   4
   _   _   _   _   _   _   _   _   _   _   _   _   _   _  15   _   _
--------------------------------------------------------------------

Seed (before)

AA0A0AAAA000A00AA0A0AAAA000A00AA
0BBB0000000000000000000000000000
0C0CCFF000D00EC0C0CCEE000D00EG0D

Seed (after)

AAEADAAAAEECACCAAEADAAAACDCACCAA
GBBBFF

Processing scheme

Output row #0
Input row #  0                               AA0A0AAAA000A00AA0A0AAAA000A00AA
Input row #  2                                         0C0CC000000000C0C0CC000000000000
Input row #  2                         0000000000D00000000000000D00000D
Input row #  2                    0000000000000E000000EE000000E000

Output row #1
Input row #  1                               0BBB0000000000000000000000000000
Input row #  2                              00000FF0000000000000000000000000
Input row #  2  00000000000000000000000000000G00

SIMD function

void compactSeed(__m128i *vmIn, __m128i *vmOut){
	vmOut[0] = _mm_and_si128(vmIn[0], _mm_set1_epi32(0xc8f591eb));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_slli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x000d401a)), 10));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x82000400)), 6));
	vmOut[0] = _mm_or_si128(vmOut[0], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x10302000)), 11));
	vmOut[1] = _mm_and_si128(vmIn[2], _mm_set1_epi32(0x0000000e));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x00000060)), 1));
	vmOut[1] = _mm_or_si128(vmOut[1], _mm_srli_epi32(_mm_and_si128(vmIn[1], _mm_set1_epi32(0x20000000)), 29));
}

